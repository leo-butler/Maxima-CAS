Listing of compilation of file /cygdrive/e/temp/maxima/src/bessel.lisp
on 2002-12-17 13:34:03 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/bessel.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BESSELEXPAND NIL)-2-1|
(CONST 0) = $BESSELEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSELEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $BESSELEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $BESSELEXPAND NIL)-2-2|
(CONST 0) = (SPECIAL $BESSELEXPAND)
(CONST 1) = $BESSELEXPAND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $BESSELEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $BESSELEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $BESSELEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $BESSELEXPAND
12    (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL) (DEFMACRO NSYMBOL-ARRAY # ...) ...)-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FLONUM # # ...) (FLONUM X Z ...) ...)-4|
(CONST 0) = (SPECIAL $JARRAY $IARRAY $GARRAY)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $JARRAY $IARRAY $GARRAY)
1     (CALLS1 90)                         ; PROCLAIM
3     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (FLONUM # # ...) (*EXPR *F //F ...))-5|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (EVAL COMPILE) (DEFMACRO *F # ...) ...)-6|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN J[0]-BESSEL (X) ...)-7|
(CONST 0) = J[0]-BESSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE J[0]-BESSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; J[0]-BESSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; J[0]-BESSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE J[0]-BESSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; J[0]-BESSEL
8     (SKIP&RET 1)


Disassembly of function J[0]-BESSEL
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = SLATEC:DBESJ0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (CALL1 2)                           ; SLATEC:DBESJ0
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $J0 ($X) ...)-8|
(CONST 0) = $J0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $J0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $J0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $J0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $J0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $J0
8     (SKIP&RET 1)


Disassembly of function $J0
(CONST 0) = 1.0
(CONST 1) = J[0]-BESSEL
(CONST 2) = ($J0 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($J0 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; J[0]-BESSEL
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN J[1]-BESSEL (X) ...)-9|
(CONST 0) = J[1]-BESSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE J[1]-BESSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; J[1]-BESSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; J[1]-BESSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE J[1]-BESSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; J[1]-BESSEL
8     (SKIP&RET 1)


Disassembly of function J[1]-BESSEL
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = SLATEC:DBESJ1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (CALL1 2)                           ; SLATEC:DBESJ1
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $J1 ($X) ...)-10|
(CONST 0) = $J1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $J1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $J1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $J1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $J1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $J1
8     (SKIP&RET 1)


Disassembly of function $J1
(CONST 0) = 1.0
(CONST 1) = J[1]-BESSEL
(CONST 2) = ($J1 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($J1 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; J[1]-BESSEL
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $JN ($X $N) ...)-11|
(CONST 0) = $JN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JN
8     (SKIP&RET 1)


Disassembly of function $JN
(CONST 0) = 0
(CONST 1) = 1.0
(CONST 2) = N
(CONST 3) = ALPHA
(CONST 4) = DOUBLE-FLOAT
(CONST 5) = SLATEC:DBESJ
(CONST 6) = $JARRAY
(CONST 7) = FILLARRAY
(CONST 8) = ($JN SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHA N)
55 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIFNOT 8 L14)             ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIFNOT 8 L14)             ; NUMBERP
8     (LOAD&PUSH 1)
9     (CONST&PUSH 0)                      ; 0
10    (CALLSR&JMPIF 1 50 L21)             ; >=
14    L14
14    (CONST&PUSH 8)                      ; ($JN SIMP)
15    (LOAD&PUSH 3)
16    (LOAD&PUSH 3)
17    (LIST 3)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 1)
22    (CONST&PUSH 1)                      ; 1.0
23    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
25    (PUSH-UNBOUND 1)
27    (CALLS2 179)                        ; FLOOR
29    (NV-TO-STACK 2)
31    (LOAD 1)
32    (BIND 2)                            ; N
34    (LOAD 3)
35    (BIND 3)                            ; ALPHA
37    (GETVALUE&PUSH 2)                   ; N
39    (CALLS2&PUSH 150)                   ; 1+
41    (PUSH-UNBOUND 7)
43    (CONST 4)                           ; DOUBLE-FLOAT
44    (STORE 5)
45    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
47    (LOAD&PUSH 11)
48    (CONST&PUSH 1)                      ; 1.0
49    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
51    (GETVALUE&PUSH 3)                   ; ALPHA
53    (GETVALUE&PUSH 2)                   ; N
55    (CALLS2&PUSH 150)                   ; 1+
57    (LOAD&PUSH 3)
58    (CONST&PUSH 0)                      ; 0
59    (CALL 5 5)                          ; SLATEC:DBESJ
62    (CONST&PUSH 6)                      ; $JARRAY
63    (GETVALUE&PUSH 2)                   ; N
65    (CALLS2&PUSH 150)                   ; 1+
67    (PUSH-UNBOUND 7)
69    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
71    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
73    (CONST&PUSH 6)                      ; $JARRAY
74    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
76    (LOAD&PUSH 1)
77    (CALL2 7)                           ; FILLARRAY
79    (LOAD&PUSH 0)
80    (GETVALUE&PUSH 2)                   ; N
82    (CALLSR 1 1)                        ; AREF
85    (SKIP 1)
87    (UNBIND 2)
89    (SKIP&RET 5)


Disassembly of function #:|(DEFUN I[0]-BESSEL (X) ...)-12|
(CONST 0) = I[0]-BESSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE I[0]-BESSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; I[0]-BESSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; I[0]-BESSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE I[0]-BESSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; I[0]-BESSEL
8     (SKIP&RET 1)


Disassembly of function I[0]-BESSEL
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = SLATEC:DBESI0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (CALL1 2)                           ; SLATEC:DBESI0
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $I0 ($X) ...)-13|
(CONST 0) = $I0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $I0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $I0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $I0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $I0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $I0
8     (SKIP&RET 1)


Disassembly of function $I0
(CONST 0) = 1.0
(CONST 1) = I[0]-BESSEL
(CONST 2) = ($I0 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($I0 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; I[0]-BESSEL
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN I[1]-BESSEL (X) ...)-14|
(CONST 0) = I[1]-BESSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE I[1]-BESSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; I[1]-BESSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; I[1]-BESSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE I[1]-BESSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; I[1]-BESSEL
8     (SKIP&RET 1)


Disassembly of function I[1]-BESSEL
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = SLATEC:DBESI1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (CALL1 2)                           ; SLATEC:DBESI1
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $I1 ($X) ...)-15|
(CONST 0) = $I1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $I1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $I1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $I1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $I1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $I1
8     (SKIP&RET 1)


Disassembly of function $I1
(CONST 0) = 1.0
(CONST 1) = I[1]-BESSEL
(CONST 2) = ($I1 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($I1 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; I[1]-BESSEL
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $IN ($X $N) ...)-16|
(CONST 0) = $IN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $IN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $IN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $IN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $IN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $IN
8     (SKIP&RET 1)


Disassembly of function $IN
(CONST 0) = 0
(CONST 1) = 1.0
(CONST 2) = N
(CONST 3) = ALPHA
(CONST 4) = DOUBLE-FLOAT
(CONST 5) = 1
(CONST 6) = SLATEC:DBESI
(CONST 7) = $IARRAY
(CONST 8) = FILLARRAY
(CONST 9) = ($IN SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHA N)
56 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIFNOT 8 L14)             ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIFNOT 8 L14)             ; NUMBERP
8     (LOAD&PUSH 1)
9     (CONST&PUSH 0)                      ; 0
10    (CALLSR&JMPIF 1 50 L21)             ; >=
14    L14
14    (CONST&PUSH 9)                      ; ($IN SIMP)
15    (LOAD&PUSH 3)
16    (LOAD&PUSH 3)
17    (LIST 3)
19    (SKIP&RET 3)
21    L21
21    (LOAD&PUSH 1)
22    (CONST&PUSH 1)                      ; 1.0
23    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
25    (PUSH-UNBOUND 1)
27    (CALLS2 179)                        ; FLOOR
29    (NV-TO-STACK 2)
31    (LOAD 1)
32    (BIND 2)                            ; N
34    (LOAD 3)
35    (BIND 3)                            ; ALPHA
37    (GETVALUE&PUSH 2)                   ; N
39    (CALLS2&PUSH 150)                   ; 1+
41    (PUSH-UNBOUND 7)
43    (CONST 4)                           ; DOUBLE-FLOAT
44    (STORE 5)
45    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
47    (LOAD&PUSH 11)
48    (CONST&PUSH 1)                      ; 1.0
49    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
51    (GETVALUE&PUSH 3)                   ; ALPHA
53    (CONST&PUSH 5)                      ; 1
54    (GETVALUE&PUSH 2)                   ; N
56    (CALLS2&PUSH 150)                   ; 1+
58    (LOAD&PUSH 4)
59    (CONST&PUSH 0)                      ; 0
60    (CALL 6 6)                          ; SLATEC:DBESI
63    (CONST&PUSH 7)                      ; $IARRAY
64    (GETVALUE&PUSH 2)                   ; N
66    (CALLS2&PUSH 150)                   ; 1+
68    (PUSH-UNBOUND 7)
70    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
72    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
74    (CONST&PUSH 7)                      ; $IARRAY
75    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
77    (LOAD&PUSH 1)
78    (CALL2 8)                           ; FILLARRAY
80    (LOAD&PUSH 0)
81    (GETVALUE&PUSH 2)                   ; N
83    (CALLSR 1 1)                        ; AREF
86    (SKIP 1)
88    (UNBIND 2)
90    (SKIP&RET 5)


Disassembly of function #:|(DEFUN $BESSEL_I (ARG ORDER) ...)-17|
(CONST 0) = $BESSEL_I
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL_I>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_I
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL_I
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL_I>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL_I
8     (SKIP&RET 1)


Disassembly of function $BESSEL_I
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = $IN
(CONST 3) = $BESSEL_I
(CONST 4) = SUBFUNMAKES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
4     (LOAD&PUSH 2)
5     (CALL1&PUSH 0)                      ; $REALPART
7     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
10    (LOAD&PUSH 2)
11    (CALL1&PUSH 1)                      ; $IMAGPART
13    (CALLS2&JMPIF 8 L28)                ; NUMBERP
16    L16
16    (CONST&PUSH 3)                      ; $BESSEL_I
17    (LOAD&PUSH 2)
18    (NIL)
19    (CONS&PUSH)
20    (LOAD&PUSH 4)
21    (NIL)
22    (CONS&PUSH)
23    (CALL 3 4)                          ; SUBFUNMAKES
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1&PUSH 0)                      ; $REALPART
31    (LOAD&PUSH 3)
32    (CALL1&PUSH 1)                      ; $IMAGPART
34    (CALLS2&PUSH 196)                   ; COMPLEX
36    (LOAD&PUSH 2)
37    (CALL2 2)                           ; $IN
39    (SKIP&RET 3)

WARNING in BESSEL-I in lines 189..240 :
variable V-NZ is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN BESSEL-I (ARG ORDER) ...)-18|
(CONST 0) = BESSEL-I
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-I>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-I
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-I
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-I>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-I
8     (SKIP&RET 1)


Disassembly of function BESSEL-I
(CONST 0) = SLATEC:DBESI0
(CONST 1) = 1
(CONST 2) = SLATEC:DBESI1
(CONST 3) = 1.0
(CONST 4) = N
(CONST 5) = ALPHA
(CONST 6) = DOUBLE-FLOAT
(CONST 7) = 0
(CONST 8) = SLATEC:DBESI
(CONST 9) = $BESSELARRAY
(CONST 10) = FILLARRAY
(CONST 11) = SLATEC:ZBESI
(CONST 12) = #<COMPILED-CLOSURE BESSEL-I-1>
(CONST 13) = *STANDARD-OUTPUT*
(CONST 14) = K
(CONST 15) = (MPLUS)
(CONST 16) = (MTIMES)
(CONST 17) = $%I
(CONST 18) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K *STANDARD-OUTPUT* ALPHA N)
writes special variable : (K)
159 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 198)                   ; IMAGPART
3     (CALLS2&JMPIF 145 L115)             ; ZEROP
7     (LOAD&PUSH 1)
8     (CONST&PUSH 3)                      ; 1.0
9     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
11    (PUSH-UNBOUND 1)
13    (CALLS2 179)                        ; FLOOR
15    (NV-TO-STACK 2)
17    (LOAD 1)
18    (BIND 4)                            ; N
20    (LOAD 3)
21    (BIND 5)                            ; ALPHA
23    (GETVALUE&PUSH 4)                   ; N
25    (CALLS2&PUSH 150)                   ; 1+
27    (PUSH-UNBOUND 7)
29    (CONST 6)                           ; DOUBLE-FLOAT
30    (STORE 5)
31    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
33    (GETVALUE&PUSH 4)                   ; N
35    (CALLS2&PUSH 150)                   ; 1+
37    (PUSH-UNBOUND 7)
39    (CONST 6)                           ; DOUBLE-FLOAT
40    (STORE 5)
41    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
43    (LOAD&PUSH 12)
44    (CALLS2&PUSH 197)                   ; REALPART
46    (CONST&PUSH 3)                      ; 1.0
47    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
49    (LOAD&PUSH 13)
50    (CALLS2&PUSH 198)                   ; IMAGPART
52    (CONST&PUSH 3)                      ; 1.0
53    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
55    (GETVALUE&PUSH 5)                   ; ALPHA
57    (CONST&PUSH 1)                      ; 1
58    (GETVALUE&PUSH 4)                   ; N
60    (CALLS2&PUSH 150)                   ; 1+
62    (LOAD&PUSH 6)
63    (LOAD&PUSH 6)
64    (CONST&PUSH 7)                      ; 0
65    (CONST&PUSH 7)                      ; 0
66    (CALL 9 11)                         ; SLATEC:ZBESI
69    (NV-TO-STACK 9)
71    (LOAD&PUSH 0)
72    (CALLS2&JMPIFNOT 146 L82)           ; PLUSP
75    (CONST&PUSH 12)                     ; #<COMPILED-CLOSURE BESSEL-I-1>
76    (GETVALUE&PUSH 13)                  ; *STANDARD-OUTPUT*
78    (LOAD&PUSH 2)
79    (CALLSR 2 21)                       ; FUNCALL
82    L82
82    (CONST&PUSH 9)                      ; $BESSELARRAY
83    (GETVALUE&PUSH 4)                   ; N
85    (CALLS2&PUSH 150)                   ; 1+
87    (CALLS2&PUSH 150)                   ; 1+
89    (PUSH-UNBOUND 7)
91    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
93    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
95    (CONST 7)                           ; 0
96    (BIND 14)                           ; K
98    (GETVALUE&PUSH 4)                   ; N
100   (CALLS2&PUSH 150)                   ; 1+
102   (JMP L243)
105   L105
105   (LOAD&PUSH 0)
106   (CALL1 0)                           ; SLATEC:DBESI0
108   (SKIP&RET 4)
110   L110
110   (LOAD&PUSH 0)
111   (CALL1 2)                           ; SLATEC:DBESI1
113   (SKIP&RET 4)
115   L115
115   (LOAD&PUSH 2)
116   (CALLS2&PUSH 197)                   ; REALPART
118   (LOAD&PUSH 2)
119   (CALLS2&JMPIF 145 L105)             ; ZEROP
122   (LOAD&PUSH 2)
123   (CONST&PUSH 1)                      ; 1
124   (CALLSR&JMPIF 1 45 L110)            ; =
128   (LOAD&PUSH 2)
129   (CONST&PUSH 3)                      ; 1.0
130   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
132   (PUSH-UNBOUND 1)
134   (CALLS2 179)                        ; FLOOR
136   (NV-TO-STACK 2)
138   (LOAD 1)
139   (BIND 4)                            ; N
141   (LOAD 3)
142   (BIND 5)                            ; ALPHA
144   (GETVALUE&PUSH 4)                   ; N
146   (CALLS2&PUSH 150)                   ; 1+
148   (PUSH-UNBOUND 7)
150   (CONST 6)                           ; DOUBLE-FLOAT
151   (STORE 5)
152   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
154   (LOAD&PUSH 9)
155   (CALLS2&PUSH 197)                   ; REALPART
157   (CONST&PUSH 3)                      ; 1.0
158   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
160   (GETVALUE&PUSH 5)                   ; ALPHA
162   (CONST&PUSH 1)                      ; 1
163   (GETVALUE&PUSH 4)                   ; N
165   (CALLS2&PUSH 150)                   ; 1+
167   (LOAD&PUSH 4)
168   (CONST&PUSH 7)                      ; 0
169   (CALL 6 8)                          ; SLATEC:DBESI
172   (CONST&PUSH 9)                      ; $BESSELARRAY
173   (GETVALUE&PUSH 4)                   ; N
175   (CALLS2&PUSH 150)                   ; 1+
177   (PUSH-UNBOUND 7)
179   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
181   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
183   (CONST&PUSH 9)                      ; $BESSELARRAY
184   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
186   (LOAD&PUSH 1)
187   (CALL2 10)                          ; FILLARRAY
189   (LOAD&PUSH 0)
190   (GETVALUE&PUSH 4)                   ; N
192   (CALLSR 1 1)                        ; AREF
195   (SKIP 1)
197   (UNBIND 2)
199   (SKIP&RET 6)
201   L201
201   (CONST&PUSH 9)                      ; $BESSELARRAY
202   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
204   (GETVALUE&PUSH 14)                  ; K
206   (CONST&PUSH 15)                     ; (MPLUS)
207   (CONST&PUSH 16)                     ; (MTIMES)
208   (CONST&PUSH 17)                     ; $%I
209   (LOAD&PUSH 18)
210   (GETVALUE&PUSH 14)                  ; K
212   (CALLSR&PUSH 1 1)                   ; AREF
215   (LIST&PUSH 3)
217   (CALL1&PUSH 18)                     ; SIMPLIFY
219   (LOAD&PUSH 18)
220   (GETVALUE&PUSH 14)                  ; K
222   (CALLSR&PUSH 1 1)                   ; AREF
225   (LIST&PUSH 3)
227   (CALL1&PUSH 18)                     ; SIMPLIFY
229   (LOAD&PUSH 2)
230   (LOAD&PUSH 2)
231   (LOAD&PUSH 2)
232   (CALLSR 1 2)                        ; SYSTEM::STORE
235   (SKIP 3)
237   (GETVALUE&PUSH 14)                  ; K
239   (CALLS2 150)                        ; 1+
241   (SETVALUE 14)                       ; K
243   L243
243   (GETVALUE&PUSH 14)                  ; K
245   (LOAD&PUSH 1)
246   (CALLSR&JMPIFNOT 1 50 L201)         ; >=
250   (CONST&PUSH 9)                      ; $BESSELARRAY
251   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
253   (GETVALUE&PUSH 4)                   ; N
255   (CALLSR 1 1)                        ; AREF
258   (SKIP 1)
260   (UNBIND1)
261   (SKIP 11)
263   (UNBIND 2)
265   (SKIP&RET 5)


Disassembly of function BESSEL-I-1
(CONST 0) = "zbesi ierr = "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; "zbesi ierr = "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (LOAD&PUSH 3)
11    (CALLS1 139)                        ; TERPRI
13    (LOAD 1)
14    (SKIP&RET 4)

WARNING in BESSEL-K in lines 242..293 :
variable V-NZ is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN BESSEL-K (ARG ORDER) ...)-19|
(CONST 0) = BESSEL-K
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-K>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-K
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-K
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-K>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-K
8     (SKIP&RET 1)


Disassembly of function BESSEL-K
(CONST 0) = SLATEC:DBESK0
(CONST 1) = 1
(CONST 2) = SLATEC:DBESK1
(CONST 3) = 1.0
(CONST 4) = N
(CONST 5) = ALPHA
(CONST 6) = DOUBLE-FLOAT
(CONST 7) = 0
(CONST 8) = SLATEC:DBESK
(CONST 9) = $BESSELARRAY
(CONST 10) = FILLARRAY
(CONST 11) = SLATEC:ZBESK
(CONST 12) = #<COMPILED-CLOSURE BESSEL-K-1>
(CONST 13) = *STANDARD-OUTPUT*
(CONST 14) = K
(CONST 15) = (MPLUS)
(CONST 16) = (MTIMES)
(CONST 17) = $%I
(CONST 18) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K *STANDARD-OUTPUT* ALPHA N)
writes special variable : (K)
159 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 198)                   ; IMAGPART
3     (CALLS2&JMPIF 145 L115)             ; ZEROP
7     (LOAD&PUSH 1)
8     (CONST&PUSH 3)                      ; 1.0
9     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
11    (PUSH-UNBOUND 1)
13    (CALLS2 179)                        ; FLOOR
15    (NV-TO-STACK 2)
17    (LOAD 1)
18    (BIND 4)                            ; N
20    (LOAD 3)
21    (BIND 5)                            ; ALPHA
23    (GETVALUE&PUSH 4)                   ; N
25    (CALLS2&PUSH 150)                   ; 1+
27    (PUSH-UNBOUND 7)
29    (CONST 6)                           ; DOUBLE-FLOAT
30    (STORE 5)
31    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
33    (GETVALUE&PUSH 4)                   ; N
35    (CALLS2&PUSH 150)                   ; 1+
37    (PUSH-UNBOUND 7)
39    (CONST 6)                           ; DOUBLE-FLOAT
40    (STORE 5)
41    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
43    (LOAD&PUSH 12)
44    (CALLS2&PUSH 197)                   ; REALPART
46    (CONST&PUSH 3)                      ; 1.0
47    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
49    (LOAD&PUSH 13)
50    (CALLS2&PUSH 198)                   ; IMAGPART
52    (CONST&PUSH 3)                      ; 1.0
53    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
55    (GETVALUE&PUSH 5)                   ; ALPHA
57    (CONST&PUSH 1)                      ; 1
58    (GETVALUE&PUSH 4)                   ; N
60    (CALLS2&PUSH 150)                   ; 1+
62    (LOAD&PUSH 6)
63    (LOAD&PUSH 6)
64    (CONST&PUSH 7)                      ; 0
65    (CONST&PUSH 7)                      ; 0
66    (CALL 9 11)                         ; SLATEC:ZBESK
69    (NV-TO-STACK 9)
71    (LOAD&PUSH 0)
72    (CALLS2&JMPIFNOT 146 L82)           ; PLUSP
75    (CONST&PUSH 12)                     ; #<COMPILED-CLOSURE BESSEL-K-1>
76    (GETVALUE&PUSH 13)                  ; *STANDARD-OUTPUT*
78    (LOAD&PUSH 2)
79    (CALLSR 2 21)                       ; FUNCALL
82    L82
82    (CONST&PUSH 9)                      ; $BESSELARRAY
83    (GETVALUE&PUSH 4)                   ; N
85    (CALLS2&PUSH 150)                   ; 1+
87    (CALLS2&PUSH 150)                   ; 1+
89    (PUSH-UNBOUND 7)
91    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
93    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
95    (CONST 7)                           ; 0
96    (BIND 14)                           ; K
98    (GETVALUE&PUSH 4)                   ; N
100   (CALLS2&PUSH 150)                   ; 1+
102   (JMP L243)
105   L105
105   (LOAD&PUSH 0)
106   (CALL1 0)                           ; SLATEC:DBESK0
108   (SKIP&RET 4)
110   L110
110   (LOAD&PUSH 0)
111   (CALL1 2)                           ; SLATEC:DBESK1
113   (SKIP&RET 4)
115   L115
115   (LOAD&PUSH 2)
116   (CALLS2&PUSH 197)                   ; REALPART
118   (LOAD&PUSH 2)
119   (CALLS2&JMPIF 145 L105)             ; ZEROP
122   (LOAD&PUSH 2)
123   (CONST&PUSH 1)                      ; 1
124   (CALLSR&JMPIF 1 45 L110)            ; =
128   (LOAD&PUSH 2)
129   (CONST&PUSH 3)                      ; 1.0
130   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
132   (PUSH-UNBOUND 1)
134   (CALLS2 179)                        ; FLOOR
136   (NV-TO-STACK 2)
138   (LOAD 1)
139   (BIND 4)                            ; N
141   (LOAD 3)
142   (BIND 5)                            ; ALPHA
144   (GETVALUE&PUSH 4)                   ; N
146   (CALLS2&PUSH 150)                   ; 1+
148   (PUSH-UNBOUND 7)
150   (CONST 6)                           ; DOUBLE-FLOAT
151   (STORE 5)
152   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
154   (LOAD&PUSH 9)
155   (CALLS2&PUSH 197)                   ; REALPART
157   (CONST&PUSH 3)                      ; 1.0
158   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
160   (GETVALUE&PUSH 5)                   ; ALPHA
162   (CONST&PUSH 1)                      ; 1
163   (GETVALUE&PUSH 4)                   ; N
165   (CALLS2&PUSH 150)                   ; 1+
167   (LOAD&PUSH 4)
168   (CONST&PUSH 7)                      ; 0
169   (CALL 6 8)                          ; SLATEC:DBESK
172   (CONST&PUSH 9)                      ; $BESSELARRAY
173   (GETVALUE&PUSH 4)                   ; N
175   (CALLS2&PUSH 150)                   ; 1+
177   (PUSH-UNBOUND 7)
179   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
181   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
183   (CONST&PUSH 9)                      ; $BESSELARRAY
184   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
186   (LOAD&PUSH 1)
187   (CALL2 10)                          ; FILLARRAY
189   (LOAD&PUSH 0)
190   (GETVALUE&PUSH 4)                   ; N
192   (CALLSR 1 1)                        ; AREF
195   (SKIP 1)
197   (UNBIND 2)
199   (SKIP&RET 6)
201   L201
201   (CONST&PUSH 9)                      ; $BESSELARRAY
202   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
204   (GETVALUE&PUSH 14)                  ; K
206   (CONST&PUSH 15)                     ; (MPLUS)
207   (CONST&PUSH 16)                     ; (MTIMES)
208   (CONST&PUSH 17)                     ; $%I
209   (LOAD&PUSH 18)
210   (GETVALUE&PUSH 14)                  ; K
212   (CALLSR&PUSH 1 1)                   ; AREF
215   (LIST&PUSH 3)
217   (CALL1&PUSH 18)                     ; SIMPLIFY
219   (LOAD&PUSH 18)
220   (GETVALUE&PUSH 14)                  ; K
222   (CALLSR&PUSH 1 1)                   ; AREF
225   (LIST&PUSH 3)
227   (CALL1&PUSH 18)                     ; SIMPLIFY
229   (LOAD&PUSH 2)
230   (LOAD&PUSH 2)
231   (LOAD&PUSH 2)
232   (CALLSR 1 2)                        ; SYSTEM::STORE
235   (SKIP 3)
237   (GETVALUE&PUSH 14)                  ; K
239   (CALLS2 150)                        ; 1+
241   (SETVALUE 14)                       ; K
243   L243
243   (GETVALUE&PUSH 14)                  ; K
245   (LOAD&PUSH 1)
246   (CALLSR&JMPIFNOT 1 50 L201)         ; >=
250   (CONST&PUSH 9)                      ; $BESSELARRAY
251   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
253   (GETVALUE&PUSH 4)                   ; N
255   (CALLSR 1 1)                        ; AREF
258   (SKIP 1)
260   (UNBIND1)
261   (SKIP 11)
263   (UNBIND 2)
265   (SKIP&RET 5)


Disassembly of function BESSEL-K-1
(CONST 0) = "zbesk ierr = "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; "zbesk ierr = "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (LOAD&PUSH 3)
11    (CALLS1 139)                        ; TERPRI
13    (LOAD 1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN $BESSEL_K (ARG ORDER) ...)-20|
(CONST 0) = $BESSEL_K
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL_K>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_K
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL_K
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL_K>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL_K
8     (SKIP&RET 1)


Disassembly of function $BESSEL_K
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = BESSEL-K
(CONST 3) = $BESSEL_K
(CONST 4) = SUBFUNMAKES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
4     (LOAD&PUSH 2)
5     (CALL1&PUSH 0)                      ; $REALPART
7     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
10    (LOAD&PUSH 2)
11    (CALL1&PUSH 1)                      ; $IMAGPART
13    (CALLS2&JMPIF 8 L28)                ; NUMBERP
16    L16
16    (CONST&PUSH 3)                      ; $BESSEL_K
17    (LOAD&PUSH 2)
18    (NIL)
19    (CONS&PUSH)
20    (LOAD&PUSH 4)
21    (NIL)
22    (CONS&PUSH)
23    (CALL 3 4)                          ; SUBFUNMAKES
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1&PUSH 0)                      ; $REALPART
31    (LOAD&PUSH 3)
32    (CALL1&PUSH 1)                      ; $IMAGPART
34    (CALLS2&PUSH 196)                   ; COMPLEX
36    (LOAD&PUSH 2)
37    (CALL2 2)                           ; BESSEL-K
39    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $G0 ($X) ...)-21|
(CONST 0) = $G0
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $G0>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $G0
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $G0
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $G0>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $G0
8     (SKIP&RET 1)


Disassembly of function $G0
(CONST 0) = 1.0
(CONST 1) = SLATEC:DBSI0E
(CONST 2) = ($G0 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($G0 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; SLATEC:DBSI0E
16    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $G1 ($X) ...)-22|
(CONST 0) = $G1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $G1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $G1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $G1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $G1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $G1
8     (SKIP&RET 1)


Disassembly of function $G1
(CONST 0) = 1.0
(CONST 1) = SLATEC:DBSI1E
(CONST 2) = ($G1 SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($G1 SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; SLATEC:DBSI1E
16    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (FIXNUM I N) (FLONUM X Q1 ...))-23|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $GN ($X $N) ...)-24|
(CONST 0) = $GN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GN
8     (SKIP&RET 1)


Disassembly of function $GN
(CONST 0) = 1.0
(CONST 1) = N
(CONST 2) = ALPHA
(CONST 3) = DOUBLE-FLOAT
(CONST 4) = 2
(CONST 5) = 0
(CONST 6) = SLATEC:DBESI
(CONST 7) = $IARRAY
(CONST 8) = FILLARRAY
(CONST 9) = (GN SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (ALPHA N)
53 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIFNOT 8 L8)              ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIF 12 L15)               ; INTEGERP
8     L8
8     (CONST&PUSH 9)                      ; (GN SIMP)
9     (LOAD&PUSH 3)
10    (LOAD&PUSH 3)
11    (LIST 3)
13    (SKIP&RET 3)
15    L15
15    (LOAD&PUSH 1)
16    (CONST&PUSH 0)                      ; 1.0
17    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
19    (PUSH-UNBOUND 1)
21    (CALLS2 179)                        ; FLOOR
23    (NV-TO-STACK 2)
25    (LOAD 1)
26    (BIND 1)                            ; N
28    (LOAD 3)
29    (BIND 2)                            ; ALPHA
31    (GETVALUE&PUSH 1)                   ; N
33    (CALLS2&PUSH 150)                   ; 1+
35    (PUSH-UNBOUND 7)
37    (CONST 3)                           ; DOUBLE-FLOAT
38    (STORE 5)
39    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
41    (LOAD&PUSH 11)
42    (CONST&PUSH 0)                      ; 1.0
43    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
45    (GETVALUE&PUSH 2)                   ; ALPHA
47    (CONST&PUSH 4)                      ; 2
48    (GETVALUE&PUSH 1)                   ; N
50    (CALLS2&PUSH 150)                   ; 1+
52    (LOAD&PUSH 4)
53    (CONST&PUSH 5)                      ; 0
54    (CALL 6 6)                          ; SLATEC:DBESI
57    (CONST&PUSH 7)                      ; $IARRAY
58    (GETVALUE&PUSH 1)                   ; N
60    (CALLS2&PUSH 150)                   ; 1+
62    (PUSH-UNBOUND 7)
64    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
66    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
68    (CONST&PUSH 7)                      ; $IARRAY
69    (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
71    (LOAD&PUSH 1)
72    (CALL2 8)                           ; FILLARRAY
74    (LOAD&PUSH 0)
75    (GETVALUE&PUSH 1)                   ; N
77    (CALLSR 1 1)                        ; AREF
80    (SKIP 1)
82    (UNBIND 2)
84    (SKIP&RET 5)


Disassembly of function #:|(DECLARE-TOP (FLONUM RZ CZ ...) (FIXNUM N K1 ...) ...)-25|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $BESSEL ($ARG $ORDER) ...)-26|
(CONST 0) = $BESSEL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL
8     (SKIP&RET 1)


Disassembly of function $BESSEL
(CONST 0) = 1.0
(CONST 1) = 0.0
(CONST 2) = $REALPART
(CONST 3) = $IMAGPART
(CONST 4) = ($BESSEL SIMP)
(CONST 5) = 0
(CONST 6) = SLATEC:DBESJ0
(CONST 7) = 1
(CONST 8) = SLATEC:DBESJ1
(CONST 9) = N
(CONST 10) = ALPHA
(CONST 11) = DOUBLE-FLOAT
(CONST 12) = SLATEC:DBESJ
(CONST 13) = $BESSELARRAY
(CONST 14) = FILLARRAY
(CONST 15) = PI
(CONST 16) = K
(CONST 17) = V
(CONST 18) = (MPLUS)
(CONST 19) = (MTIMES)
(CONST 20) = $%I
(CONST 21) = SIMPLIFY
(CONST 22) = SLATEC:ZBESJ
(CONST 23) = #<COMPILED-CLOSURE $BESSEL-1>
(CONST 24) = *STANDARD-OUTPUT*
(CONST 25) = (MPLUS)
(CONST 26) = (MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V K PI *STANDARD-OUTPUT* ALPHA N)
writes special variable : (K)
250 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; 1.0
2     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
4     (LOAD&PUSH 2)
5     (CALLS2&JMPIFNOT 8 L135)            ; NUMBERP
9     (LOAD&PUSH 0)
10    (CONST&PUSH 1)                      ; 0.0
11    (CALLSR&JMPIF 1 47 L135)            ; <
16    (LOAD&PUSH 3)
17    (CALL1&PUSH 2)                      ; $REALPART
19    (CALLS2&JMPIFNOT 8 L135)            ; NUMBERP
23    (LOAD&PUSH 3)
24    (CALL1&PUSH 3)                      ; $IMAGPART
26    (CALLS2&JMPIFNOT 8 L135)            ; NUMBERP
30    (LOAD&PUSH 3)
31    (CALL1&PUSH 3)                      ; $IMAGPART
33    (CALLS2&JMPIF 145 L201)             ; ZEROP
37    (LOAD&PUSH 2)
38    (CONST&PUSH 0)                      ; 1.0
39    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
41    (PUSH-UNBOUND 1)
43    (CALLS2 179)                        ; FLOOR
45    (NV-TO-STACK 2)
47    (LOAD 1)
48    (BIND 9)                            ; N
50    (LOAD 3)
51    (BIND 10)                           ; ALPHA
53    (GETVALUE&PUSH 9)                   ; N
55    (CALLS2&PUSH 150)                   ; 1+
57    (PUSH-UNBOUND 7)
59    (CONST 11)                          ; DOUBLE-FLOAT
60    (STORE 5)
61    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
63    (GETVALUE&PUSH 9)                   ; N
65    (CALLS2&PUSH 150)                   ; 1+
67    (PUSH-UNBOUND 7)
69    (CONST 11)                          ; DOUBLE-FLOAT
70    (STORE 5)
71    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
73    (LOAD&PUSH 13)
74    (CALL1&PUSH 2)                      ; $REALPART
76    (CONST&PUSH 0)                      ; 1.0
77    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
79    (LOAD&PUSH 14)
80    (CALL1&PUSH 3)                      ; $IMAGPART
82    (CONST&PUSH 0)                      ; 1.0
83    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
85    (GETVALUE&PUSH 10)                  ; ALPHA
87    (CONST&PUSH 7)                      ; 1
88    (GETVALUE&PUSH 9)                   ; N
90    (CALLS2&PUSH 150)                   ; 1+
92    (LOAD&PUSH 6)
93    (LOAD&PUSH 6)
94    (CONST&PUSH 5)                      ; 0
95    (CONST&PUSH 5)                      ; 0
96    (CALL 9 22)                         ; SLATEC:ZBESJ
99    (NV-TO-STACK 9)
101   (LOAD&PUSH 0)
102   (CALLS2&JMPIFNOT 146 L112)          ; PLUSP
105   (CONST&PUSH 23)                     ; #<COMPILED-CLOSURE $BESSEL-1>
106   (GETVALUE&PUSH 24)                  ; *STANDARD-OUTPUT*
108   (LOAD&PUSH 2)
109   (CALLSR 2 21)                       ; FUNCALL
112   L112
112   (CONST&PUSH 13)                     ; $BESSELARRAY
113   (GETVALUE&PUSH 9)                   ; N
115   (CALLS2&PUSH 150)                   ; 1+
117   (CALLS2&PUSH 150)                   ; 1+
119   (PUSH-UNBOUND 7)
121   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
123   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
125   (CONST 5)                           ; 0
126   (BIND 16)                           ; K
128   (GETVALUE&PUSH 9)                   ; N
130   (CALLS2&PUSH 150)                   ; 1+
132   (JMP L406)
135   L135
135   (CONST&PUSH 4)                      ; ($BESSEL SIMP)
136   (LOAD&PUSH 4)
137   (LOAD&PUSH 4)
138   (LIST 3)
140   (SKIP&RET 4)
142   L142
142   (LOAD&PUSH 3)
143   (CONST&PUSH 0)                      ; 1.0
144   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
146   (CALL1 6)                           ; SLATEC:DBESJ0
148   (SKIP&RET 4)
150   L150
150   (LOAD&PUSH 3)
151   (CONST&PUSH 0)                      ; 1.0
152   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
154   (CALL1 8)                           ; SLATEC:DBESJ1
156   (SKIP&RET 4)
158   L158
158   (LOAD&PUSH 12)
159   (CONST&PUSH 0)                      ; 1.0
160   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
162   (GETVALUE&PUSH 10)                  ; ALPHA
164   (GETVALUE&PUSH 9)                   ; N
166   (CALLS2&PUSH 150)                   ; 1+
168   (LOAD&PUSH 3)
169   (CONST&PUSH 5)                      ; 0
170   (CALL 5 12)                         ; SLATEC:DBESJ
173   (CONST&PUSH 13)                     ; $BESSELARRAY
174   (GETVALUE&PUSH 9)                   ; N
176   (CALLS2&PUSH 150)                   ; 1+
178   (PUSH-UNBOUND 7)
180   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
182   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
184   (CONST&PUSH 13)                     ; $BESSELARRAY
185   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
187   (LOAD&PUSH 1)
188   (CALL2 14)                          ; FILLARRAY
190   (LOAD&PUSH 0)
191   (GETVALUE&PUSH 9)                   ; N
193   (CALLSR 1 1)                        ; AREF
196   (SKIP 1)
198   (JMP L426)
201   L201
201   (LOAD&PUSH 2)
202   (CONST&PUSH 5)                      ; 0
203   (CALLSR&JMPIF 1 45 L142)            ; =
208   (LOAD&PUSH 2)
209   (CONST&PUSH 7)                      ; 1
210   (CALLSR&JMPIF 1 45 L150)            ; =
214   (LOAD&PUSH 2)
215   (CONST&PUSH 0)                      ; 1.0
216   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
218   (PUSH-UNBOUND 1)
220   (CALLS2 179)                        ; FLOOR
222   (NV-TO-STACK 2)
224   (LOAD 1)
225   (BIND 9)                            ; N
227   (LOAD 3)
228   (BIND 10)                           ; ALPHA
230   (GETVALUE&PUSH 9)                   ; N
232   (CALLS2&PUSH 150)                   ; 1+
234   (PUSH-UNBOUND 7)
236   (CONST 11)                          ; DOUBLE-FLOAT
237   (STORE 5)
238   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
240   (LOAD&PUSH 12)
241   (CONST&PUSH 5)                      ; 0
242   (CALLSR&JMPIF 1 50 L158)            ; >=
247   (LOAD&PUSH 12)
248   (CONST&PUSH 0)                      ; 1.0
249   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
251   (CALLSR&PUSH 0 54)                  ; -
254   (GETVALUE&PUSH 10)                  ; ALPHA
256   (GETVALUE&PUSH 9)                   ; N
258   (CALLS2&PUSH 150)                   ; 1+
260   (LOAD&PUSH 3)
261   (CONST&PUSH 5)                      ; 0
262   (CALL 5 12)                         ; SLATEC:DBESJ
265   (CONST&PUSH 13)                     ; $BESSELARRAY
266   (GETVALUE&PUSH 9)                   ; N
268   (CALLS2&PUSH 150)                   ; 1+
270   (PUSH-UNBOUND 7)
272   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
274   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
276   (LOAD&PUSH 11)
277   (GETVALUE&PUSH 15)                  ; PI
279   (CALLSR&PUSH 2 55)                  ; *
282   (CALLS2&PUSH 164)                   ; CIS
284   (CONST 5)                           ; 0
285   (BIND 16)                           ; K
287   (GETVALUE&PUSH 9)                   ; N
289   (CALLS2&PUSH 150)                   ; 1+
291   (JMP L342)
293   L293
293   (LOAD&PUSH 4)
294   (LOAD&PUSH 6)
295   (GETVALUE&PUSH 16)                  ; K
297   (CALLSR&PUSH 1 1)                   ; AREF
300   (CALLSR 2 55)                       ; *
303   (BIND 17)                           ; V
305   (CONST&PUSH 13)                     ; $BESSELARRAY
306   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
308   (GETVALUE&PUSH 16)                  ; K
310   (CONST&PUSH 18)                     ; (MPLUS)
311   (GETVALUE&PUSH 17)                  ; V
313   (CALLS2&PUSH 197)                   ; REALPART
315   (CONST&PUSH 19)                     ; (MTIMES)
316   (CONST&PUSH 20)                     ; $%I
317   (GETVALUE&PUSH 17)                  ; V
319   (CALLS2&PUSH 198)                   ; IMAGPART
321   (LIST&PUSH 3)
323   (LIST&PUSH 3)
325   (CALL1&PUSH 21)                     ; SIMPLIFY
327   (LOAD&PUSH 2)
328   (LOAD&PUSH 2)
329   (LOAD&PUSH 2)
330   (CALLSR 1 2)                        ; SYSTEM::STORE
333   (SKIP 3)
335   (UNBIND1)
336   (GETVALUE&PUSH 16)                  ; K
338   (CALLS2 150)                        ; 1+
340   (SETVALUE 16)                       ; K
342   L342
342   (GETVALUE&PUSH 16)                  ; K
344   (LOAD&PUSH 1)
345   (CALLSR&JMPIFNOT 1 50 L293)         ; >=
349   (SKIP 1)
351   (UNBIND1)
352   (CONST&PUSH 13)                     ; $BESSELARRAY
353   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
355   (GETVALUE&PUSH 9)                   ; N
357   (CALLSR 1 1)                        ; AREF
360   (SKIP 2)
362   (JMP L426)
364   L364
364   (CONST&PUSH 13)                     ; $BESSELARRAY
365   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
367   (GETVALUE&PUSH 16)                  ; K
369   (CONST&PUSH 25)                     ; (MPLUS)
370   (CONST&PUSH 26)                     ; (MTIMES)
371   (CONST&PUSH 20)                     ; $%I
372   (LOAD&PUSH 18)
373   (GETVALUE&PUSH 16)                  ; K
375   (CALLSR&PUSH 1 1)                   ; AREF
378   (LIST&PUSH 3)
380   (CALL1&PUSH 21)                     ; SIMPLIFY
382   (LOAD&PUSH 18)
383   (GETVALUE&PUSH 16)                  ; K
385   (CALLSR&PUSH 1 1)                   ; AREF
388   (LIST&PUSH 3)
390   (CALL1&PUSH 21)                     ; SIMPLIFY
392   (LOAD&PUSH 2)
393   (LOAD&PUSH 2)
394   (LOAD&PUSH 2)
395   (CALLSR 1 2)                        ; SYSTEM::STORE
398   (SKIP 3)
400   (GETVALUE&PUSH 16)                  ; K
402   (CALLS2 150)                        ; 1+
404   (SETVALUE 16)                       ; K
406   L406
406   (GETVALUE&PUSH 16)                  ; K
408   (LOAD&PUSH 1)
409   (CALLSR&JMPIFNOT 1 50 L364)         ; >=
413   (CONST&PUSH 13)                     ; $BESSELARRAY
414   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
416   (GETVALUE&PUSH 9)                   ; N
418   (CALLSR 1 1)                        ; AREF
421   (SKIP 1)
423   (UNBIND1)
424   (SKIP 11)
426   L426
426   (UNBIND 2)
428   (SKIP&RET 6)


Disassembly of function $BESSEL-1
(CONST 0) = "zbesj ierr = "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; "zbesj ierr = "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (LOAD&PUSH 3)
11    (CALLS1 139)                        ; TERPRI
13    (LOAD 1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN $BESSEL_J (ARG ORDER) ...)-27|
(CONST 0) = $BESSEL_J
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL_J>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_J
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL_J
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL_J>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL_J
8     (SKIP&RET 1)


Disassembly of function $BESSEL_J
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = $BESSEL
(CONST 3) = $BESSEL_J
(CONST 4) = SUBFUNMAKES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
4     (LOAD&PUSH 2)
5     (CALL1&PUSH 0)                      ; $REALPART
7     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
10    (LOAD&PUSH 2)
11    (CALL1&PUSH 1)                      ; $IMAGPART
13    (CALLS2&JMPIF 8 L28)                ; NUMBERP
16    L16
16    (CONST&PUSH 3)                      ; $BESSEL_J
17    (LOAD&PUSH 2)
18    (NIL)
19    (CONS&PUSH)
20    (LOAD&PUSH 4)
21    (NIL)
22    (CONS&PUSH)
23    (CALL 3 4)                          ; SUBFUNMAKES
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1&PUSH 0)                      ; $REALPART
31    (LOAD&PUSH 3)
32    (CALL1&PUSH 1)                      ; $IMAGPART
34    (CALLS2&PUSH 196)                   ; COMPLEX
36    (LOAD&PUSH 2)
37    (CALL2 2)                           ; $BESSEL
39    (SKIP&RET 3)

WARNING in BESSEL-Y in lines 432..537 :
$BESSELARRAY is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in BESSEL-Y in lines 432..537 :
variable J is not used.
Misspelled or missing IGNORE declaration?
WARNING in BESSEL-Y in lines 432..537 :
variable V-NZ is not used.
Misspelled or missing IGNORE declaration?

Disassembly of function #:|(DEFUN BESSEL-Y (ARG ORDER) ...)-28|
(CONST 0) = BESSEL-Y
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-Y>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-Y
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-Y
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-Y>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-Y
8     (SKIP&RET 1)


Disassembly of function BESSEL-Y
(CONST 0) = 0
(CONST 1) = SLATEC:DBESY0
(CONST 2) = (MPLUS)
(CONST 3) = (MTIMES)
(CONST 4) = $%I
(CONST 5) = 2
(CONST 6) = SLATEC:DBESJ0
(CONST 7) = SIMPLIFY
(CONST 8) = 1
(CONST 9) = SLATEC:DBESY1
(CONST 10) = (MPLUS)
(CONST 11) = (MTIMES)
(CONST 12) = -2
(CONST 13) = SLATEC:DBESJ1
(CONST 14) = 1.0
(CONST 15) = N
(CONST 16) = ALPHA
(CONST 17) = DOUBLE-FLOAT
(CONST 18) = SLATEC:DBESY
(CONST 19) = $BESSELARRAY
(CONST 20) = FILLARRAY
(CONST 21) = $BESSEL
(CONST 22) = V
(CONST 23) = PI
(CONST 24) = #C(0 2)
(CONST 25) = $YARRAY
(CONST 26) = K
(CONST 27) = (MPLUS)
(CONST 28) = (MTIMES)
(CONST 29) = SLATEC:ZBESY
(CONST 30) = #<COMPILED-CLOSURE BESSEL-Y-1>
(CONST 31) = *STANDARD-OUTPUT*
(CONST 32) = (MPLUS)
(CONST 33) = (MTIMES)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (*STANDARD-OUTPUT* $BESSELARRAY K PI V N ALPHA)
writes special variable : (K)
295 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 198)                   ; IMAGPART
3     (CALLS2&JMPIFNOT 145 L326)          ; ZEROP
7     (LOAD&PUSH 2)
8     (CALLS2&PUSH 197)                   ; REALPART
10    (LOAD&PUSH 2)
11    (CALLS2&JMPIF 145 L60)              ; ZEROP
14    (LOAD&PUSH 2)
15    (CONST&PUSH 8)                      ; 1
16    (CALLSR&JMPIFNOT 1 45 L131)         ; =
21    (LOAD&PUSH 0)
22    (CONST&PUSH 0)                      ; 0
23    (CALLSR&JMPIF 1 50 L84)             ; >=
27    (CONST&PUSH 10)                     ; (MPLUS)
28    (LOAD&PUSH 1)
29    (CALLSR&PUSH 0 54)                  ; -
32    (CALL1&PUSH 9)                      ; SLATEC:DBESY1
34    (CONST&PUSH 11)                     ; (MTIMES)
35    (CONST&PUSH 4)                      ; $%I
36    (CONST&PUSH 12)                     ; -2
37    (LOAD&PUSH 5)
38    (CALLSR&PUSH 0 54)                  ; -
41    (CALL1 13)                          ; SLATEC:DBESJ1
43    L43
43    (PUSH)
44    (CALLSR&PUSH 2 55)                  ; *
47    (LIST&PUSH 3)
49    (LIST&PUSH 3)
51    (CALL1 7)                           ; SIMPLIFY
53    (SKIP&RET 4)
55    L55
55    (LOAD&PUSH 0)
56    (CALL1 1)                           ; SLATEC:DBESY0
58    (SKIP&RET 4)
60    L60
60    (LOAD&PUSH 0)
61    (CONST&PUSH 0)                      ; 0
62    (CALLSR&JMPIF 1 50 L55)             ; >=
66    (CONST&PUSH 2)                      ; (MPLUS)
67    (LOAD&PUSH 1)
68    (CALLSR&PUSH 0 54)                  ; -
71    (CALL1&PUSH 1)                      ; SLATEC:DBESY0
73    (CONST&PUSH 3)                      ; (MTIMES)
74    (CONST&PUSH 4)                      ; $%I
75    (CONST&PUSH 5)                      ; 2
76    (LOAD&PUSH 5)
77    (CALLSR&PUSH 0 54)                  ; -
80    (CALL1 6)                           ; SLATEC:DBESJ0
82    (JMP L43)
84    L84
84    (LOAD&PUSH 0)
85    (CALL1 9)                           ; SLATEC:DBESY1
87    (SKIP&RET 4)
89    L89
89    (LOAD&PUSH 9)
90    (CALLS2&PUSH 197)                   ; REALPART
92    (CONST&PUSH 14)                     ; 1.0
93    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
95    (GETVALUE&PUSH 16)                  ; ALPHA
97    (GETVALUE&PUSH 15)                  ; N
99    (CALLS2&PUSH 150)                   ; 1+
101   (LOAD&PUSH 3)
102   (CALL 4 18)                         ; SLATEC:DBESY
105   (CONST&PUSH 19)                     ; $BESSELARRAY
106   (GETVALUE&PUSH 15)                  ; N
108   (CALLS2&PUSH 150)                   ; 1+
110   (PUSH-UNBOUND 7)
112   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
114   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
116   (CONST&PUSH 19)                     ; $BESSELARRAY
117   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
119   (LOAD&PUSH 1)
120   (CALL2 20)                          ; FILLARRAY
122   (LOAD&PUSH 0)
123   (GETVALUE&PUSH 15)                  ; N
125   (CALLSR 1 1)                        ; AREF
128   (JMP L320)
131   L131
131   (LOAD&PUSH 2)
132   (CONST&PUSH 14)                     ; 1.0
133   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
135   (PUSH-UNBOUND 1)
137   (CALLS2 179)                        ; FLOOR
139   (NV-TO-STACK 2)
141   (LOAD 1)
142   (BIND 15)                           ; N
144   (LOAD 3)
145   (BIND 16)                           ; ALPHA
147   (GETVALUE&PUSH 15)                  ; N
149   (CALLS2&PUSH 150)                   ; 1+
151   (PUSH-UNBOUND 7)
153   (CONST 17)                          ; DOUBLE-FLOAT
154   (STORE 5)
155   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
157   (LOAD&PUSH 9)
158   (CONST&PUSH 0)                      ; 0
159   (CALLSR&JMPIF 1 50 L89)             ; >=
164   (LOAD&PUSH 9)
165   (CALLSR&PUSH 0 54)                  ; -
168   (LOAD&PUSH 12)
169   (CALL2 21)                          ; $BESSEL
171   (GETVALUE&PUSH 22)                  ; V
173   (GETVALUE&PUSH 23)                  ; PI
175   (CALLSR&PUSH 2 55)                  ; *
178   (CALLSR&PUSH 0 54)                  ; -
181   (CALLS2&PUSH 164)                   ; CIS
183   (CONST&PUSH 24)                     ; #C(0 2)
184   (GETVALUE&PUSH 22)                  ; V
186   (GETVALUE&PUSH 23)                  ; PI
188   (CALLSR&PUSH 2 55)                  ; *
191   (CALLS2&PUSH 162)                   ; COS
193   (CALLSR&PUSH 2 55)                  ; *
196   (LOAD&PUSH 11)
197   (CONST&PUSH 14)                     ; 1.0
198   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
200   (CALLSR&PUSH 0 54)                  ; -
203   (GETVALUE&PUSH 16)                  ; ALPHA
205   (GETVALUE&PUSH 15)                  ; N
207   (CALLS2&PUSH 150)                   ; 1+
209   (LOAD&PUSH 5)
210   (CALL 4 18)                         ; SLATEC:DBESY
213   (CONST&PUSH 25)                     ; $YARRAY
214   (GETVALUE&PUSH 15)                  ; N
216   (CALLS2&PUSH 150)                   ; 1+
218   (PUSH-UNBOUND 7)
220   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
222   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
224   (CONST 0)                           ; 0
225   (BIND 26)                           ; K
227   (GETVALUE&PUSH 15)                  ; N
229   (CALLS2&PUSH 150)                   ; 1+
231   (JMP L299)
234   L234
234   (LOAD&PUSH 5)
235   (LOAD&PUSH 7)
236   (GETVALUE&PUSH 26)                  ; K
238   (CALLSR&PUSH 1 1)                   ; AREF
241   (CALLSR&PUSH 2 55)                  ; *
244   (LOAD&PUSH 5)
245   (GETVALUE&PUSH 19)                  ; $BESSELARRAY
247   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
249   (GETVALUE&PUSH 26)                  ; K
251   (CALLSR&PUSH 1 1)                   ; AREF
254   (CALLSR&PUSH 2 55)                  ; *
257   (CALLSR 2 53)                       ; +
260   (BIND 22)                           ; V
262   (CONST&PUSH 25)                     ; $YARRAY
263   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
265   (GETVALUE&PUSH 26)                  ; K
267   (CONST&PUSH 27)                     ; (MPLUS)
268   (GETVALUE&PUSH 22)                  ; V
270   (CALLS2&PUSH 197)                   ; REALPART
272   (CONST&PUSH 28)                     ; (MTIMES)
273   (CONST&PUSH 4)                      ; $%I
274   (GETVALUE&PUSH 22)                  ; V
276   (CALLS2&PUSH 198)                   ; IMAGPART
278   (LIST&PUSH 3)
280   (LIST&PUSH 3)
282   (CALL1&PUSH 7)                      ; SIMPLIFY
284   (LOAD&PUSH 2)
285   (LOAD&PUSH 2)
286   (LOAD&PUSH 2)
287   (CALLSR 1 2)                        ; SYSTEM::STORE
290   (SKIP 3)
292   (UNBIND1)
293   (GETVALUE&PUSH 26)                  ; K
295   (CALLS2 150)                        ; 1+
297   (SETVALUE 26)                       ; K
299   L299
299   (GETVALUE&PUSH 26)                  ; K
301   (LOAD&PUSH 1)
302   (CALLSR&JMPIFNOT 1 50 L234)         ; >=
307   (SKIP 1)
309   (UNBIND1)
310   (CONST&PUSH 25)                     ; $YARRAY
311   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
313   (GETVALUE&PUSH 15)                  ; N
315   (CALLSR 1 1)                        ; AREF
318   (SKIP 2)
320   L320
320   (SKIP 1)
322   (UNBIND 2)
324   (SKIP&RET 6)
326   L326
326   (LOAD&PUSH 1)
327   (CONST&PUSH 14)                     ; 1.0
328   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
330   (PUSH-UNBOUND 1)
332   (CALLS2 179)                        ; FLOOR
334   (NV-TO-STACK 2)
336   (LOAD 1)
337   (BIND 15)                           ; N
339   (LOAD 3)
340   (BIND 16)                           ; ALPHA
342   (GETVALUE&PUSH 15)                  ; N
344   (CALLS2&PUSH 150)                   ; 1+
346   (PUSH-UNBOUND 7)
348   (CONST 17)                          ; DOUBLE-FLOAT
349   (STORE 5)
350   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
352   (GETVALUE&PUSH 15)                  ; N
354   (CALLS2&PUSH 150)                   ; 1+
356   (PUSH-UNBOUND 7)
358   (CONST 17)                          ; DOUBLE-FLOAT
359   (STORE 5)
360   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
362   (GETVALUE&PUSH 15)                  ; N
364   (CALLS2&PUSH 150)                   ; 1+
366   (PUSH-UNBOUND 7)
368   (CONST 17)                          ; DOUBLE-FLOAT
369   (STORE 5)
370   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
372   (GETVALUE&PUSH 15)                  ; N
374   (CALLS2&PUSH 150)                   ; 1+
376   (PUSH-UNBOUND 7)
378   (CONST 17)                          ; DOUBLE-FLOAT
379   (STORE 5)
380   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
382   (LOAD&PUSH 14)
383   (CALLS2&PUSH 197)                   ; REALPART
385   (CONST&PUSH 14)                     ; 1.0
386   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
388   (LOAD&PUSH 15)
389   (CALLS2&PUSH 198)                   ; IMAGPART
391   (CONST&PUSH 14)                     ; 1.0
392   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
394   (GETVALUE&PUSH 16)                  ; ALPHA
396   (CONST&PUSH 8)                      ; 1
397   (GETVALUE&PUSH 15)                  ; N
399   (CALLS2&PUSH 150)                   ; 1+
401   (LOAD&PUSH 8)
402   (LOAD&PUSH 8)
403   (CONST&PUSH 0)                      ; 0
404   (LOAD&PUSH 9)
405   (LOAD&PUSH 9)
406   (CONST&PUSH 0)                      ; 0
407   (CALL 11 29)                        ; SLATEC:ZBESY
410   (NV-TO-STACK 11)
412   (LOAD&PUSH 0)
413   (CALLS2&JMPIFNOT 146 L424)          ; PLUSP
416   (CONST&PUSH 30)                     ; #<COMPILED-CLOSURE BESSEL-Y-1>
418   (GETVALUE&PUSH 31)                  ; *STANDARD-OUTPUT*
420   (LOAD&PUSH 2)
421   (CALLSR 2 21)                       ; FUNCALL
424   L424
424   (CONST&PUSH 19)                     ; $BESSELARRAY
425   (GETVALUE&PUSH 15)                  ; N
427   (CALLS2&PUSH 150)                   ; 1+
429   (CALLS2&PUSH 150)                   ; 1+
431   (PUSH-UNBOUND 7)
433   (CALLS1&PUSH 29)                    ; MAKE-ARRAY
435   (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
437   (CONST 0)                           ; 0
438   (BIND 26)                           ; K
440   (GETVALUE&PUSH 15)                  ; N
442   (CALLS2&PUSH 150)                   ; 1+
444   (JMP L490)
446   L446
446   (CONST&PUSH 19)                     ; $BESSELARRAY
447   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
449   (GETVALUE&PUSH 26)                  ; K
451   (CONST&PUSH 32)                     ; (MPLUS)
453   (CONST&PUSH 33)                     ; (MTIMES)
455   (CONST&PUSH 4)                      ; $%I
456   (LOAD&PUSH 22)
457   (GETVALUE&PUSH 26)                  ; K
459   (CALLSR&PUSH 1 1)                   ; AREF
462   (LIST&PUSH 3)
464   (CALL1&PUSH 7)                      ; SIMPLIFY
466   (LOAD&PUSH 22)
467   (GETVALUE&PUSH 26)                  ; K
469   (CALLSR&PUSH 1 1)                   ; AREF
472   (LIST&PUSH 3)
474   (CALL1&PUSH 7)                      ; SIMPLIFY
476   (LOAD&PUSH 2)
477   (LOAD&PUSH 2)
478   (LOAD&PUSH 2)
479   (CALLSR 1 2)                        ; SYSTEM::STORE
482   (SKIP 3)
484   (GETVALUE&PUSH 26)                  ; K
486   (CALLS2 150)                        ; 1+
488   (SETVALUE 26)                       ; K
490   L490
490   (GETVALUE&PUSH 26)                  ; K
492   (LOAD&PUSH 1)
493   (CALLSR&JMPIFNOT 1 50 L446)         ; >=
497   (CONST&PUSH 19)                     ; $BESSELARRAY
498   (CALLS1&PUSH 78)                    ; SYMBOL-VALUE
500   (GETVALUE&PUSH 15)                  ; N
502   (CALLSR 1 1)                        ; AREF
505   (SKIP 1)
507   (UNBIND1)
508   (SKIP 15)
510   (UNBIND 2)
512   (SKIP&RET 5)


Disassembly of function BESSEL-Y-1
(CONST 0) = "zbesy ierr = "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; "zbesy ierr = "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (LOAD&PUSH 3)
11    (CALLS1 139)                        ; TERPRI
13    (LOAD 1)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFUN $BESSEL_Y (ARG ORDER) ...)-29|
(CONST 0) = $BESSEL_Y
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BESSEL_Y>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_Y
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BESSEL_Y
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BESSEL_Y>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BESSEL_Y
8     (SKIP&RET 1)


Disassembly of function $BESSEL_Y
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = BESSEL-Y
(CONST 3) = $BESSEL_Y
(CONST 4) = SUBFUNMAKES
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
4     (LOAD&PUSH 2)
5     (CALL1&PUSH 0)                      ; $REALPART
7     (CALLS2&JMPIFNOT 8 L16)             ; NUMBERP
10    (LOAD&PUSH 2)
11    (CALL1&PUSH 1)                      ; $IMAGPART
13    (CALLS2&JMPIF 8 L28)                ; NUMBERP
16    L16
16    (CONST&PUSH 3)                      ; $BESSEL_Y
17    (LOAD&PUSH 2)
18    (NIL)
19    (CONS&PUSH)
20    (LOAD&PUSH 4)
21    (NIL)
22    (CONS&PUSH)
23    (CALL 3 4)                          ; SUBFUNMAKES
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 2)
29    (CALL1&PUSH 0)                      ; $REALPART
31    (LOAD&PUSH 3)
32    (CALL1&PUSH 1)                      ; $IMAGPART
34    (CALLS2&PUSH 196)                   ; COMPLEX
36    (LOAD&PUSH 2)
37    (CALL2 2)                           ; BESSEL-Y
39    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (FLONUM RZ Y ...))-30|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $AIRY ($ARG) ...)-31|
(CONST 0) = $AIRY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $AIRY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $AIRY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $AIRY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $AIRY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $AIRY
8     (SKIP&RET 1)


Disassembly of function $AIRY
(CONST 0) = 1.0
(CONST 1) = SLATEC:DAI
(CONST 2) = ($AIRY SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
12 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&JMPIF 8 L10)                ; NUMBERP
4     (CONST&PUSH 2)                      ; ($AIRY SIMP)
5     (LOAD&PUSH 2)
6     (LIST 2)
8     (SKIP&RET 2)
10    L10
10    (LOAD&PUSH 1)
11    (CONST&PUSH 0)                      ; 1.0
12    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
14    (CALL1 1)                           ; SLATEC:DAI
16    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (FLONUM IM RE ...) (FIXNUM NP1 N ...) ...)-32|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN Z-FUNCTION (X Y) ...)-33|
(CONST 0) = Z-FUNCTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE Z-FUNCTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; Z-FUNCTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; Z-FUNCTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE Z-FUNCTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; Z-FUNCTION
8     (SKIP&RET 1)


Disassembly of function Z-FUNCTION
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 0.0
(CONST 3) = -1.0
(CONST 4) = 1.0
(CONST 5) = 0
(CONST 6) = 4.29
(CONST 7) = 5.33
(CONST 8) = -0.23310023
(CONST 9) = -0.035198873
(CONST 10) = 1.6
(CONST 11) = 2.0
(CONST 12) = 6
(CONST 13) = 23.0
(CONST 14) = FIX
(CONST 15) = 9
(CONST 16) = 21.0
(CONST 17) = 8
(CONST 18) = N
(CONST 19) = 0.5
(CONST 20) = QUOT
(CONST 21) = 1.77245384
(CONST 22) = EXP
(CONST 23) = -2.0
(CONST 24) = 3.5449077
(CONST 25) = (MLIST SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N Y X)
writes special variables : (N Y X)
269 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST&PUSH 2)                      ; 0.0
7     (GETVALUE&PUSH 0)                   ; X
9     (CALLSR&JMPIF 1 48 L130)            ; >
14    (CONST 4)                           ; 1.0
15    L15
15    (PUSH)
16    (CONST&PUSH 2)                      ; 0.0
17    (GETVALUE&PUSH 0)                   ; X
19    (CALLSR&JMPIF 1 48 L134)            ; >
24    (CONST 4)                           ; 1.0
25    L25
25    (PUSH)
26    (CONST&PUSH 5)                      ; 0
27    (CONST&PUSH 5)                      ; 0
28    (CONST&PUSH 5)                      ; 0
29    (CONST&PUSH 2)                      ; 0.0
30    (CONST&PUSH 2)                      ; 0.0
31    (CONST&PUSH 2)                      ; 0.0
32    (CONST&PUSH 2)                      ; 0.0
33    (CONST&PUSH 2)                      ; 0.0
34    (CONST&PUSH 2)                      ; 0.0
35    (CONST&PUSH 2)                      ; 0.0
36    (CONST&PUSH 2)                      ; 0.0
37    (CONST&PUSH 2)                      ; 0.0
38    (CONST&PUSH 2)                      ; 0.0
39    (CONST&PUSH 2)                      ; 0.0
40    (NIL&PUSH)
41    (CONST&PUSH 2)                      ; 0.0
42    (CONST&PUSH 2)                      ; 0.0
43    (CONST&PUSH 2)                      ; 0.0
44    (GETVALUE&PUSH 0)                   ; X
46    (CALLSR&JMPIF 1 48 L138)            ; >
51    (CONST 4)                           ; 1.0
52    L52
52    (STORE 18)
54    (CONST&PUSH 2)                      ; 0.0
55    (GETVALUE&PUSH 1)                   ; Y
57    (CALLSR&JMPIF 1 48 L142)            ; >
62    (CONST 4)                           ; 1.0
63    L63
63    (STORE 17)
65    (GETVALUE&PUSH 0)                   ; X
67    (CALLS2 158)                        ; ABS
69    (SETVALUE 0)                        ; X
71    (GETVALUE&PUSH 1)                   ; Y
73    (CALLS2 158)                        ; ABS
75    (SETVALUE 1)                        ; Y
77    (CONST&PUSH 6)                      ; 4.29
78    (GETVALUE&PUSH 1)                   ; Y
80    (CALLSR&JMPIFNOT 1 48 L91)          ; >
84    (CONST&PUSH 7)                      ; 5.33
85    (GETVALUE&PUSH 0)                   ; X
87    (CALLSR&JMPIF 1 48 L146)            ; >
91    L91
91    (CONST 2)                           ; 0.0
92    (STORE 13)
94    (CONST 5)                           ; 0
95    (STORE 16)
97    (CONST 17)                          ; 8
98    (STORE 15)
100   L100
100   (LOAD&PUSH 13)
101   (CONST&PUSH 2)                      ; 0.0
102   (CALLSR&JMPIFNOT 1 48 L111)         ; >
106   (LOAD&PUSH 12)
107   (LOAD&PUSH 17)
108   (CALLS2&STORE 154 11)               ; EXPT
111   L111
111   (LOAD&PUSH 13)
112   (CONST&PUSH 2)                      ; 0.0
113   (CALLSR&JMPIF 1 45 L122)            ; =
117   (LOAD&PUSH 11)
118   (CONST&PUSH 2)                      ; 0.0
119   (CALLSR 1 45)                       ; =
122   L122
122   (STORE 2)
123   (LOAD 15)
125   (BIND 18)                           ; N
127   (JMP L364)
130   L130
130   (CONST 3)                           ; -1.0
131   (JMP L15)
134   L134
134   (CONST 3)                           ; -1.0
135   (JMP L25)
138   L138
138   (CONST 3)                           ; -1.0
139   (JMP L52)
142   L142
142   (CONST 3)                           ; -1.0
143   (JMP L63)
146   L146
146   (CONST&PUSH 8)                      ; -0.23310023
147   (GETVALUE&PUSH 1)                   ; Y
149   (CALLSR&PUSH 2 55)                  ; *
152   (CALLS2&PUSH 150)                   ; 1+
154   (CONST&PUSH 9)                      ; -0.035198873
155   (GETVALUE&PUSH 0)                   ; X
157   (GETVALUE&PUSH 0)                   ; X
159   (CALLSR&PUSH 3 55)                  ; *
162   (CALLS2&PUSH 150)                   ; 1+
164   (CALLS2&PUSH 156)                   ; SQRT
166   (CALLSR&STORE 2 55 8)               ; *
170   (CONST&PUSH 10)                     ; 1.6
171   (LOAD&PUSH 9)
172   (CALLSR&STORE 2 55 13)              ; *
176   (CONST&PUSH 11)                     ; 2.0
177   (LOAD&PUSH 14)
178   (CALLSR&STORE 2 55 12)              ; *
182   (CONST&PUSH 12)                     ; 6
183   (CONST&PUSH 13)                     ; 23.0
184   (LOAD&PUSH 10)
185   (CALLSR&PUSH 2 55)                  ; *
188   (CALL1&PUSH 14)                     ; FIX
190   (CALLSR&STORE 2 53 16)              ; +
194   (CONST&PUSH 15)                     ; 9
195   (CONST&PUSH 16)                     ; 21.0
196   (LOAD&PUSH 10)
197   (CALLSR&PUSH 2 55)                  ; *
200   (CALL1&PUSH 14)                     ; FIX
202   (CALLSR&STORE 2 53 15)              ; +
206   (JMP L100)
209   L209
209   (CONST&PUSH 21)                     ; 1.77245384
210   (GETVALUE&PUSH 0)                   ; X
212   (GETVALUE&PUSH 0)                   ; X
214   (CALLSR&PUSH 2 55)                  ; *
217   (CALLSR&PUSH 0 54)                  ; -
220   (CALL1 22)                          ; EXP
222   (JMP L387)
225   L225
225   (LOAD 11)
226   (JMP L387)
229   L229
229   (LOAD 10)
230   (JMP L398)
233   L233
233   (LOAD&PUSH 1)
234   (LOAD&PUSH 19)
235   (CALLSR&STORE 2 55 1)               ; *
239   (JMP L471)
242   L242
242   (GETVALUE&PUSH 18)                  ; N
244   (CALLS2&STORE 150 17)               ; 1+
247   (LOAD&PUSH 16)
248   (LOAD&PUSH 18)
249   (CONST&PUSH 4)                      ; 1.0
250   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
252   (LOAD&PUSH 15)
253   (CALLSR&PUSH 2 55)                  ; *
256   (GETVALUE&PUSH 1)                   ; Y
258   (CALLSR&STORE 3 53 8)               ; +
262   (GETVALUE&PUSH 0)                   ; X
264   (LOAD&PUSH 18)
265   (CONST&PUSH 4)                      ; 1.0
266   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
268   (LOAD&PUSH 14)
269   (CALLSR&PUSH 2 55)                  ; *
272   (CALLSR&STORE 1 54 7)               ; -
276   (CONST&PUSH 19)                     ; 0.5
277   (LOAD&PUSH 9)
278   (LOAD&PUSH 10)
279   (CALLSR&PUSH 2 55)                  ; *
282   (LOAD&PUSH 9)
283   (LOAD&PUSH 10)
284   (CALLSR&PUSH 2 55)                  ; *
287   (CALLSR&PUSH 2 53)                  ; +
290   (CALL2 20)                          ; QUOT
292   (STORE 6)
293   (PUSH)
294   (LOAD&PUSH 9)
295   (CALLSR&STORE 2 55 13)              ; *
299   (LOAD&PUSH 6)
300   (LOAD&PUSH 8)
301   (CALLSR&STORE 2 55 12)              ; *
305   (LOAD&PUSH 16)
306   (CONST&PUSH 2)                      ; 0.0
307   (CALLSR&JMPIFNOT 1 48 L358)         ; >
311   (LOAD&PUSH 19)
312   (GETVALUE&PUSH 18)                  ; N
314   (CALLSR&JMPIF 1 47 L358)            ; <
318   (LOAD&PUSH 10)
319   (LOAD&PUSH 15)
320   (CALLSR&STORE 2 53 8)               ; +
324   (LOAD&PUSH 13)
325   (LOAD&PUSH 9)
326   (CALLSR&PUSH 2 55)                  ; *
329   (LOAD&PUSH 13)
330   (LOAD&PUSH 11)
331   (CALLSR&PUSH 2 55)                  ; *
334   (CALLSR&STORE 1 54 10)              ; -
338   (LOAD&PUSH 13)
339   (LOAD&PUSH 10)
340   (CALLSR&PUSH 2 55)                  ; *
343   (LOAD&PUSH 13)
344   (LOAD&PUSH 10)
345   (CALLSR&PUSH 2 55)                  ; *
348   (CALLSR&STORE 2 53 9)               ; +
352   (LOAD&PUSH 14)
353   (LOAD&PUSH 16)
354   (CALL2 20)                          ; QUOT
356   (STORE 14)
358   L358
358   (GETVALUE&PUSH 18)                  ; N
360   (CALLS2 151)                        ; 1-
362   (SETVALUE 18)                       ; N
364   L364
364   (CONST&PUSH 5)                      ; 0
365   (GETVALUE&PUSH 18)                  ; N
367   (CALLSR&JMPIFNOT 1 48 L242)         ; >
372   (UNBIND1)
373   (GETVALUE&PUSH 1)                   ; Y
375   (CONST&PUSH 2)                      ; 0.0
376   (CALLSR&JMPIF 1 45 L209)            ; =
381   (CONST&PUSH 11)                     ; 2.0
382   (LOAD&JMPIF 3 L225)
386   (LOAD 8)
387   L387
387   (PUSH)
388   (CALLSR&STORE 2 55 0)               ; *
392   (CONST&PUSH 23)                     ; -2.0
393   (LOAD&JMPIF 3 L229)
397   (LOAD 7)
398   L398
398   (PUSH)
399   (CALLSR&STORE 2 55 1)               ; *
403   (LOAD&PUSH 17)
404   (CONST&PUSH 2)                      ; 0.0
405   (CALLSR&JMPIF 1 48 L233)            ; >
410   (CONST&PUSH 24)                     ; 3.5449077
411   (GETVALUE&PUSH 1)                   ; Y
413   (GETVALUE&PUSH 1)                   ; Y
415   (CALLSR&PUSH 2 55)                  ; *
418   (GETVALUE&PUSH 0)                   ; X
420   (GETVALUE&PUSH 0)                   ; X
422   (CALLSR&PUSH 2 55)                  ; *
425   (CALLSR&PUSH 1 54)                  ; -
428   (CALL1&PUSH 22)                     ; EXP
430   (CALLSR&STORE 2 55 10)              ; *
434   (CONST&PUSH 11)                     ; 2.0
435   (GETVALUE&PUSH 0)                   ; X
437   (GETVALUE&PUSH 1)                   ; Y
439   (CALLSR&STORE 3 55 9)               ; *
443   (LOAD&PUSH 1)
444   (LOAD&PUSH 11)
445   (LOAD&PUSH 11)
446   (CALLS2&PUSH 161)                   ; SIN
448   (CALLSR&PUSH 2 55)                  ; *
451   (CALLSR&PUSH 1 54)                  ; -
454   (LOAD&PUSH 19)
455   (CALLSR&STORE 2 55 1)               ; *
459   (LOAD&PUSH 10)
460   (LOAD&PUSH 10)
461   (CALLS2&PUSH 162)                   ; COS
463   (CALLSR&PUSH 2 55)                  ; *
466   (LOAD&PUSH 1)
467   (CALLSR&STORE 1 54 0)               ; -
471   L471
471   (CONST&PUSH 25)                     ; (MLIST SIMP)
472   (LOAD&PUSH 2)
473   (LOAD&PUSH 2)
474   (LIST 3)
476   (SKIP 19)
478   (UNBIND 2)
480   (SKIP&RET 3)


Disassembly of function #:|(DEFUN $NZETA ($Z) ...)-34|
(CONST 0) = $NZETA
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NZETA>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NZETA
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NZETA
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NZETA>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NZETA
8     (SKIP&RET 1)


Disassembly of function $NZETA
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = 1.0
(CONST 3) = Z-FUNCTION
(CONST 4) = (MPLUS)
(CONST 5) = (MTIMES)
(CONST 6) = $%I
(CONST 7) = MEVAL1
(CONST 8) = SIMPLIFY
(CONST 9) = ($NZETA SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
41 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD&PUSH 4)
3     (CALL1 0)                           ; $REALPART
5     (STORE 2)
6     (PUSH)
7     (CALLS2&JMPIFNOT 8 L18)             ; NUMBERP
10    (LOAD&PUSH 4)
11    (CALL1 1)                           ; $IMAGPART
13    (STORE 1)
14    (PUSH)
15    (CALLS2&JMPIF 8 L24)                ; NUMBERP
18    L18
18    (CONST&PUSH 9)                      ; ($NZETA SIMP)
19    (LOAD&PUSH 5)
20    (LIST 2)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 2)
25    (CONST&PUSH 2)                      ; 1.0
26    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
28    (LOAD&PUSH 2)
29    (CONST&PUSH 2)                      ; 1.0
30    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
32    (CALL2 3)                           ; Z-FUNCTION
34    (STORE 0)
35    (CONST&PUSH 4)                      ; (MPLUS)
36    (CONST&PUSH 5)                      ; (MTIMES)
37    (CONST&PUSH 6)                      ; $%I
38    (CALL1&PUSH 7)                      ; MEVAL1
40    (LOAD 3)
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (LIST&PUSH 3)
46    (CALL1&PUSH 8)                      ; SIMPLIFY
48    (LOAD 2)
49    (CDR)
50    (CAR&PUSH)
51    (LIST&PUSH 3)
53    (CALL1 8)                           ; SIMPLIFY
55    (SKIP&RET 5)


Disassembly of function #:|(DEFUN $NZETAR ($Z) ...)-35|
(CONST 0) = $NZETAR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NZETAR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NZETAR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NZETAR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NZETAR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NZETAR
8     (SKIP&RET 1)


Disassembly of function $NZETAR
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = 1.0
(CONST 3) = Z-FUNCTION
(CONST 4) = ($NZETAR SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD&PUSH 4)
3     (CALL1 0)                           ; $REALPART
5     (STORE 2)
6     (PUSH)
7     (CALLS2&JMPIFNOT 8 L18)             ; NUMBERP
10    (LOAD&PUSH 4)
11    (CALL1 1)                           ; $IMAGPART
13    (STORE 1)
14    (PUSH)
15    (CALLS2&JMPIF 8 L24)                ; NUMBERP
18    L18
18    (CONST&PUSH 4)                      ; ($NZETAR SIMP)
19    (LOAD&PUSH 5)
20    (LIST 2)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 2)
25    (CONST&PUSH 2)                      ; 1.0
26    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
28    (LOAD&PUSH 2)
29    (CONST&PUSH 2)                      ; 1.0
30    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
32    (CALL2 3)                           ; Z-FUNCTION
34    (STORE 0)
35    (CDR)
36    (CAR)
37    (SKIP&RET 5)


Disassembly of function #:|(DEFUN $NZETAI ($Z) ...)-36|
(CONST 0) = $NZETAI
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NZETAI>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NZETAI
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NZETAI
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NZETAI>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NZETAI
8     (SKIP&RET 1)


Disassembly of function $NZETAI
(CONST 0) = $REALPART
(CONST 1) = $IMAGPART
(CONST 2) = 1.0
(CONST 3) = Z-FUNCTION
(CONST 4) = ($NZETAI SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
29 byte-code instructions:
0     (PUSH-NIL 3)
2     (LOAD&PUSH 4)
3     (CALL1 0)                           ; $REALPART
5     (STORE 2)
6     (PUSH)
7     (CALLS2&JMPIFNOT 8 L18)             ; NUMBERP
10    (LOAD&PUSH 4)
11    (CALL1 1)                           ; $IMAGPART
13    (STORE 1)
14    (PUSH)
15    (CALLS2&JMPIF 8 L24)                ; NUMBERP
18    L18
18    (CONST&PUSH 4)                      ; ($NZETAI SIMP)
19    (LOAD&PUSH 5)
20    (LIST 2)
22    (SKIP&RET 5)
24    L24
24    (LOAD&PUSH 2)
25    (CONST&PUSH 2)                      ; 1.0
26    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
28    (LOAD&PUSH 2)
29    (CONST&PUSH 2)                      ; 1.0
30    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
32    (CALL2 3)                           ; Z-FUNCTION
34    (STORE 0)
35    (CDR)
36    (CDR)
37    (CAR)
38    (SKIP&RET 5)


Disassembly of function #:|(DEFUN ZIGGURAT-INIT (N R V ...) ...)-37|
(CONST 0) = ZIGGURAT-INIT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZIGGURAT-INIT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZIGGURAT-INIT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZIGGURAT-INIT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZIGGURAT-INIT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ZIGGURAT-INIT
8     (SKIP&RET 1)


Disassembly of function ZIGGURAT-INIT
(CONST 0) = N
(CONST 1) = V
(CONST 2) = F
(CONST 3) = DOUBLE-FLOAT
(CONST 4) = (UNSIGNED-BYTE 32)
(CONST 5) = X
(CONST 6) = K
(CONST 7) = 1
(CONST 8) = 0
(CONST 9) = 0.0
(CONST 10) = 0.5
6 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (F V K X N)
writes special variable : (K)
193 byte-code instructions:
0     (LOAD 6)
1     (BIND 0)                            ; N
3     (LOAD 7)
4     (BIND 1)                            ; V
6     (LOAD 8)
7     (BIND 2)                            ; F
9     (GETVALUE&PUSH 0)                   ; N
11    (CALLS2&PUSH 150)                   ; 1+
13    (PUSH-UNBOUND 7)
15    (CONST 3)                           ; DOUBLE-FLOAT
16    (STORE 5)
17    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
19    (GETVALUE&PUSH 0)                   ; N
21    (CALLS2&PUSH 150)                   ; 1+
23    (PUSH-UNBOUND 7)
25    (CONST 3)                           ; DOUBLE-FLOAT
26    (STORE 5)
27    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
29    (GETVALUE&PUSH 0)                   ; N
31    (CALLS2&PUSH 150)                   ; 1+
33    (PUSH-UNBOUND 7)
35    (CONST 4)                           ; (UNSIGNED-BYTE 32)
36    (STORE 5)
37    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
39    (GETVALUE&PUSH 0)                   ; N
41    (CALLS2&PUSH 150)                   ; 1+
43    (PUSH-UNBOUND 7)
45    (CONST 3)                           ; DOUBLE-FLOAT
46    (STORE 5)
47    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
49    (LOAD 3)
50    (BIND 5)                            ; X
52    (GETVALUE&PUSH 5)                   ; X
54    (GETVALUE&PUSH 0)                   ; N
56    (LOAD&PUSH 1)
57    (LOAD&PUSH 1)
58    (LOAD&PUSH 25)
60    (CALLSR 1 2)                        ; SYSTEM::STORE
63    (SKIP 2)
65    (GETVALUE&PUSH 0)                   ; N
67    (CALLS2 151)                        ; 1-
69    (BIND 6)                            ; K
71    (JMP L139)
74    L74
74    (GETVALUE&PUSH 5)                   ; X
76    (GETVALUE&PUSH 6)                   ; K
78    (CALLS2&PUSH 150)                   ; 1+
80    (CALLSR&PUSH 1 1)                   ; AREF
83    (GETVALUE&PUSH 5)                   ; X
85    (GETVALUE&PUSH 6)                   ; K
87    (LOAD&PUSH 23)
88    (GETVALUE&PUSH 1)                   ; V
90    (LOAD&PUSH 4)
91    (CALLSR&PUSH 1 56)                  ; /
94    (GETVALUE&PUSH 2)                   ; F
96    (LOAD&PUSH 5)
97    (FUNCALL&PUSH 1)
99    (CALLSR&PUSH 2 53)                  ; +
102   (FUNCALL&PUSH 1)
104   (LOAD&PUSH 2)
105   (LOAD&PUSH 2)
106   (LOAD&PUSH 2)
107   (CALLSR 1 2)                        ; SYSTEM::STORE
110   (SKIP 3)
112   (GETVALUE&PUSH 6)                   ; K
114   (GETVALUE&PUSH 2)                   ; F
116   (GETVALUE&PUSH 5)                   ; X
118   (GETVALUE&PUSH 6)                   ; K
120   (CALLSR&PUSH 1 1)                   ; AREF
123   (FUNCALL&PUSH 1)
125   (LOAD&PUSH 11)
126   (LOAD&PUSH 2)
127   (LOAD&PUSH 2)
128   (CALLSR 1 2)                        ; SYSTEM::STORE
131   (SKIP 3)
133   (GETVALUE&PUSH 6)                   ; K
135   (CALLS2 151)                        ; 1-
137   (SETVALUE 6)                        ; K
139   L139
139   (GETVALUE&PUSH 6)                   ; K
141   (CONST&PUSH 7)                      ; 1
142   (CALLSR&JMPIFNOT 1 47 L74)          ; <
147   (UNBIND1)
148   (GETVALUE&PUSH 5)                   ; X
150   (LOAD&PUSH 0)
151   (CONST&PUSH 8)                      ; 0
152   (CONST&PUSH 9)                      ; 0.0
153   (CALLSR 1 2)                        ; SYSTEM::STORE
156   (SKIP 1)
158   (GETVALUE&PUSH 2)                   ; F
160   (GETVALUE&PUSH 5)                   ; X
162   (CONST&PUSH 8)                      ; 0
163   (CALLSR&PUSH 1 1)                   ; AREF
166   (FUNCALL&PUSH 1)
168   (LOAD&PUSH 6)
169   (CONST&PUSH 8)                      ; 0
170   (LOAD&PUSH 2)
171   (CALLSR 1 2)                        ; SYSTEM::STORE
174   (SKIP 1)
176   (GETVALUE&PUSH 0)                   ; N
178   (GETVALUE&PUSH 2)                   ; F
180   (GETVALUE&PUSH 5)                   ; X
182   (GETVALUE&PUSH 0)                   ; N
184   (CALLSR&PUSH 1 1)                   ; AREF
187   (FUNCALL&PUSH 1)
189   (LOAD&PUSH 7)
190   (LOAD&PUSH 2)
191   (LOAD&PUSH 2)
192   (CALLSR 1 2)                        ; SYSTEM::STORE
195   (SKIP 2)
197   (CONST 7)                           ; 1
198   (BIND 6)                            ; K
200   (GETVALUE&PUSH 0)                   ; N
202   (JMP L273)
205   L205
205   (GETVALUE&PUSH 6)                   ; K
207   (GETVALUE&PUSH 5)                   ; X
209   (GETVALUE&PUSH 6)                   ; K
211   (CALLS2&PUSH 151)                   ; 1-
213   (CALLSR&PUSH 1 1)                   ; AREF
216   (GETVALUE&PUSH 5)                   ; X
218   (GETVALUE&PUSH 6)                   ; K
220   (CALLSR&PUSH 1 1)                   ; AREF
223   (CALLSR&PUSH 1 56)                  ; /
226   (LOAD&PUSH 25)
228   (CALLS2&PUSH 190)                   ; SCALE-FLOAT
230   (PUSH-UNBOUND 1)
232   (CALLS2&PUSH 179)                   ; FLOOR
234   (LOAD&PUSH 10)
235   (LOAD&PUSH 2)
236   (LOAD&PUSH 2)
237   (CALLSR 1 2)                        ; SYSTEM::STORE
240   (SKIP 2)
242   (GETVALUE&PUSH 6)                   ; K
244   (GETVALUE&PUSH 5)                   ; X
246   (GETVALUE&PUSH 6)                   ; K
248   (CALLSR&PUSH 1 1)                   ; AREF
251   (CONST&PUSH 10)                     ; 0.5
252   (LOAD&PUSH 26)
254   (CALLS2&PUSH 154)                   ; EXPT
256   (CALLSR&PUSH 2 55)                  ; *
259   (LOAD&PUSH 9)
260   (LOAD&PUSH 2)
261   (LOAD&PUSH 2)
262   (CALLSR 1 2)                        ; SYSTEM::STORE
265   (SKIP 2)
267   (GETVALUE&PUSH 6)                   ; K
269   (CALLS2 150)                        ; 1+
271   (SETVALUE 6)                        ; K
273   L273
273   (GETVALUE&PUSH 6)                   ; K
275   (LOAD&PUSH 1)
276   (CALLSR&JMPIFNOT 1 48 L205)         ; >
281   (SKIP 1)
283   (UNBIND1)
284   (LOAD&PUSH 21)
285   (GETVALUE&PUSH 2)                   ; F
287   (LOAD&PUSH 23)
288   (FUNCALL&PUSH 1)
290   (CALLSR&PUSH 2 55)                  ; *
293   (GETVALUE&PUSH 1)                   ; V
295   (CALLSR&PUSH 1 56)                  ; /
298   (LOAD&PUSH 20)
299   (CALLS2&PUSH 190)                   ; SCALE-FLOAT
301   (PUSH-UNBOUND 1)
303   (CALLS2&PUSH 179)                   ; FLOOR
305   (LOAD&PUSH 5)
306   (CONST&PUSH 8)                      ; 0
307   (LOAD&PUSH 2)
308   (CALLSR 1 2)                        ; SYSTEM::STORE
311   (SKIP 1)
313   (GETVALUE&PUSH 1)                   ; V
315   (GETVALUE&PUSH 2)                   ; F
317   (LOAD&PUSH 23)
318   (FUNCALL&PUSH 1)
320   (CALLSR&PUSH 1 56)                  ; /
323   (CONST&PUSH 10)                     ; 0.5
324   (LOAD&PUSH 21)
325   (CALLS2&PUSH 154)                   ; EXPT
327   (CALLSR&PUSH 2 55)                  ; *
330   (LOAD&PUSH 4)
331   (CONST&PUSH 8)                      ; 0
332   (LOAD&PUSH 2)
333   (CALLSR 1 2)                        ; SYSTEM::STORE
336   (SKIP 1)
338   (LOAD&PUSH 4)
339   (LOAD&PUSH 4)
340   (LOAD&PUSH 7)
341   (STACK-TO-MV 3)
343   (UNBIND1)
344   (SKIP 4)
346   (UNBIND 3)
348   (SKIP&RET 7)


Disassembly of function #:|(LET (#) (FLET # # ...))-38|
(CONST 0) = (INLINE DENSITY)
(CONST 1) = 127
(CONST 2) = 3.442619855899
(CONST 3) = 0.00991256303526217
(CONST 4) = 31
(CONST 5) = #<COMPILED-CLOSURE DENSITY>
(CONST 6) = #<COMPILED-CLOSURE #:|(LET (#) (FLET # # ...))-38-1|>
(CONST 7) = ZIGGURAT-INIT
(CONST 8) = GEN-GAUSSIAN-VARIATE-ZIGGURAT
(CONST 9) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 10) = #<COMPILED-CLOSURE GEN-GAUSSIAN-VARIATE-ZIGGURAT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     (CONST&PUSH 0)                      ; (INLINE DENSITY)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; 127
4     (CONST&PUSH 2)                      ; 3.442619855899
5     (CONST&PUSH 3)                      ; 0.00991256303526217
6     (CONST&PUSH 4)                      ; 31
7     (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE DENSITY>
8     (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE #:|(LET (#) (FLET # # ...))-38-1|>
9     (CALL 6 7)                          ; ZIGGURAT-INIT
12    (NV-TO-STACK 3)
14    (NIL)
15    (MAKE-VECTOR1&PUSH 3)
17    (LOAD&STOREC 3 0 0)
21    (LOAD&STOREC 2 0 1)
25    (LOAD&STOREC 1 0 2)
29    (CONST&PUSH 8)                      ; GEN-GAUSSIAN-VARIATE-ZIGGURAT
30    (CALL1 9)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
32    (CONST&PUSH 8)                      ; GEN-GAUSSIAN-VARIATE-ZIGGURAT
33    (LOAD&PUSH 1)
34    (COPY-CLOSURE&PUSH 10 1)            ; #<COMPILED-CLOSURE GEN-GAUSSIAN-VARIATE-ZIGGURAT>
37    (CALLS2 130)                        ; SYSTEM::%PUTD
39    (CONST 8)                           ; GEN-GAUSSIAN-VARIATE-ZIGGURAT
40    (SKIP&RET 5)


Disassembly of function DENSITY
(CONST 0) = X
(CONST 1) = -0.5
(CONST 2) = EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; -0.5
4     (GETVALUE&PUSH 0)                   ; X
6     (GETVALUE&PUSH 0)                   ; X
8     (CALLSR&PUSH 3 55)                  ; *
11    (CALL1 2)                           ; EXP
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(LET (#) (FLET # # ...))-38-1|
(CONST 0) = X
(CONST 1) = -2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; -2
4     (GETVALUE&PUSH 0)                   ; X
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 155)                   ; LOG
10    (CALLSR&PUSH 2 55)                  ; *
13    (CALLS2 156)                        ; SQRT
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function GEN-GAUSSIAN-VARIATE-ZIGGURAT
(CONST 0) = NIL
(CONST 1) = 4294967296
(CONST 2) = #S(BYTE :SIZE 1 :POSITION 31)
(CONST 3) = SIGN
(CONST 4) = #S(BYTE :SIZE 31 :POSITION 0)
(CONST 5) = #S(BYTE :SIZE 31 :POSITION 0)
(CONST 6) = 127
(CONST 7) = X
(CONST 8) = 1.0
(CONST 9) = 3.442619855899
(CONST 10) = Y
(CONST 11) = #<COMPILED-CLOSURE DENSITY>
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X SIGN)
116 byte-code instructions:
0     L0
0     (CONST&PUSH 1)                      ; 4294967296
1     (LOAD&PUSH 2)
2     (CALLS2&PUSH 220)                   ; RANDOM
4     (CONST&PUSH 2)                      ; #S(BYTE :SIZE 1 :POSITION 31)
5     (LOAD&PUSH 1)
6     (CALLS2 215)                        ; LDB
8     (BIND 3)                            ; SIGN
10    (GETVALUE&PUSH 3)                   ; SIGN
12    (CALLS2&JMPIF 146 L111)             ; PLUSP
16    (CONST&PUSH 5)                      ; #S(BYTE :SIZE 31 :POSITION 0)
17    (LOAD&PUSH 4)
18    (CALLS2 215)                        ; LDB
20    L20
20    (PUSH)
21    (LOAD&PUSH 0)
22    (CONST&PUSH 6)                      ; 127
23    (CALLSR&PUSH 2 61)                  ; LOGAND
26    (LOAD&PUSH 1)
27    (LOADV&PUSH 0 2)
30    (LOAD&PUSH 2)
31    (CALLSR&PUSH 1 1)                   ; AREF
34    (CALLSR 2 55)                       ; *
37    (BIND 7)                            ; X
39    (LOAD&PUSH 4)
40    (CALLS2&PUSH 158)                   ; ABS
42    (LOADV&PUSH 0 1)
45    (LOAD&PUSH 5)
46    (CALLSR&PUSH 1 1)                   ; AREF
49    (CALLSR&JMPIF 1 47 L121)            ; <
54    (LOAD&PUSH 3)
55    (CALLS2&JMPIF 145 L152)             ; ZEROP
59    (CONST&PUSH 8)                      ; 1.0
60    (LOAD&PUSH 11)
61    (CALLS2&PUSH 220)                   ; RANDOM
63    (LOADV&PUSH 0 3)
66    (LOAD&DEC&PUSH 5)
68    (CALLSR&PUSH 1 1)                   ; AREF
71    (LOADV&PUSH 0 3)
74    (LOAD&PUSH 6)
75    (CALLSR&PUSH 1 1)                   ; AREF
78    (CALLSR&PUSH 1 54)                  ; -
81    (CALLSR&PUSH 2 55)                  ; *
84    (GETVALUE&PUSH 7)                   ; X
86    (CONST 11)                          ; #<COMPILED-CLOSURE DENSITY>
87    (CALLC&PUSH)
88    (LOADV&PUSH 0 3)
91    (LOAD&PUSH 6)
92    (CALLSR&PUSH 1 1)                   ; AREF
95    (CALLSR&PUSH 1 54)                  ; -
98    (CALLSR&JMPIFNOT 1 47 L208)         ; <
103   (GETVALUE 7)                        ; X
105   L105
105   (UNBIND1)
106   (SKIP 2)
108   (UNBIND1)
109   (SKIP&RET 3)
111   L111
111   (CONST&PUSH 4)                      ; #S(BYTE :SIZE 31 :POSITION 0)
112   (LOAD&PUSH 4)
113   (CALLS2&PUSH 215)                   ; LDB
115   (CALLSR 0 54)                       ; -
118   (JMP L20)
121   L121
121   (GETVALUE 7)                        ; X
123   (JMP L105)
125   L125
125   (CONST&PUSH 9)                      ; 3.442619855899
126   (GETVALUE&PUSH 7)                   ; X
128   (CALLSR&PUSH 2 53)                  ; +
131   (CALLSR 0 54)                       ; -
134   (JMP L146)
136   L136
136   (LOAD&PUSH 11)
137   (CALLS2&JMPIF 146 L125)             ; PLUSP
140   (CONST&PUSH 9)                      ; 3.442619855899
141   (GETVALUE&PUSH 7)                   ; X
143   (CALLSR 2 53)                       ; +
146   L146
146   (UNBIND 2)
148   (SKIP 1)
150   (JMP L105)
152   L152
152   (CONST&PUSH 8)                      ; 1.0
153   (LOAD&PUSH 11)
154   (CALLS2&PUSH 220)                   ; RANDOM
156   (PUSH-UNBOUND 1)
158   (CALLS2&PUSH 155)                   ; LOG
160   (CALLSR&PUSH 0 54)                  ; -
163   (CONST&PUSH 9)                      ; 3.442619855899
164   (CALLSR&PUSH 1 56)                  ; /
167   (CONST&PUSH 8)                      ; 1.0
168   (LOAD&PUSH 12)
169   (CALLS2&PUSH 220)                   ; RANDOM
171   (PUSH-UNBOUND 1)
173   (CALLS2&PUSH 155)                   ; LOG
175   (CALLSR 0 54)                       ; -
178   (BIND 10)                           ; Y
180   (LOAD 3)
181   (BIND 7)                            ; X
183   (GETVALUE&PUSH 10)                  ; Y
185   (GETVALUE&PUSH 10)                  ; Y
187   (CALLSR&PUSH 2 53)                  ; +
190   (GETVALUE&PUSH 7)                   ; X
192   (GETVALUE&PUSH 7)                   ; X
194   (CALLSR&PUSH 2 55)                  ; *
197   (CALLSR&JMPIF 1 48 L136)            ; >
202   (UNBIND 2)
204   (SKIP 1)
206   (JMP L152)
208   L208
208   (UNBIND1)
209   (SKIP 2)
211   (UNBIND1)
212   (SKIP 1)
214   (JMP L0)


Disassembly of function #:|(DEFUN $GAUSS ($MEAN $SD) ...)-39|
(CONST 0) = $GAUSS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GAUSS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GAUSS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GAUSS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GAUSS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GAUSS
8     (SKIP&RET 1)


Disassembly of function $GAUSS
(CONST 0) = 1.0
(CONST 1) = *RANDOM-STATE*
(CONST 2) = GEN-GAUSSIAN-VARIATE-ZIGGURAT
(CONST 3) = ($GAUSS SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*RANDOM-STATE*)
22 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&JMPIFNOT 8 L8)              ; NUMBERP
4     (LOAD&PUSH 1)
5     (CALLS2&JMPIF 8 L15)                ; NUMBERP
8     L8
8     (CONST&PUSH 3)                      ; ($GAUSS SIMP)
9     (LOAD&PUSH 3)
10    (LOAD&PUSH 3)
11    (LIST 3)
13    (SKIP&RET 3)
15    L15
15    (LOAD&PUSH 2)
16    (CONST&PUSH 0)                      ; 1.0
17    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
19    (LOAD&PUSH 2)
20    (CONST&PUSH 0)                      ; 1.0
21    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
23    (GETVALUE&PUSH 1)                   ; *RANDOM-STATE*
25    (CALL1&PUSH 2)                      ; GEN-GAUSSIAN-VARIATE-ZIGGURAT
27    (CALLSR&PUSH 2 55)                  ; *
30    (CALLSR 2 53)                       ; +
33    (SKIP&RET 3)


Disassembly of function #:|(DECLARE-TOP (FLONUM X W ...))-40|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN $EXPINT (X) ...)-41|
(CONST 0) = $EXPINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXPINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXPINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXPINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXPINT
8     (SKIP&RET 1)


Disassembly of function $EXPINT
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = SLATEC:DE1
(CONST 3) = ($EXPINT SIMP)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
17 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIF 8 L16)                ; NUMBERP
8     (CONST&PUSH 3)                      ; ($EXPINT SIMP)
9     (GETVALUE&PUSH 0)                   ; X
11    (LIST 2)
13    L13
13    (UNBIND1)
14    (SKIP&RET 2)
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CONST&PUSH 1)                      ; 1.0
19    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
21    (CALL1 2)                           ; SLATEC:DE1
23    (VALUES1)
24    (JMP L13)


Disassembly of function #:|(DEFPROP $BESSEL_J BESSEL-J-SIMP ...)-42|
(CONST 0) = $BESSEL_J
(CONST 1) = SPECSIMP
(CONST 2) = BESSEL-J-SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_J
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; BESSEL-J-SIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $BESSEL_J (# # #) ...)-43|
(CONST 0) = $BESSEL_J
(CONST 1) = GRAD
(CONST 2) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($BESSEL_J ARRAY) N) X) N 1)
 ((MPLUS) ((MQAPPLY) (($BESSEL_J ARRAY) ((MPLUS) -1 N)) X)
  ((MTIMES) -1 N ((MQAPPLY) (($BESSEL_J ARRAY) N) X) ((MEXPT) X -1))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_J
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((N X) (# # N 1) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN MAX-NUMERIC-RATIO-P (E DEN) ...)-44|
(CONST 0) = MAX-NUMERIC-RATIO-P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAX-NUMERIC-RATIO-P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAX-NUMERIC-RATIO-P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAX-NUMERIC-RATIO-P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAX-NUMERIC-RATIO-P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAX-NUMERIC-RATIO-P
8     (SKIP&RET 1)


Disassembly of function MAX-NUMERIC-RATIO-P
(CONST 0) = RAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
32 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2 11)                         ; LISTP
3     (JMPIFNOT1 L41)
5     (LOAD 2)
6     (CAR)
7     (CAR&PUSH)
8     (CONST 0)                           ; RAT
9     (EQ)
10    (JMPIFNOT1 L41)
12    (LOAD&PUSH 1)
13    (LOAD 3)
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (CALLSR 1 45)                       ; =
20    (JMPIFNOT1 L41)
22    (LOAD 2)
23    (CDR)
24    (CAR&PUSH)
25    (CALLS2 12)                         ; INTEGERP
27    (JMPIFNOT1 L41)
29    (LOAD 2)
30    (CDR)
31    (CAR&PUSH)
32    (LOAD 3)
33    (CDR)
34    (CDR)
35    (CAR&PUSH)
36    (CALLSR 1 56)                       ; /
39    (SKIP&RET 3)
41    L41
41    (SKIP&RET 3)


Disassembly of function #:|(DEFUN DIFFZ (EXP ARG N) ...)-45|
(CONST 0) = DIFFZ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DIFFZ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DIFFZ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DIFFZ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DIFFZ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DIFFZ
8     (SKIP&RET 1)


Disassembly of function DIFFZ
(CONST 0) = EXP
(CONST 1) = N
(CONST 2) = SIMPLIFY
(CONST 3) = (MTIMES)
(CONST 4) = (MEXPT)
(CONST 5) = (-1)
(CONST 6) = $DIFF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (EXP N)
28 byte-code instructions:
0     L0
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; N
6     (GETVALUE&PUSH 1)                   ; N
8     (CALLS2&JMPIF 145 L37)              ; ZEROP
11    (CONST&PUSH 3)                      ; (MTIMES)
12    (CONST&PUSH 4)                      ; (MEXPT)
13    (LOAD&PUSH 10)
14    (CONST 5)                           ; (-1)
15    (LIST*&PUSH 2)
17    (GETVALUE&PUSH 0)                   ; EXP
19    (LOAD&PUSH 11)
20    (CALL2&PUSH 6)                      ; $DIFF
22    (CALL1&PUSH 2)                      ; SIMPLIFY
24    (LIST&PUSH 3)
26    (LOAD&PUSH 9)
27    (GETVALUE&PUSH 1)                   ; N
29    (CALLS2&PUSH 151)                   ; 1-
31    (JSR L0)
33    L33
33    (UNBIND 2)
35    (SKIP&RET 4)
37    L37
37    (GETVALUE&PUSH 0)                   ; EXP
39    (CALL1 2)                           ; SIMPLIFY
41    (JMP L33)


Disassembly of function #:|(DEFUN BESSEL-JY-HALF-ORDER (ARG ORDER POS-FUNCTION ...) ...)-46|
(CONST 0) = BESSEL-JY-HALF-ORDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-JY-HALF-ORDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-JY-HALF-ORDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-JY-HALF-ORDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-JY-HALF-ORDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-JY-HALF-ORDER
8     (SKIP&RET 1)


Disassembly of function BESSEL-JY-HALF-ORDER
(CONST 0) = N
(CONST 1) = VAR
(CONST 2) = (MTIMES SIMP)
(CONST 3) = (MEXPT SIMP)
(CONST 4) = (-1)
(CONST 5) = (SIMP)
(CONST 6) = DIFFZ
(CONST 7) = (MTIMES)
(CONST 8) = ((MEXPT) 2 ((RAT) 1 2))
(CONST 9) = ((MEXPT) $%PI ((RAT) -1 2))
(CONST 10) = (MEXPT)
(CONST 11) = -1
(CONST 12) = (MEXPT)
(CONST 13) = (MEXPT)
(CONST 14) = (((RAT) 1 2))
(CONST 15) = SIMPLIFY
(CONST 16) = (MTIMES SIMP)
(CONST 17) = (MEXPT SIMP)
(CONST 18) = (-1)
(CONST 19) = (SIMP)
(CONST 20) = (MTIMES)
(CONST 21) = ((MEXPT) 2 ((RAT) 1 2))
(CONST 22) = ((MEXPT) $%PI ((RAT) -1 2))
(CONST 23) = (MEXPT)
(CONST 24) = (MEXPT)
(CONST 25) = (((RAT) 1 2))
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N VAR)
91 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS2&JMPIF 146 L78)              ; PLUSP
5     (LOAD&PUSH 3)
6     (CALLSR&PUSH 0 54)                  ; -
9     (PUSH-UNBOUND 1)
11    (CALLS2 179)                        ; FLOOR
13    (BIND 0)                            ; N
15    (PUSH-UNBOUND 1)
17    (CALLS2 143)                        ; GENSYM
19    (BIND 1)                            ; VAR
21    (LOAD&PUSH 10)
22    (GETVALUE&PUSH 1)                   ; VAR
24    (CONST&PUSH 16)                     ; (MTIMES SIMP)
25    (CONST&PUSH 17)                     ; (MEXPT SIMP)
26    (GETVALUE&PUSH 1)                   ; VAR
28    (CONST 18)                          ; (-1)
29    (LIST*&PUSH 2)
31    (LOAD&PUSH 11)
32    (CONST 19)                          ; (SIMP)
33    (CONS&PUSH)
34    (GETVALUE&PUSH 1)                   ; VAR
36    (LIST&PUSH 2)
38    (LIST&PUSH 3)
40    (GETVALUE&PUSH 1)                   ; VAR
42    (GETVALUE&PUSH 0)                   ; N
44    (CALL&PUSH 3 6)                     ; DIFFZ
47    (PUSH-UNBOUND 3)
49    (CALLS1&PUSH 172)                   ; SUBST
51    (CONST&PUSH 20)                     ; (MTIMES)
52    (CONST&PUSH 21)                     ; ((MEXPT) 2 ((RAT) 1 2))
53    (CONST&PUSH 22)                     ; ((MEXPT) $%PI ((RAT) -1 2))
54    (CONST&PUSH 23)                     ; (MEXPT)
55    (LOAD&PUSH 15)
56    (GETVALUE&PUSH 0)                   ; N
58    (LIST&PUSH 3)
60    (CONST&PUSH 24)                     ; (MEXPT)
61    (LOAD&PUSH 16)
62    (CONST 25)                          ; (((RAT) 1 2))
64    (LIST*&PUSH 2)
66    (LOAD&PUSH 5)
67    (LIST 6)
69    L69
69    (PUSH)
70    (CALL1 15)                          ; SIMPLIFY
72    (SKIP 1)
74    (UNBIND 2)
76    (SKIP&RET 5)
78    L78
78    (LOAD&PUSH 3)
79    (PUSH-UNBOUND 1)
81    (CALLS2 179)                        ; FLOOR
83    (BIND 0)                            ; N
85    (PUSH-UNBOUND 1)
87    (CALLS2 143)                        ; GENSYM
89    (BIND 1)                            ; VAR
91    (LOAD&PUSH 10)
92    (GETVALUE&PUSH 1)                   ; VAR
94    (CONST&PUSH 2)                      ; (MTIMES SIMP)
95    (CONST&PUSH 3)                      ; (MEXPT SIMP)
96    (GETVALUE&PUSH 1)                   ; VAR
98    (CONST 4)                           ; (-1)
99    (LIST*&PUSH 2)
101   (LOAD&PUSH 12)
102   (CONST 5)                           ; (SIMP)
103   (CONS&PUSH)
104   (GETVALUE&PUSH 1)                   ; VAR
106   (LIST&PUSH 2)
108   (LIST&PUSH 3)
110   (GETVALUE&PUSH 1)                   ; VAR
112   (GETVALUE&PUSH 0)                   ; N
114   (CALL&PUSH 3 6)                     ; DIFFZ
117   (PUSH-UNBOUND 3)
119   (CALLS1&PUSH 172)                   ; SUBST
121   (CONST&PUSH 7)                      ; (MTIMES)
122   (CONST&PUSH 8)                      ; ((MEXPT) 2 ((RAT) 1 2))
123   (CONST&PUSH 9)                      ; ((MEXPT) $%PI ((RAT) -1 2))
124   (CONST&PUSH 10)                     ; (MEXPT)
125   (CONST&PUSH 11)                     ; -1
126   (GETVALUE&PUSH 0)                   ; N
128   (LIST&PUSH 3)
130   (CONST&PUSH 12)                     ; (MEXPT)
131   (LOAD&PUSH 16)
132   (GETVALUE&PUSH 0)                   ; N
134   (LIST&PUSH 3)
136   (CONST&PUSH 13)                     ; (MEXPT)
137   (LOAD&PUSH 17)
138   (CONST 14)                          ; (((RAT) 1 2))
139   (LIST*&PUSH 2)
141   (LOAD&PUSH 6)
142   (LIST 7)
144   (JMP L69)


Disassembly of function #:|(DEFUN BESSEL-I-HALF-ORDER (ARG ORDER POS-FUNCTION ...) ...)-47|
(CONST 0) = BESSEL-I-HALF-ORDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-I-HALF-ORDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-I-HALF-ORDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-I-HALF-ORDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-I-HALF-ORDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-I-HALF-ORDER
8     (SKIP&RET 1)


Disassembly of function BESSEL-I-HALF-ORDER
(CONST 0) = N
(CONST 1) = VAR
(CONST 2) = (MTIMES SIMP)
(CONST 3) = (MEXPT SIMP)
(CONST 4) = (-1)
(CONST 5) = (SIMP)
(CONST 6) = DIFFZ
(CONST 7) = SIMPLIFY
(CONST 8) = (MTIMES)
(CONST 9) = ((MEXPT) 2 ((RAT) 1 2))
(CONST 10) = ((MEXPT) $%PI ((RAT) -1 2))
(CONST 11) = (MEXPT)
(CONST 12) = (((RAT) 1 2))
(CONST 13) = (MEXPT)
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N VAR)
51 byte-code instructions:
0     (LOAD&PUSH 3)
1     (CALLS2&PUSH 158)                   ; ABS
3     (PUSH-UNBOUND 1)
5     (CALLS2 181)                        ; TRUNCATE
7     (BIND 0)                            ; N
9     (PUSH-UNBOUND 1)
11    (CALLS2 143)                        ; GENSYM
13    (BIND 1)                            ; VAR
15    (LOAD&PUSH 10)
16    (GETVALUE&PUSH 1)                   ; VAR
18    (CONST&PUSH 2)                      ; (MTIMES SIMP)
19    (CONST&PUSH 3)                      ; (MEXPT SIMP)
20    (GETVALUE&PUSH 1)                   ; VAR
22    (CONST 4)                           ; (-1)
23    (LIST*&PUSH 2)
25    (LOAD&PUSH 13)
26    (CALLS2&JMPIF 146 L77)              ; PLUSP
29    (LOAD 11)
30    L30
30    (PUSH)
31    (CONST 5)                           ; (SIMP)
32    (CONS&PUSH)
33    (GETVALUE&PUSH 1)                   ; VAR
35    (LIST&PUSH 2)
37    (LIST&PUSH 3)
39    (GETVALUE&PUSH 1)                   ; VAR
41    (GETVALUE&PUSH 0)                   ; N
43    (CALL&PUSH 3 6)                     ; DIFFZ
46    (CALL1&PUSH 7)                      ; SIMPLIFY
48    (PUSH-UNBOUND 3)
50    (CALLS1&PUSH 172)                   ; SUBST
52    (CONST&PUSH 8)                      ; (MTIMES)
53    (CONST&PUSH 9)                      ; ((MEXPT) 2 ((RAT) 1 2))
54    (CONST&PUSH 10)                     ; ((MEXPT) $%PI ((RAT) -1 2))
55    (CONST&PUSH 11)                     ; (MEXPT)
56    (LOAD&PUSH 15)
57    (CONST 12)                          ; (((RAT) 1 2))
58    (LIST*&PUSH 2)
60    (CONST&PUSH 13)                     ; (MEXPT)
61    (LOAD&PUSH 16)
62    (GETVALUE&PUSH 0)                   ; N
64    (LIST&PUSH 3)
66    (LOAD&PUSH 5)
67    (LIST&PUSH 6)
69    (CALL1 7)                           ; SIMPLIFY
71    (SKIP 1)
73    (UNBIND 2)
75    (SKIP&RET 5)
77    L77
77    (LOAD 12)
78    (JMP L30)


Disassembly of function #:|(DEFUN BESSEL-J-SIMP (EXP IGNORED Z) ...)-48|
(CONST 0) = BESSEL-J-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-J-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-J-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-J-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-J-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-J-SIMP
8     (SKIP&RET 1)


Disassembly of function BESSEL-J-SIMP
(CONST 0) = EXP
(CONST 1) = SUBFUNSUBS
(CONST 2) = SIMPCHECK
(CONST 3) = 1
(CONST 4) = $BESSEL_J
(CONST 5) = SUBARGCHECK
(CONST 6) = SUBFUNARGS
(CONST 7) = 0
(CONST 8) = $NUMER
(CONST 9) = COMPLEX-NUMBER-P
(CONST 10) = $REALPART
(CONST 11) = $IMAGPART
(CONST 12) = $BESSEL
(CONST 13) = SUBFUNMAKES
(CONST 14) = (MTIMES SIMP)
(CONST 15) = -1
(CONST 16) = EQTEST
(CONST 17) = $BESSELEXPAND
(CONST 18) = 2
(CONST 19) = MAX-NUMERIC-RATIO-P
(CONST 20) = %SIN
(CONST 21) = %COS
(CONST 22) = BESSEL-JY-HALF-ORDER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($BESSELEXPAND $NUMER EXP)
138 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; SUBFUNSUBS
7     (CAR&PUSH)
8     (LOAD&PUSH 5)
9     (CALL2&PUSH 2)                      ; SIMPCHECK
11    (NIL&PUSH)
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CONST&PUSH 3)                      ; 1
15    (CONST&PUSH 3)                      ; 1
16    (CONST&PUSH 4)                      ; $BESSEL_J
17    (CALL 4 5)                          ; SUBARGCHECK
20    (GETVALUE&PUSH 0)                   ; EXP
22    (CALL1 6)                           ; SUBFUNARGS
24    (CAR&PUSH)
25    (LOAD&PUSH 7)
26    (CALL2&PUSH 2)                      ; SIMPCHECK
28    (LOAD&PUSH 0)
29    (CALLS2&JMPIFNOT 8 L40)             ; NUMBERP
32    (LOAD&PUSH 0)
33    (CALLS2&JMPIFNOT 145 L40)           ; ZEROP
36    (LOAD&PUSH 2)
37    (CALLS2&JMPIF 8 L89)                ; NUMBERP
40    L40
40    (GETVALUE 8)                        ; $NUMER
42    (JMPIFNOT L53)
44    (LOAD&PUSH 2)
45    (CALLS2&JMPIFNOT 8 L53)             ; NUMBERP
48    (LOAD&PUSH 0)
49    (CALL1&JMPIF 9 L149)                ; COMPLEX-NUMBER-P
53    L53
53    (GETVALUE 17)                       ; $BESSELEXPAND
55    (JMPIFNOT L65)
57    (LOAD&PUSH 2)
58    (CONST&PUSH 18)                     ; 2
59    (CALL2 19)                          ; MAX-NUMERIC-RATIO-P
61    (STORE 1)
62    (JMPIF L200)
65    L65
65    (CONST&PUSH 4)                      ; $BESSEL_J
66    (LOAD&PUSH 3)
67    (NIL)
68    (CONS&PUSH)
69    (LOAD&PUSH 2)
70    (NIL)
71    (CONS&PUSH)
72    (CALL&PUSH 3 13)                    ; SUBFUNMAKES
75    (GETVALUE&PUSH 0)                   ; EXP
77    (CALL2 16)                          ; EQTEST
79    (SKIP 3)
81    L81
81    (UNBIND1)
82    (SKIP&RET 4)
84    L84
84    (CONST 3)                           ; 1
85    (SKIP 3)
87    (JMP L81)
89    L89
89    (LOAD&PUSH 2)
90    (CALLS2&JMPIF 145 L84)              ; ZEROP
93    (CONST 7)                           ; 0
94    (SKIP 3)
96    (JMP L81)
98    L98
98    (LOAD&PUSH 2)
99    (LOAD&PUSH 5)
100   (CALL2 12)                          ; $BESSEL
102   (SKIP 5)
104   (JMP L81)
106   L106
106   (CONST&PUSH 4)                      ; $BESSEL_J
107   (LOAD&PUSH 5)
108   (CALLSR&PUSH 0 54)                  ; -
111   (NIL)
112   (CONS&PUSH)
113   (LOAD&PUSH 4)
114   (NIL)
115   (CONS&PUSH)
116   (CALL 3 13)                         ; SUBFUNMAKES
119   (SKIP 5)
121   (JMP L81)
123   L123
123   (LOAD&PUSH 4)
124   (CALLS2&JMPIF 149 L106)             ; EVENP
127   (CONST&PUSH 14)                     ; (MTIMES SIMP)
128   (CONST&PUSH 15)                     ; -1
129   (CONST&PUSH 4)                      ; $BESSEL_J
130   (LOAD&PUSH 7)
131   (CALLSR&PUSH 0 54)                  ; -
134   (NIL)
135   (CONS&PUSH)
136   (LOAD&PUSH 6)
137   (NIL)
138   (CONS&PUSH)
139   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
142   (LIST 3)
144   (SKIP 5)
146   (JMP L81)
149   L149
149   (LOAD&PUSH 0)
150   (CALL1&PUSH 10)                     ; $REALPART
152   (LOAD&PUSH 1)
153   (CALL1&PUSH 11)                     ; $IMAGPART
155   (LOAD&PUSH 1)
156   (CALLS2&JMPIFNOT 15 L164)           ; FLOATP
159   (LOAD&PUSH 0)
160   (CALLS2&JMPIF 8 L98)                ; NUMBERP
164   L164
164   (GETVALUE 8)                        ; $NUMER
166   (JMPIFNOT L177)
168   (LOAD&PUSH 1)
169   (CALLS2&JMPIFNOT 8 L177)            ; NUMBERP
172   (LOAD&PUSH 0)
173   (CALLS2&JMPIF 8 L98)                ; NUMBERP
177   L177
177   (LOAD&PUSH 4)
178   (CALLS2&JMPIF 147 L123)             ; MINUSP
181   (CONST&PUSH 4)                      ; $BESSEL_J
182   (LOAD&PUSH 5)
183   (NIL)
184   (CONS&PUSH)
185   (LOAD&PUSH 4)
186   (NIL)
187   (CONS&PUSH)
188   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
191   (GETVALUE&PUSH 0)                   ; EXP
193   (CALL2 16)                          ; EQTEST
195   (SKIP 5)
197   (JMP L81)
200   L200
200   (LOAD&PUSH 0)
201   (LOAD&PUSH 2)
202   (CONST&PUSH 20)                     ; %SIN
203   (CONST&PUSH 21)                     ; %COS
204   (CALL 4 22)                         ; BESSEL-JY-HALF-ORDER
207   (SKIP 3)
209   (JMP L81)


Disassembly of function #:|(DEFPROP $BESSEL_Y BESSEL-Y-SIMP ...)-49|
(CONST 0) = $BESSEL_Y
(CONST 1) = SPECSIMP
(CONST 2) = BESSEL-Y-SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_Y
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; BESSEL-Y-SIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $BESSEL_Y (# # #) ...)-50|
(CONST 0) = $BESSEL_Y
(CONST 1) = GRAD
(CONST 2) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($BESSEL_Y ARRAY) N) X) N 1)
 ((MPLUS) ((MQAPPLY) (($BESSEL_Y ARRAY) ((MPLUS) -1 N)) X)
  ((MTIMES) -1 N ((MQAPPLY) (($BESSEL_Y ARRAY) N) X) ((MEXPT) X -1))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_Y
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((N X) (# # N 1) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN BESSEL-Y-SIMP (EXP IGNORED Z) ...)-51|
(CONST 0) = BESSEL-Y-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-Y-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-Y-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-Y-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-Y-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-Y-SIMP
8     (SKIP&RET 1)


Disassembly of function BESSEL-Y-SIMP
(CONST 0) = EXP
(CONST 1) = SUBFUNSUBS
(CONST 2) = SIMPCHECK
(CONST 3) = 1
(CONST 4) = $BESSEL_Y
(CONST 5) = SUBARGCHECK
(CONST 6) = SUBFUNARGS
(CONST 7) = $NUMER
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = 1.0
(CONST 12) = BESSEL-Y
(CONST 13) = SUBFUNMAKES
(CONST 14) = (MTIMES SIMP)
(CONST 15) = -1
(CONST 16) = EQTEST
(CONST 17) = $BESSELEXPAND
(CONST 18) = 2
(CONST 19) = MAX-NUMERIC-RATIO-P
(CONST 20) = (MTIMES)
(CONST 21) = %SIN
(CONST 22) = %COS
(CONST 23) = BESSEL-JY-HALF-ORDER
(CONST 24) = SIMPLIFY
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($BESSELEXPAND $NUMER EXP)
129 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; SUBFUNSUBS
7     (CAR&PUSH)
8     (LOAD&PUSH 5)
9     (CALL2&PUSH 2)                      ; SIMPCHECK
11    (NIL&PUSH)
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CONST&PUSH 3)                      ; 1
15    (CONST&PUSH 3)                      ; 1
16    (CONST&PUSH 4)                      ; $BESSEL_Y
17    (CALL 4 5)                          ; SUBARGCHECK
20    (GETVALUE&PUSH 0)                   ; EXP
22    (CALL1 6)                           ; SUBFUNARGS
24    (CAR&PUSH)
25    (LOAD&PUSH 7)
26    (CALL2&PUSH 2)                      ; SIMPCHECK
28    (GETVALUE 7)                        ; $NUMER
30    (JMPIFNOT L41)
32    (LOAD&PUSH 2)
33    (CALLS2&JMPIFNOT 8 L41)             ; NUMBERP
36    (LOAD&PUSH 0)
37    (CALL1&JMPIF 8 L128)                ; COMPLEX-NUMBER-P
41    L41
41    (GETVALUE 17)                       ; $BESSELEXPAND
43    (JMPIFNOT L53)
45    (LOAD&PUSH 2)
46    (CONST&PUSH 18)                     ; 2
47    (CALL2 19)                          ; MAX-NUMERIC-RATIO-P
49    (STORE 1)
50    (JMPIF L179)
53    L53
53    (CONST&PUSH 4)                      ; $BESSEL_Y
54    (LOAD&PUSH 3)
55    (NIL)
56    (CONS&PUSH)
57    (LOAD&PUSH 2)
58    (NIL)
59    (CONS&PUSH)
60    (CALL&PUSH 3 13)                    ; SUBFUNMAKES
63    (GETVALUE&PUSH 0)                   ; EXP
65    (CALL2 16)                          ; EQTEST
67    (SKIP 3)
69    L69
69    (UNBIND1)
70    (SKIP&RET 4)
72    L72
72    (LOAD&PUSH 1)
73    (LOAD&PUSH 1)
74    (CALLS2&PUSH 196)                   ; COMPLEX
76    (LOAD&PUSH 5)
77    (CONST&PUSH 11)                     ; 1.0
78    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
80    (CALL2 12)                          ; BESSEL-Y
82    (SKIP 5)
84    (JMP L69)
86    L86
86    (CONST&PUSH 4)                      ; $BESSEL_Y
87    (LOAD&PUSH 5)
88    (CALLSR&PUSH 0 54)                  ; -
91    (NIL)
92    (CONS&PUSH)
93    (LOAD&PUSH 4)
94    (NIL)
95    (CONS&PUSH)
96    (CALL 3 13)                         ; SUBFUNMAKES
99    (SKIP 5)
101   (JMP L69)
103   L103
103   (LOAD&PUSH 4)
104   (CALLS2&JMPIF 149 L86)              ; EVENP
107   (CONST&PUSH 14)                     ; (MTIMES SIMP)
108   (CONST&PUSH 15)                     ; -1
109   (CONST&PUSH 4)                      ; $BESSEL_Y
110   (LOAD&PUSH 7)
111   (CALLSR&PUSH 0 54)                  ; -
114   (NIL)
115   (CONS&PUSH)
116   (LOAD&PUSH 6)
117   (NIL)
118   (CONS&PUSH)
119   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
122   (LIST 3)
124   (SKIP 5)
126   (JMP L69)
128   L128
128   (LOAD&PUSH 0)
129   (CALL1&PUSH 9)                      ; $REALPART
131   (LOAD&PUSH 1)
132   (CALL1&PUSH 10)                     ; $IMAGPART
134   (LOAD&PUSH 1)
135   (CALLS2&JMPIFNOT 15 L143)           ; FLOATP
138   (LOAD&PUSH 0)
139   (CALLS2&JMPIF 8 L72)                ; NUMBERP
143   L143
143   (GETVALUE 7)                        ; $NUMER
145   (JMPIFNOT L156)
147   (LOAD&PUSH 1)
148   (CALLS2&JMPIFNOT 8 L156)            ; NUMBERP
151   (LOAD&PUSH 0)
152   (CALLS2&JMPIF 8 L72)                ; NUMBERP
156   L156
156   (LOAD&PUSH 4)
157   (CALLS2&JMPIF 147 L103)             ; MINUSP
160   (CONST&PUSH 4)                      ; $BESSEL_Y
161   (LOAD&PUSH 5)
162   (NIL)
163   (CONS&PUSH)
164   (LOAD&PUSH 4)
165   (NIL)
166   (CONS&PUSH)
167   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
170   (GETVALUE&PUSH 0)                   ; EXP
172   (CALL2 16)                          ; EQTEST
174   (SKIP 5)
176   (JMP L69)
179   L179
179   (CONST&PUSH 20)                     ; (MTIMES)
180   (CONST&PUSH 15)                     ; -1
181   (LOAD&PUSH 2)
182   (LOAD&PUSH 4)
183   (CONST&PUSH 21)                     ; %SIN
184   (CONST&PUSH 22)                     ; %COS
185   (CALL&PUSH 4 23)                    ; BESSEL-JY-HALF-ORDER
188   (LIST&PUSH 3)
190   (CALL1 24)                          ; SIMPLIFY
192   (SKIP 3)
194   (JMP L69)


Disassembly of function #:|(DEFPROP $BESSEL_I BESSEL-I-SIMP ...)-52|
(CONST 0) = $BESSEL_I
(CONST 1) = SPECSIMP
(CONST 2) = BESSEL-I-SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_I
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; BESSEL-I-SIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $BESSEL_I (# # #) ...)-53|
(CONST 0) = $BESSEL_I
(CONST 1) = GRAD
(CONST 2) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($BESSEL_I ARRAY) N) X) N 1)
 ((MPLUS) ((MQAPPLY) (($BESSEL_I ARRAY) ((MPLUS) -1 N)) X)
  ((MTIMES) -1 N ((MQAPPLY) (($BESSEL_I ARRAY) N) X) ((MEXPT) X -1))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_I
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((N X) (# # N 1) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN BESSEL-I-SIMP (EXP IGNORED Z) ...)-54|
(CONST 0) = BESSEL-I-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-I-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-I-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-I-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-I-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-I-SIMP
8     (SKIP&RET 1)


Disassembly of function BESSEL-I-SIMP
(CONST 0) = EXP
(CONST 1) = SUBFUNSUBS
(CONST 2) = SIMPCHECK
(CONST 3) = 1
(CONST 4) = $BESSEL_I
(CONST 5) = SUBARGCHECK
(CONST 6) = SUBFUNARGS
(CONST 7) = $NUMER
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = 1.0
(CONST 12) = BESSEL-I
(CONST 13) = SUBFUNMAKES
(CONST 14) = EQTEST
(CONST 15) = $BESSELEXPAND
(CONST 16) = 2
(CONST 17) = MAX-NUMERIC-RATIO-P
(CONST 18) = %SINH
(CONST 19) = %COSH
(CONST 20) = BESSEL-I-HALF-ORDER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($BESSELEXPAND $NUMER EXP)
108 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; SUBFUNSUBS
7     (CAR&PUSH)
8     (LOAD&PUSH 5)
9     (CALL2&PUSH 2)                      ; SIMPCHECK
11    (NIL&PUSH)
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CONST&PUSH 3)                      ; 1
15    (CONST&PUSH 3)                      ; 1
16    (CONST&PUSH 4)                      ; $BESSEL_I
17    (CALL 4 5)                          ; SUBARGCHECK
20    (GETVALUE&PUSH 0)                   ; EXP
22    (CALL1 6)                           ; SUBFUNARGS
24    (CAR&PUSH)
25    (LOAD&PUSH 7)
26    (CALL2&PUSH 2)                      ; SIMPCHECK
28    (GETVALUE 7)                        ; $NUMER
30    (JMPIFNOT L40)
32    (LOAD&PUSH 2)
33    (CALLS2&JMPIFNOT 8 L40)             ; NUMBERP
36    (LOAD&PUSH 0)
37    (CALL1&JMPIF 8 L102)                ; COMPLEX-NUMBER-P
40    L40
40    (GETVALUE 15)                       ; $BESSELEXPAND
42    (JMPIFNOT L52)
44    (LOAD&PUSH 2)
45    (CONST&PUSH 16)                     ; 2
46    (CALL2 17)                          ; MAX-NUMERIC-RATIO-P
48    (STORE 1)
49    (JMPIF L151)
52    L52
52    (CONST&PUSH 4)                      ; $BESSEL_I
53    (LOAD&PUSH 3)
54    (NIL)
55    (CONS&PUSH)
56    (LOAD&PUSH 2)
57    (NIL)
58    (CONS&PUSH)
59    (CALL&PUSH 3 13)                    ; SUBFUNMAKES
62    (GETVALUE&PUSH 0)                   ; EXP
64    (CALL2 14)                          ; EQTEST
66    (SKIP 3)
68    L68
68    (UNBIND1)
69    (SKIP&RET 4)
71    L71
71    (LOAD&PUSH 1)
72    (LOAD&PUSH 1)
73    (CALLS2&PUSH 196)                   ; COMPLEX
75    (LOAD&PUSH 5)
76    (CONST&PUSH 11)                     ; 1.0
77    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
79    (CALL2 12)                          ; BESSEL-I
81    (SKIP 5)
83    (JMP L68)
85    L85
85    (CONST&PUSH 4)                      ; $BESSEL_I
86    (LOAD&PUSH 5)
87    (CALLSR&PUSH 0 54)                  ; -
90    (NIL)
91    (CONS&PUSH)
92    (LOAD&PUSH 4)
93    (NIL)
94    (CONS&PUSH)
95    (CALL 3 13)                         ; SUBFUNMAKES
98    (SKIP 5)
100   (JMP L68)
102   L102
102   (LOAD&PUSH 0)
103   (CALL1&PUSH 9)                      ; $REALPART
105   (LOAD&PUSH 1)
106   (CALL1&PUSH 10)                     ; $IMAGPART
108   (LOAD&PUSH 1)
109   (CALLS2&JMPIFNOT 15 L116)           ; FLOATP
112   (LOAD&PUSH 0)
113   (CALLS2&JMPIF 8 L71)                ; NUMBERP
116   L116
116   (GETVALUE 7)                        ; $NUMER
118   (JMPIFNOT L128)
120   (LOAD&PUSH 1)
121   (CALLS2&JMPIFNOT 8 L128)            ; NUMBERP
124   (LOAD&PUSH 0)
125   (CALLS2&JMPIF 8 L71)                ; NUMBERP
128   L128
128   (LOAD&PUSH 4)
129   (CALLS2&JMPIF 147 L85)              ; MINUSP
132   (CONST&PUSH 4)                      ; $BESSEL_I
133   (LOAD&PUSH 5)
134   (NIL)
135   (CONS&PUSH)
136   (LOAD&PUSH 4)
137   (NIL)
138   (CONS&PUSH)
139   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
142   (GETVALUE&PUSH 0)                   ; EXP
144   (CALL2 14)                          ; EQTEST
146   (SKIP 5)
148   (JMP L68)
151   L151
151   (LOAD&PUSH 0)
152   (LOAD&PUSH 2)
153   (CONST&PUSH 18)                     ; %SINH
154   (CONST&PUSH 19)                     ; %COSH
155   (CALL 4 20)                         ; BESSEL-I-HALF-ORDER
158   (SKIP 3)
160   (JMP L68)


Disassembly of function #:|(DEFPROP $BESSEL_K BESSEL-K-SIMP ...)-55|
(CONST 0) = $BESSEL_K
(CONST 1) = SPECSIMP
(CONST 2) = BESSEL-K-SIMP
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_K
1     (CONST&PUSH 1)                      ; SPECSIMP
2     (CONST&PUSH 2)                      ; BESSEL-K-SIMP
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP $BESSEL_K (# # #) ...)-56|
(CONST 0) = $BESSEL_K
(CONST 1) = GRAD
(CONST 2) = 
((N X) ((%DERIVATIVE) ((MQAPPLY) (($BESSEL_K ARRAY) N) X) N 1)
 ((MPLUS SIMP) ((MTIMES SIMP) -1 ((MQAPPLY SIMP) (($BESSEL_K SIMP ARRAY) N) X))
  ((MTIMES SIMP) -1 N ((MEXPT SIMP) X -1)
   ((MQAPPLY SIMP) (($BESSEL_K SIMP ARRAY) N) X))))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BESSEL_K
1     (CONST&PUSH 1)                      ; GRAD
2     (CONST&PUSH 2)                      ; ((N X) (# # N 1) (# # #))
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFUN BESSEL-K-HALF-ORDER (ARG ORDER) ...)-57|
(CONST 0) = BESSEL-K-HALF-ORDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-K-HALF-ORDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-K-HALF-ORDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-K-HALF-ORDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-K-HALF-ORDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-K-HALF-ORDER
8     (SKIP&RET 1)


Disassembly of function BESSEL-K-HALF-ORDER
(CONST 0) = N
(CONST 1) = VAR
(CONST 2) = (MTIMES SIMP)
(CONST 3) = (MEXPT SIMP)
(CONST 4) = (-1)
(CONST 5) = (MEXPT SIMP)
(CONST 6) = $%E
(CONST 7) = (MTIMES SIMP)
(CONST 8) = -1
(CONST 9) = $DIFF
(CONST 10) = (MTIMES)
(CONST 11) = 1
(CONST 12) = ((MEXPT) 2 ((RAT) 1 2))
(CONST 13) = ((MEXPT) $%PI ((RAT) -1 2))
(CONST 14) = (MEXPT)
(CONST 15) = (((RAT) 1 2))
(CONST 16) = (MEXPT)
(CONST 17) = SIMPLIFY
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N VAR)
53 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2&PUSH 158)                   ; ABS
3     (PUSH-UNBOUND 1)
5     (CALLS2 179)                        ; FLOOR
7     (BIND 0)                            ; N
9     (PUSH-UNBOUND 1)
11    (CALLS2 143)                        ; GENSYM
13    (BIND 1)                            ; VAR
15    (LOAD&PUSH 8)
16    (GETVALUE&PUSH 1)                   ; VAR
18    (CONST&PUSH 2)                      ; (MTIMES SIMP)
19    (CONST&PUSH 3)                      ; (MEXPT SIMP)
20    (GETVALUE&PUSH 1)                   ; VAR
22    (CONST 4)                           ; (-1)
23    (LIST*&PUSH 2)
25    (CONST&PUSH 5)                      ; (MEXPT SIMP)
26    (CONST&PUSH 6)                      ; $%E
27    (CONST&PUSH 7)                      ; (MTIMES SIMP)
28    (CONST&PUSH 8)                      ; -1
29    (GETVALUE&PUSH 1)                   ; VAR
31    (LIST&PUSH 3)
33    (LIST&PUSH 3)
35    (LIST&PUSH 3)
37    (GETVALUE&PUSH 1)                   ; VAR
39    (GETVALUE&PUSH 0)                   ; N
41    (CALL&PUSH 3 9)                     ; $DIFF
44    (PUSH-UNBOUND 3)
46    (CALLS1&PUSH 172)                   ; SUBST
48    (CONST&PUSH 10)                     ; (MTIMES)
49    (GETVALUE&PUSH 0)                   ; N
51    (CALLS2&JMPIF 149 L80)              ; EVENP
54    (CONST 8)                           ; -1
55    L55
55    (PUSH)
56    (CONST&PUSH 12)                     ; ((MEXPT) 2 ((RAT) 1 2))
57    (CONST&PUSH 13)                     ; ((MEXPT) $%PI ((RAT) -1 2))
58    (CONST&PUSH 14)                     ; (MEXPT)
59    (LOAD&PUSH 14)
60    (CONST 15)                          ; (((RAT) 1 2))
61    (LIST*&PUSH 2)
63    (CONST&PUSH 16)                     ; (MEXPT)
64    (LOAD&PUSH 15)
65    (GETVALUE&PUSH 0)                   ; N
67    (LIST&PUSH 3)
69    (LOAD&PUSH 6)
70    (LIST&PUSH 7)
72    (CALL1 17)                          ; SIMPLIFY
74    (SKIP 1)
76    (UNBIND 2)
78    (SKIP&RET 3)
80    L80
80    (CONST 11)                          ; 1
81    (JMP L55)


Disassembly of function #:|(DEFUN BESSEL-K-SIMP (EXP IGNORED Z) ...)-58|
(CONST 0) = BESSEL-K-SIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE BESSEL-K-SIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; BESSEL-K-SIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; BESSEL-K-SIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE BESSEL-K-SIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; BESSEL-K-SIMP
8     (SKIP&RET 1)


Disassembly of function BESSEL-K-SIMP
(CONST 0) = EXP
(CONST 1) = SUBFUNSUBS
(CONST 2) = SIMPCHECK
(CONST 3) = 1
(CONST 4) = $BESSEL_K
(CONST 5) = SUBARGCHECK
(CONST 6) = SUBFUNARGS
(CONST 7) = $NUMER
(CONST 8) = COMPLEX-NUMBER-P
(CONST 9) = $REALPART
(CONST 10) = $IMAGPART
(CONST 11) = 1.0
(CONST 12) = BESSEL-K
(CONST 13) = SUBFUNMAKES
(CONST 14) = EQTEST
(CONST 15) = $BESSELEXPAND
(CONST 16) = 2
(CONST 17) = MAX-NUMERIC-RATIO-P
(CONST 18) = BESSEL-K-HALF-ORDER
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($BESSELEXPAND $NUMER EXP)
106 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (GETVALUE&PUSH 0)                   ; EXP
5     (CALL1 1)                           ; SUBFUNSUBS
7     (CAR&PUSH)
8     (LOAD&PUSH 5)
9     (CALL2&PUSH 2)                      ; SIMPCHECK
11    (NIL&PUSH)
12    (GETVALUE&PUSH 0)                   ; EXP
14    (CONST&PUSH 3)                      ; 1
15    (CONST&PUSH 3)                      ; 1
16    (CONST&PUSH 4)                      ; $BESSEL_K
17    (CALL 4 5)                          ; SUBARGCHECK
20    (GETVALUE&PUSH 0)                   ; EXP
22    (CALL1 6)                           ; SUBFUNARGS
24    (CAR&PUSH)
25    (LOAD&PUSH 7)
26    (CALL2&PUSH 2)                      ; SIMPCHECK
28    (GETVALUE 7)                        ; $NUMER
30    (JMPIFNOT L40)
32    (LOAD&PUSH 2)
33    (CALLS2&JMPIFNOT 8 L40)             ; NUMBERP
36    (LOAD&PUSH 0)
37    (CALL1&JMPIF 8 L102)                ; COMPLEX-NUMBER-P
40    L40
40    (GETVALUE 15)                       ; $BESSELEXPAND
42    (JMPIFNOT L52)
44    (LOAD&PUSH 2)
45    (CONST&PUSH 16)                     ; 2
46    (CALL2 17)                          ; MAX-NUMERIC-RATIO-P
48    (STORE 1)
49    (JMPIF L151)
52    L52
52    (CONST&PUSH 4)                      ; $BESSEL_K
53    (LOAD&PUSH 3)
54    (NIL)
55    (CONS&PUSH)
56    (LOAD&PUSH 2)
57    (NIL)
58    (CONS&PUSH)
59    (CALL&PUSH 3 13)                    ; SUBFUNMAKES
62    (GETVALUE&PUSH 0)                   ; EXP
64    (CALL2 14)                          ; EQTEST
66    (SKIP 3)
68    L68
68    (UNBIND1)
69    (SKIP&RET 4)
71    L71
71    (LOAD&PUSH 1)
72    (LOAD&PUSH 1)
73    (CALLS2&PUSH 196)                   ; COMPLEX
75    (LOAD&PUSH 5)
76    (CONST&PUSH 11)                     ; 1.0
77    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
79    (CALL2 12)                          ; BESSEL-K
81    (SKIP 5)
83    (JMP L68)
85    L85
85    (CONST&PUSH 4)                      ; $BESSEL_K
86    (LOAD&PUSH 5)
87    (CALLSR&PUSH 0 54)                  ; -
90    (NIL)
91    (CONS&PUSH)
92    (LOAD&PUSH 4)
93    (NIL)
94    (CONS&PUSH)
95    (CALL 3 13)                         ; SUBFUNMAKES
98    (SKIP 5)
100   (JMP L68)
102   L102
102   (LOAD&PUSH 0)
103   (CALL1&PUSH 9)                      ; $REALPART
105   (LOAD&PUSH 1)
106   (CALL1&PUSH 10)                     ; $IMAGPART
108   (LOAD&PUSH 1)
109   (CALLS2&JMPIFNOT 15 L116)           ; FLOATP
112   (LOAD&PUSH 0)
113   (CALLS2&JMPIF 8 L71)                ; NUMBERP
116   L116
116   (GETVALUE 7)                        ; $NUMER
118   (JMPIFNOT L128)
120   (LOAD&PUSH 1)
121   (CALLS2&JMPIFNOT 8 L128)            ; NUMBERP
124   (LOAD&PUSH 0)
125   (CALLS2&JMPIF 8 L71)                ; NUMBERP
128   L128
128   (LOAD&PUSH 4)
129   (CALLS2&JMPIF 147 L85)              ; MINUSP
132   (CONST&PUSH 4)                      ; $BESSEL_K
133   (LOAD&PUSH 5)
134   (NIL)
135   (CONS&PUSH)
136   (LOAD&PUSH 4)
137   (NIL)
138   (CONS&PUSH)
139   (CALL&PUSH 3 13)                    ; SUBFUNMAKES
142   (GETVALUE&PUSH 0)                   ; EXP
144   (CALL2 14)                          ; EQTEST
146   (SKIP 5)
148   (JMP L68)
151   L151
151   (LOAD&PUSH 0)
152   (LOAD&PUSH 2)
153   (CALL2 18)                          ; BESSEL-K-HALF-ORDER
155   (SKIP 3)
157   (JMP L68)


Wrote file binary-clisp/bessel.fas
Wrote file /cygdrive/e/temp/maxima/src/bessel.lis