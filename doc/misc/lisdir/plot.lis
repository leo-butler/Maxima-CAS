Listing of compilation of file /cygdrive/e/temp/maxima/src/plot.lisp
on 2002-12-17 13:36:28 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/plot.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL LOAD) (DEFMACRO COERCE-FLOAT # ...))-2|
(CONST 0) = COERCE-FLOAT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COERCE-FLOAT>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; COERCE-FLOAT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COERCE-FLOAT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COERCE-FLOAT>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; COERCE-FLOAT
10    (SKIP&RET 1)


Disassembly of function COERCE-FLOAT
(CONST 0) = 2
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = X
(CONST 3) = COMMON-LISP:FLOAT
(CONST 4) = MEVAL*
(CONST 5) = (1.0)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
20 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 2
4     (CALLSR&JMPIF 1 46 L25)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; X
13    (CONST&PUSH 3)                      ; COMMON-LISP:FLOAT
14    (CONST&PUSH 4)                      ; MEVAL*
15    (GETVALUE&PUSH 2)                   ; X
17    (LIST&PUSH 2)
19    (CONST 5)                           ; (1.0)
20    (LIST* 2)
22    (UNBIND1)
23    (SKIP&RET 3)
25    L25
25    (LOAD&PUSH 2)
26    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
28    (SKIP&RET 3)


Disassembly of function #:|(DEFVAR *Z-RANGE* NIL)-3|
(CONST 0) = (SPECIAL *Z-RANGE*)
(CONST 1) = *Z-RANGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *Z-RANGE*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *Z-RANGE*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *Z-RANGE*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *Z-RANGE*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *ORIGINAL-POINTS* NIL)-4|
(CONST 0) = (SPECIAL *ORIGINAL-POINTS*)
(CONST 1) = *ORIGINAL-POINTS*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *ORIGINAL-POINTS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *ORIGINAL-POINTS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *ORIGINAL-POINTS*
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *ORIGINAL-POINTS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $AXES_LENGTH 4.0)-5|
(CONST 0) = (SPECIAL $AXES_LENGTH)
(CONST 1) = $AXES_LENGTH
(CONST 2) = 4.0
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $AXES_LENGTH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $AXES_LENGTH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $AXES_LENGTH
8     (CONST&PUSH 2)                      ; 4.0
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $AXES_LENGTH
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR *ROT* (MAKE-ARRAY 9 :ELEMENT-TYPE ...))-6|
(CONST 0) = (SPECIAL *ROT*)
(CONST 1) = *ROT*
(CONST 2) = 9
(CONST 3) = LONG-FLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *ROT*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *ROT*
4     (CALLS1&JMPIF 79 L17)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *ROT*
8     (CONST&PUSH 2)                      ; 9
9     (PUSH-UNBOUND 7)
11    (CONST 3)                           ; LONG-FLOAT
12    (STORE 5)
13    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
15    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
17    L17
17    (CONST 1)                           ; *ROT*
18    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $ROT NIL)-7|
(CONST 0) = (SPECIAL $ROT)
(CONST 1) = $ROT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $ROT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $ROT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $ROT
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $ROT
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $PLOT_OPTIONS '(# # # ...))-8|
(CONST 0) = (SPECIAL $PLOT_OPTIONS)
(CONST 1) = $PLOT_OPTIONS
(CONST 2) = 
((MLIST) ((MLIST) |$x| -3 3)
 ((MLIST) |$y| -1.7555597020139802E305 1.7555597020139802E305)
 ((MLIST) |$t| -3 3) ((MLIST) $GRID 30 30) ((MLIST) $VIEW_DIRECTION 1 1 1)
 ((MLIST) $COLOUR_Z NIL) ((MLIST) $TRANSFORM_XY NIL) ((MLIST) $RUN_VIEWER T)
 ((MLIST) $PLOT_FORMAT $OPENMATH) ((MLIST) $NTICKS 100))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PLOT_OPTIONS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PLOT_OPTIONS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PLOT_OPTIONS
8     (CONST&PUSH 2)                      ; ((MLIST) (# |$x| ...) ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PLOT_OPTIONS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $GET_PLOT_OPTION (NAME &OPTIONAL N) ...)-9|
(CONST 0) = $GET_PLOT_OPTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GET_PLOT_OPTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GET_PLOT_OPTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GET_PLOT_OPTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GET_PLOT_OPTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GET_PLOT_OPTION
8     (SKIP&RET 1)


Disassembly of function $GET_PLOT_OPTION
(CONST 0) = NAME
(CONST 1) = N
(CONST 2) = $PLOT_OPTIONS
(CONST 3) = V
(CONST 4) = 1
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (N NAME V $PLOT_OPTIONS)
writes special variable : (V)
41 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NAME
3     (JMPIFBOUNDP 4 L7)
6     (NIL)
7     L7
7     (BIND 1)                            ; N
9     (NIL&PUSH)
10    (GETVALUE 2)                        ; $PLOT_OPTIONS
12    (CDR&PUSH)
13    (LOAD 1)
14    (BIND 3)                            ; V
16    (LOAD&JMPIFNOT 3 L40)
19    L19
19    (LOAD&CAR&PUSH 3)
21    (LOAD 0)
22    (SETVALUE 3)                        ; V
24    (SKIP 1)
26    (CONST&PUSH 4)                      ; 1
27    (GETVALUE&PUSH 3)                   ; V
29    (CALLS1&PUSH 148)                   ; NTH
31    (GETVALUE 0)                        ; NAME
33    (JMPIFEQ L55)
35    (LOAD&CDR&STORE 3)
37    (LOAD&JMPIF 3 L19)
40    L40
40    (NIL)
41    L41
41    (UNBIND1)
42    (SKIP 2)
44    (UNBIND 2)
46    (SKIP&RET 3)
48    L48
48    (PUSH)
49    (GETVALUE&PUSH 3)                   ; V
51    (CALLS1 148)                        ; NTH
53    (JMP L41)
55    L55
55    (GETVALUE 1)                        ; N
57    (JMPIF L48)
59    (GETVALUE 3)                        ; V
61    (JMP L41)


Disassembly of function #:|(DEFUN CHECK-LIST-ITEMS (NAME LIS TYPE ...) ...)-10|
(CONST 0) = CHECK-LIST-ITEMS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECK-LIST-ITEMS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECK-LIST-ITEMS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECK-LIST-ITEMS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECK-LIST-ITEMS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECK-LIST-ITEMS
8     (SKIP&RET 1)


Disassembly of function CHECK-LIST-ITEMS
(CONST 0) = NAME
(CONST 1) = "~M items were expected in the ~M list"
(CONST 2) = MERROR
(CONST 3) = (MLIST)
(CONST 4) = V
(CONST 5) = MEVAL*
(CONST 6) = TYPEP
(CONST 7) = "~M is not of the right type in ~M list"
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V NAME)
writes special variable : (V)
60 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; NAME
3     (LOAD&PUSH 6)
4     (CALLS2&PUSH 71)                    ; LENGTH
6     (LOAD&PUSH 5)
7     (CALLS2&JMPIF 1 L17)                ; EQL
10    (CONST&PUSH 1)                      ; "~M items were expected in the ~M list"
11    (LOAD&PUSH 5)
12    (GETVALUE&PUSH 0)                   ; NAME
14    (CALL 3 2)                          ; MERROR
17    L17
17    (CONST&PUSH 3)                      ; (MLIST)
18    (GETVALUE&PUSH 0)                   ; NAME
20    (NIL)
21    (BIND 4)                            ; V
23    (LOAD&PUSH 11)
24    (PUSH-NIL 2)
26    (LOAD&JMPIFNOT 2 L58)
29    L29
29    (LOAD&CAR&PUSH 2)
31    (LOAD 0)
32    (SETVALUE 4)                        ; V
34    (STORE 0)
35    (CALL1 5)                           ; MEVAL*
37    (SETVALUE 4)                        ; V
39    (PUSH)
40    (LOAD&PUSH 14)
41    (CALL2&JMPIFNOT 6 L67)              ; TYPEP
44    (LOAD&JMPIF 0 L78)
47    L47
47    (GETVALUE&PUSH 4)                   ; V
49    (NIL)
50    (CONS)
51    (STORE 0)
52    (STORE 1)
53    L53
53    (LOAD&CDR&STORE 2)
55    (LOAD&JMPIF 2 L29)
58    L58
58    (LOAD 1)
59    (SKIP 3)
61    (UNBIND1)
62    (LIST* 2)
64    (UNBIND1)
65    (SKIP&RET 5)
67    L67
67    (CONST&PUSH 7)                      ; "~M is not of the right type in ~M list"
68    (GETVALUE&PUSH 4)                   ; V
70    (GETVALUE&PUSH 0)                   ; NAME
72    (CALL 3 2)                          ; MERROR
75    (LOAD&JMPIFNOT 0 L47)
78    L78
78    (PUSH)
79    (GETVALUE&PUSH 4)                   ; V
81    (NIL)
82    (CONS)
83    (STORE 1)
84    (PUSH)
85    (CALLS1 171)                        ; SYSTEM::%RPLACD
87    (JMP L53)


Disassembly of function #:|(DEFUN $SET_PLOT_OPTION (VALUE) ...)-11|
(CONST 0) = $SET_PLOT_OPTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SET_PLOT_OPTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SET_PLOT_OPTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SET_PLOT_OPTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SET_PLOT_OPTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SET_PLOT_OPTION
8     (SKIP&RET 1)


Disassembly of function $SET_PLOT_OPTION
(CONST 0) = $PLOT_OPTIONS
(CONST 1) = $COPYLIST
(CONST 2) = $LISTP
(CONST 3) = 1
(CONST 4) = NAME
(CONST 5) = "~M is not a plot option.  Must be [symbol,..data]"
(CONST 6) = MERROR
(CONST 7) = 
#S(HASH-TABLE EQ ($PLOT_FORMAT . 64) ($TRANSFORM_XY . 45) ($RUN_VIEWER . 45)
   ($COLOUR_Z . 45) ($NTICKS . 36) ($GRID . 27) ($VIEW_DIRECTION . 18)
   (|$y| . 2) (|$x| . 2))
(CONST 8) = NUMBER
(CONST 9) = 2
(CONST 10) = CHECK-LIST-ITEMS
(CONST 11) = CHECK-RANGE
(CONST 12) = 3
(CONST 13) = FIXNUM
(CONST 14) = ($ZIC $GEOMVIEW $PS $GNUPLOT $ZPLOT $OPENMATH)
(CONST 15) = "Only [zic,geomview,ps,openmath,gnuplot] are available"
(CONST 16) = "Unknown plot option specified:  ~M"
(CONST 17) = V
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V NAME $PLOT_OPTIONS)
writes special variables : (V NAME $PLOT_OPTIONS)
109 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $PLOT_OPTIONS
2     (CALL1 1)                           ; $COPYLIST
4     (SETVALUE 0)                        ; $PLOT_OPTIONS
6     (LOAD&PUSH 1)
7     (CALL1&JMPIFNOT 2 L20)              ; $LISTP
10    (CONST&PUSH 3)                      ; 1
11    (LOAD&PUSH 2)
12    (CALLS1 148)                        ; NTH
14    (SETVALUE 4)                        ; NAME
16    (PUSH)
17    (CALLS2&JMPIF 6 L24)                ; SYMBOLP
20    L20
20    (CONST&PUSH 5)                      ; "~M is not a plot option.  Must be [symbol,..data]"
21    (LOAD&PUSH 2)
22    (CALL2 6)                           ; MERROR
24    L24
24    (GETVALUE 4)                        ; NAME
26    (JMPHASH 7 L105 L30 L30 L46 L55 L64 L73 L73 L73 L92)
30    L30
30    (GETVALUE&PUSH 4)                   ; NAME
32    (LOAD 2)
33    (CDR)
34    (CDR&PUSH)
35    (CONST&PUSH 8)                      ; NUMBER
36    (CONST&PUSH 9)                      ; 2
37    (CALL 4 10)                         ; CHECK-LIST-ITEMS
40    (LOAD&PUSH 1)
41    (CALL1 11)                          ; CHECK-RANGE
43    (JMP L110)
46    L46
46    (GETVALUE&PUSH 4)                   ; NAME
48    (LOAD 2)
49    (CDR)
50    (CDR&PUSH)
51    (CONST&PUSH 8)                      ; NUMBER
52    (CONST 12)                          ; 3
53    (JMP L80)
55    L55
55    (GETVALUE&PUSH 4)                   ; NAME
57    (LOAD 2)
58    (CDR)
59    (CDR&PUSH)
60    (CONST&PUSH 13)                     ; FIXNUM
61    (CONST 9)                           ; 2
62    (JMP L80)
64    L64
64    (GETVALUE&PUSH 4)                   ; NAME
66    (LOAD 2)
67    (CDR)
68    (CDR&PUSH)
69    (CONST&PUSH 13)                     ; FIXNUM
70    (CONST 3)                           ; 1
71    (JMP L80)
73    L73
73    (GETVALUE&PUSH 4)                   ; NAME
75    (LOAD 2)
76    (CDR)
77    (CDR&PUSH)
78    (T&PUSH)
79    (CONST 3)                           ; 1
80    L80
80    (PUSH)
81    (CALL 4 10)                         ; CHECK-LIST-ITEMS
84    (JMP L110)
86    L86
86    (CONST&PUSH 15)                     ; "Only [zic,geomview,ps,openmath,gnuplot] are available"
87    (CALL1 6)                           ; MERROR
89    (LOAD 1)
90    (JMP L110)
92    L92
92    (CONST&PUSH 9)                      ; 2
93    (LOAD&PUSH 2)
94    (CALLS1&PUSH 148)                   ; NTH
96    (CONST&PUSH 14)                     ; ($ZIC $GEOMVIEW $PS $GNUPLOT ...)
97    (PUSH-UNBOUND 3)
99    (CALLS1&JMPIFNOT 180 L86)           ; MEMBER
102   (LOAD 1)
103   (JMP L110)
105   L105
105   (CONST&PUSH 16)                     ; "Unknown plot option specified:  ~M"
106   (GETVALUE&PUSH 4)                   ; NAME
108   (CALL2 6)                           ; MERROR
110   L110
110   (STORE 1)
111   (GETVALUE 0)                        ; $PLOT_OPTIONS
113   (CDR)
114   (BIND 17)                           ; V
116   (GETVALUE 17)                       ; V
118   (JMPIFNOT L144)
120   L120
120   (CONST&PUSH 3)                      ; 1
121   (GETVALUE 17)                       ; V
123   (CAR&PUSH)
124   (CALLS1&PUSH 148)                   ; NTH
126   (GETVALUE 4)                        ; NAME
128   (JMPIFNOTEQ L135)
130   (GETVALUE&PUSH 17)                  ; V
132   (LOAD&PUSH 5)
133   (CALLS1 169)                        ; SYSTEM::%RPLACA
135   L135
135   (GETVALUE 17)                       ; V
137   (CDR)
138   (SETVALUE 17)                       ; V
140   (GETVALUE 17)                       ; V
142   (JMPIF L120)
144   L144
144   (UNBIND1)
145   (GETVALUE 0)                        ; $PLOT_OPTIONS
147   (SKIP&RET 2)


Disassembly of function #:|(DEFVAR $PSTREAM NIL)-12|
(CONST 0) = (SPECIAL $PSTREAM)
(CONST 1) = $PSTREAM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PSTREAM)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PSTREAM
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PSTREAM
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PSTREAM
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PRINT-PT1 (F STR) ...)-13|
(CONST 0) = PRINT-PT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PRINT-PT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PRINT-PT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PRINT-PT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PRINT-PT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PRINT-PT1
8     (SKIP&RET 1)


Disassembly of function PRINT-PT1
(CONST 0) = F
(CONST 1) = #<COMPILED-CLOSURE PRINT-PT1-1>
(CONST 2) = FORMAT
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
8 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; F
3     (LOAD&PUSH 4)
4     (CONST&PUSH 1)                      ; #<COMPILED-CLOSURE PRINT-PT1-1>
5     (GETVALUE&PUSH 0)                   ; F
7     (CALL 3 2)                          ; FORMAT
10    (UNBIND1)
11    (SKIP&RET 3)


Disassembly of function PRINT-PT1-1
(CONST 0) = 3
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 3
4     (PUSH-NIL 3)
6     (LOAD&PUSH 10)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function #:|(DEFMACRO DEFBINOP (NAME OP TYPE) ...)-14|
(CONST 0) = DEFBINOP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DEFBINOP>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; DEFBINOP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DEFBINOP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DEFBINOP>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; DEFBINOP
10    (SKIP&RET 1)


Disassembly of function DEFBINOP
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = NAME
(CONST 3) = PROGN
(CONST 4) = DEFUN
(CONST 5) = (X Y)
(CONST 6) = THE
(CONST 7) = (X)
(CONST 8) = (Y)
(CONST 9) = EVAL-WHEN
(CONST 10) = (COMPILE EVAL)
(CONST 11) = DEFMACRO
(CONST 12) = (X Y)
(CONST 13) = SYSTEM::BACKQUOTE
(CONST 14) = ((SYSTEM::UNQUOTE X))
(CONST 15) = ((SYSTEM::UNQUOTE Y))
(CONST 16) = LIST
(CONST 17) = 'THE
(CONST 18) = QUOTE
(CONST 19) = 'THE
(CONST 20) = (X)
(CONST 21) = 'THE
(CONST 22) = (Y)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (NAME)
90 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L118)            ; /=
9     (LOAD 2)
10    (CDR)
11    (CAR)
12    (BIND 2)                            ; NAME
14    (LOAD 5)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 6)
19    (CDR)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (CONST&PUSH 3)                      ; PROGN
24    (CONST&PUSH 4)                      ; DEFUN
25    (GETVALUE&PUSH 2)                   ; NAME
27    (CONST&PUSH 5)                      ; (X Y)
28    (CONST&PUSH 6)                      ; THE
29    (LOAD&PUSH 5)
30    (LOAD&PUSH 7)
31    (CONST&PUSH 6)                      ; THE
32    (LOAD&PUSH 8)
33    (CONST 7)                           ; (X)
34    (LIST*&PUSH 2)
36    (CONST&PUSH 6)                      ; THE
37    (LOAD&PUSH 9)
38    (CONST 8)                           ; (Y)
39    (LIST*&PUSH 2)
41    (LIST&PUSH 3)
43    (LIST&PUSH 3)
45    (LIST&PUSH 4)
47    (CONST&PUSH 9)                      ; EVAL-WHEN
48    (CONST&PUSH 10)                     ; (COMPILE EVAL)
49    (CONST&PUSH 11)                     ; DEFMACRO
50    (GETVALUE&PUSH 2)                   ; NAME
52    (CONST&PUSH 12)                     ; (X Y)
53    (CONST&PUSH 13)                     ; SYSTEM::BACKQUOTE
54    (CONST&PUSH 6)                      ; THE
55    (LOAD&PUSH 9)
56    (LOAD&PUSH 11)
57    (CONST&PUSH 6)                      ; THE
58    (LOAD&PUSH 12)
59    (CONST 14)                          ; ((SYSTEM::UNQUOTE X))
60    (LIST*&PUSH 2)
62    (CONST&PUSH 6)                      ; THE
63    (LOAD&PUSH 13)
64    (CONST 15)                          ; ((SYSTEM::UNQUOTE Y))
65    (LIST*&PUSH 2)
67    (LIST&PUSH 3)
69    (LIST&PUSH 3)
71    (CONST&PUSH 16)                     ; LIST
72    (CONST&PUSH 17)                     ; 'THE
73    (CONST&PUSH 18)                     ; QUOTE
74    (LOAD&PUSH 12)
75    (LIST&PUSH 2)
77    (CONST&PUSH 16)                     ; LIST
78    (CONST&PUSH 18)                     ; QUOTE
79    (LOAD&PUSH 15)
80    (LIST&PUSH 2)
82    (CONST&PUSH 16)                     ; LIST
83    (CONST&PUSH 19)                     ; 'THE
84    (CONST&PUSH 18)                     ; QUOTE
85    (LOAD&PUSH 17)
86    (LIST&PUSH 2)
88    (CONST 20)                          ; (X)
89    (LIST*&PUSH 3)
91    (CONST&PUSH 16)                     ; LIST
92    (CONST&PUSH 21)                     ; 'THE
93    (CONST&PUSH 18)                     ; QUOTE
94    (LOAD&PUSH 18)
95    (LIST&PUSH 2)
97    (CONST 22)                          ; (Y)
99    (LIST*&PUSH 3)
101   (LIST&PUSH 4)
103   (LIST&PUSH 4)
105   (LIST&PUSH 3)
107   (LIST&PUSH 4)
109   (LIST&PUSH 3)
111   (LIST 3)
113   (SKIP 2)
115   (UNBIND1)
116   (SKIP&RET 3)
118   L118
118   (LOAD&PUSH 2)
119   (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
121   (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP F+ + ...)-15-1|
(CONST 0) = F+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function F+
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 2 53)                       ; +
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP F+ + ...)-15-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFBINOP F- - ...)-16-1|
(CONST 0) = F-
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE F->
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; F-
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; F-
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE F->
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function F-
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 1 54)                       ; -
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP F- - ...)-16-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFBINOP $+ + ...)-17-1|
(CONST 0) = $+
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $+>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $+
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $+
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $+>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $+
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 2 53)                       ; +
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP $+ + ...)-17-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFBINOP $- - ...)-18-1|
(CONST 0) = $-
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $->
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $-
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $-
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $->
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $-
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 1 54)                       ; -
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP $- - ...)-18-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFBINOP $* * ...)-19-1|
(CONST 0) = $*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $*
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 2 55)                       ; *
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP $* * ...)-19-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFBINOP $/ / ...)-20-1|
(CONST 0) = $/
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $/>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $/
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $/
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $/>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (VALUES0)
8     (SKIP&RET 1)


Disassembly of function $/
(CONST 0) = X
(CONST 1) = Y
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALLSR 1 56)                       ; /
13    (UNBIND 2)
15    (SKIP&RET 3)


Disassembly of function #:|(DEFBINOP $/ / ...)-20-2|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFSTRUCT (POLYGON # #) (DUMMY '#) ...)-21|
(CONST 0) = POLYGON
(CONST 1) = STRUCTURE-OBJECT
(CONST 2) = SYSTEM::DEFSTRUCT-DESCRIPTION
(CONST 3) = 0
(CONST 4) = %MAKE-POLYGON
(CONST 5) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 6) = #<COMPILED-CLOSURE %MAKE-POLYGON>
(CONST 7) = LIST
(CONST 8) = 
(#(DUMMY (:DUMMY) 0 (NIL $POLYGON SIMP) '($POLYGON SIMP) T NIL)
 #(PTS (:PTS) 1 (NIL) NIL T NIL) #(EDGES (:EDGES) 2 (NIL) NIL T NIL))
(CONST 9) = (INLINE COPY-POLYGON)
(CONST 10) = COPY-POLYGON
(CONST 11) = SYSTEM::INLINE-EXPANSION
(CONST 12) = 
((STRUCTURE) (DECLARE (SYSTEM::IN-DEFUN COPY-POLYGON))
 (BLOCK COPY-POLYGON (COPY-LIST STRUCTURE)))
(CONST 13) = #<COMPILED-CLOSURE COPY-POLYGON>
(CONST 14) = (FUNCTION POLYGON-DUMMY (POLYGON) T)
(CONST 15) = (INLINE POLYGON-DUMMY)
(CONST 16) = POLYGON-DUMMY
(CONST 17) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN POLYGON-DUMMY))
 (BLOCK POLYGON-DUMMY (THE T (NTH 0 SYSTEM::OBJECT))))
(CONST 18) = #<COMPILED-CLOSURE POLYGON-DUMMY>
(CONST 19) = SYSTEM::DEFSTRUCT-READER
(CONST 20) = (FUNCTION POLYGON-PTS (POLYGON) T)
(CONST 21) = (INLINE POLYGON-PTS)
(CONST 22) = POLYGON-PTS
(CONST 23) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN POLYGON-PTS))
 (BLOCK POLYGON-PTS (THE T (NTH 1 SYSTEM::OBJECT))))
(CONST 24) = #<COMPILED-CLOSURE POLYGON-PTS>
(CONST 25) = (FUNCTION POLYGON-EDGES (POLYGON) T)
(CONST 26) = (INLINE POLYGON-EDGES)
(CONST 27) = POLYGON-EDGES
(CONST 28) = 
((SYSTEM::OBJECT) (DECLARE (SYSTEM::IN-DEFUN POLYGON-EDGES))
 (BLOCK POLYGON-EDGES (THE T (NTH 2 SYSTEM::OBJECT))))
(CONST 29) = #<COMPILED-CLOSURE POLYGON-EDGES>
(CONST 30) = SYSTEM::DEFSTRUCT-WRITER
(CONST 31) = SYSTEM::SETF-EXPANDER
(CONST 32) = -1
(CONST 33) = 1
(CONST 34) = #<COMPILED-CLOSURE SETF-POLYGON-DUMMY>
(CONST 35) = SETF
(CONST 36) = SYSTEM::%SET-DOCUMENTATION
(CONST 37) = #<COMPILED-CLOSURE SETF-POLYGON-PTS>
(CONST 38) = #<COMPILED-CLOSURE SETF-POLYGON-EDGES>
(CONST 39) = STRUCTURE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
144 byte-code instructions:
0     (CONST&PUSH 0)                      ; POLYGON
1     (CONST&PUSH 1)                      ; STRUCTURE-OBJECT
2     (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
3     (PUSH-UNBOUND 1)
5     (CALLS2&PUSH 132)                   ; GET
7     (CONST 3)                           ; 0
8     (SVREF)
9     (CONS&PUSH)
10    (CONST&PUSH 4)                      ; %MAKE-POLYGON
11    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
13    (CONST&PUSH 4)                      ; %MAKE-POLYGON
14    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE %MAKE-POLYGON>
15    (CALLS2 130)                        ; SYSTEM::%PUTD
17    (CONST&PUSH 0)                      ; POLYGON
18    (CONST&PUSH 2)                      ; SYSTEM::DEFSTRUCT-DESCRIPTION
19    (LOAD&PUSH 2)
20    (CONST&PUSH 7)                      ; LIST
21    (NIL&PUSH)
22    (CONST&PUSH 8)                      ; (#(DUMMY # ...) #(PTS # ...) ...)
23    (CALLSR&PUSH 4 0)                   ; VECTOR
26    (CALLS2 136)                        ; SYSTEM::%PUT
28    (SKIP 1)
30    (CONST&PUSH 9)                      ; (INLINE COPY-POLYGON)
31    (CALLS1 90)                         ; PROCLAIM
33    (CONST&PUSH 10)                     ; COPY-POLYGON
34    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
36    (CONST&PUSH 10)                     ; COPY-POLYGON
37    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
38    (CONST&PUSH 12)                     ; ((STRUCTURE) (DECLARE #) ...)
39    (CALLS2 136)                        ; SYSTEM::%PUT
41    (CONST&PUSH 10)                     ; COPY-POLYGON
42    (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE COPY-POLYGON>
43    (CALLS2 130)                        ; SYSTEM::%PUTD
45    (CONST&PUSH 14)                     ; (FUNCTION POLYGON-DUMMY ...)
46    (CALLS1 90)                         ; PROCLAIM
48    (CONST&PUSH 15)                     ; (INLINE POLYGON-DUMMY)
49    (CALLS1 90)                         ; PROCLAIM
51    (CONST&PUSH 16)                     ; POLYGON-DUMMY
52    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
54    (CONST&PUSH 16)                     ; POLYGON-DUMMY
55    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
56    (CONST&PUSH 17)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
57    (CALLS2 136)                        ; SYSTEM::%PUT
59    (CONST&PUSH 16)                     ; POLYGON-DUMMY
60    (CONST&PUSH 18)                     ; #<COMPILED-CLOSURE POLYGON-DUMMY>
61    (CALLS2 130)                        ; SYSTEM::%PUTD
63    (CONST&PUSH 16)                     ; POLYGON-DUMMY
64    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
65    (CONST&PUSH 0)                      ; POLYGON
66    (CALLS2 136)                        ; SYSTEM::%PUT
68    (CONST&PUSH 20)                     ; (FUNCTION POLYGON-PTS (POLYGON) T)
69    (CALLS1 90)                         ; PROCLAIM
71    (CONST&PUSH 21)                     ; (INLINE POLYGON-PTS)
72    (CALLS1 90)                         ; PROCLAIM
74    (CONST&PUSH 22)                     ; POLYGON-PTS
75    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
77    (CONST&PUSH 22)                     ; POLYGON-PTS
78    (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
79    (CONST&PUSH 23)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
80    (CALLS2 136)                        ; SYSTEM::%PUT
82    (CONST&PUSH 22)                     ; POLYGON-PTS
83    (CONST&PUSH 24)                     ; #<COMPILED-CLOSURE POLYGON-PTS>
84    (CALLS2 130)                        ; SYSTEM::%PUTD
86    (CONST&PUSH 22)                     ; POLYGON-PTS
87    (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
88    (CONST&PUSH 0)                      ; POLYGON
89    (CALLS2 136)                        ; SYSTEM::%PUT
91    (CONST&PUSH 25)                     ; (FUNCTION POLYGON-EDGES ...)
92    (CALLS1 90)                         ; PROCLAIM
94    (CONST&PUSH 26)                     ; (INLINE POLYGON-EDGES)
95    (CALLS1 90)                         ; PROCLAIM
97    (CONST&PUSH 27)                     ; POLYGON-EDGES
98    (CALL1 5)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
100   (CONST&PUSH 27)                     ; POLYGON-EDGES
101   (CONST&PUSH 11)                     ; SYSTEM::INLINE-EXPANSION
102   (CONST&PUSH 28)                     ; ((SYSTEM::OBJECT) (DECLARE #) ...)
103   (CALLS2 136)                        ; SYSTEM::%PUT
105   (CONST&PUSH 27)                     ; POLYGON-EDGES
106   (CONST&PUSH 29)                     ; #<COMPILED-CLOSURE POLYGON-EDGES>
107   (CALLS2 130)                        ; SYSTEM::%PUTD
109   (CONST&PUSH 27)                     ; POLYGON-EDGES
110   (CONST&PUSH 19)                     ; SYSTEM::DEFSTRUCT-READER
111   (CONST&PUSH 0)                      ; POLYGON
112   (CALLS2 136)                        ; SYSTEM::%PUT
114   (CONST&PUSH 16)                     ; POLYGON-DUMMY
115   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
117   (CALLS2 137)                        ; REMPROP
119   (CONST&PUSH 16)                     ; POLYGON-DUMMY
120   (CONST&PUSH 31)                     ; SYSTEM::SETF-EXPANDER
122   (CONST&PUSH 32)                     ; -1
124   (CONST&PUSH 33)                     ; 1
126   (CONST 34)                          ; #<COMPILED-CLOSURE SETF-POLYGON-DUMMY>
128   (LIST*&PUSH 2)
130   (CALLS2 136)                        ; SYSTEM::%PUT
132   (CONST&PUSH 16)                     ; POLYGON-DUMMY
133   (CONST&PUSH 35)                     ; SETF
135   (NIL&PUSH)
136   (CALL 3 36)                         ; SYSTEM::%SET-DOCUMENTATION
139   (CONST&PUSH 16)                     ; POLYGON-DUMMY
140   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
142   (CONST&PUSH 0)                      ; POLYGON
143   (CALLS2 136)                        ; SYSTEM::%PUT
145   (CONST&PUSH 22)                     ; POLYGON-PTS
146   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
148   (CALLS2 137)                        ; REMPROP
150   (CONST&PUSH 22)                     ; POLYGON-PTS
151   (CONST&PUSH 31)                     ; SYSTEM::SETF-EXPANDER
153   (CONST&PUSH 32)                     ; -1
155   (CONST&PUSH 33)                     ; 1
157   (CONST 37)                          ; #<COMPILED-CLOSURE SETF-POLYGON-PTS>
159   (LIST*&PUSH 2)
161   (CALLS2 136)                        ; SYSTEM::%PUT
163   (CONST&PUSH 22)                     ; POLYGON-PTS
164   (CONST&PUSH 35)                     ; SETF
166   (NIL&PUSH)
167   (CALL 3 36)                         ; SYSTEM::%SET-DOCUMENTATION
170   (CONST&PUSH 22)                     ; POLYGON-PTS
171   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
173   (CONST&PUSH 0)                      ; POLYGON
174   (CALLS2 136)                        ; SYSTEM::%PUT
176   (CONST&PUSH 27)                     ; POLYGON-EDGES
177   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
179   (CALLS2 137)                        ; REMPROP
181   (CONST&PUSH 27)                     ; POLYGON-EDGES
182   (CONST&PUSH 31)                     ; SYSTEM::SETF-EXPANDER
184   (CONST&PUSH 32)                     ; -1
186   (CONST&PUSH 33)                     ; 1
188   (CONST 38)                          ; #<COMPILED-CLOSURE SETF-POLYGON-EDGES>
190   (LIST*&PUSH 2)
192   (CALLS2 136)                        ; SYSTEM::%PUT
194   (CONST&PUSH 27)                     ; POLYGON-EDGES
195   (CONST&PUSH 35)                     ; SETF
197   (NIL&PUSH)
198   (CALL 3 36)                         ; SYSTEM::%SET-DOCUMENTATION
201   (CONST&PUSH 27)                     ; POLYGON-EDGES
202   (CONST&PUSH 30)                     ; SYSTEM::DEFSTRUCT-WRITER
204   (CONST&PUSH 0)                      ; POLYGON
205   (CALLS2 136)                        ; SYSTEM::%PUT
207   (CONST&PUSH 0)                      ; POLYGON
208   (CONST&PUSH 39)                     ; STRUCTURE
210   (NIL&PUSH)
211   (CALL 3 36)                         ; SYSTEM::%SET-DOCUMENTATION
214   (CONST 0)                           ; POLYGON
215   (SKIP&RET 1)


Disassembly of function %MAKE-POLYGON
(CONST 0) = 3
(CONST 1) = 0
(CONST 2) = ($POLYGON SIMP)
(CONST 3) = SYSTEM::%SETNTH
(CONST 4) = 1
(CONST 5) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
17 byte-code instructions:
0     (CONST&PUSH 0)                      ; 3
1     (PUSH-UNBOUND 1)
3     (CALLS1&PUSH 157)                   ; MAKE-LIST
5     (CONST&PUSH 1)                      ; 0
6     (LOAD&PUSH 1)
7     (CONST&PUSH 2)                      ; ($POLYGON SIMP)
8     (CALL 3 3)                          ; SYSTEM::%SETNTH
11    (CONST&PUSH 4)                      ; 1
12    (LOAD&PUSH 1)
13    (LOAD&PUSH 5)
14    (CALL 3 3)                          ; SYSTEM::%SETNTH
17    (CONST&PUSH 5)                      ; 2
18    (LOAD&PUSH 1)
19    (LOAD&PUSH 4)
20    (CALL 3 3)                          ; SYSTEM::%SETNTH
23    (POP)
24    (SKIP&RET 3)


Disassembly of function COPY-POLYGON
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS1 158)                        ; COPY-LIST
3     (SKIP&RET 2)


Disassembly of function POLYGON-DUMMY
(CONST 0) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function POLYGON-PTS
(CONST 0) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function POLYGON-EDGES
(CONST 0) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; 2
1     (LOAD&PUSH 2)
2     (CALLS1 148)                        ; NTH
4     (SKIP&RET 2)


Disassembly of function SETF-POLYGON-DUMMY
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 0
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-POLYGON-PTS
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 1
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function SETF-POLYGON-EDGES
(CONST 0) = SETF
(CONST 1) = NTH
(CONST 2) = 2
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD 2)
1     (CDR)
2     (CAR&PUSH)
3     (CONST&PUSH 0)                      ; SETF
4     (CONST&PUSH 1)                      ; NTH
5     (CONST&PUSH 2)                      ; 2
6     (LOAD&PUSH 3)
7     (LIST&PUSH 3)
9     (LOAD&PUSH 4)
10    (LIST 3)
12    (SKIP&RET 4)


Disassembly of function #:|(EVAL-WHEN (COMPILE EVAL) (DEFMACRO F* # ...) ...)-22|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFUN DRAW3D (F MINX MAXX ...) ...)-23|
(CONST 0) = DRAW3D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DRAW3D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRAW3D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRAW3D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DRAW3D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DRAW3D
8     (SKIP&RET 1)


Disassembly of function DRAW3D
(CONST 0) = F
(CONST 1) = 0.0
(CONST 2) = X
(CONST 3) = Y
(CONST 4) = NX
(CONST 5) = 0
(CONST 6) = L
(CONST 7) = 12
(CONST 8) = 3
(CONST 9) = LONG-FLOAT
(CONST 10) = SLOOP::SLOOP-TYPE-ERROR
(CONST 11) = J
(CONST 12) = 2
(CONST 13) = ($POLYGON)
(CONST 14) = MAKE-GRID-VERTICES
7 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (J F Y X L NX)
writes special variables : (J L X Y)
134 byte-code instructions:
0     (LOAD 7)
1     (BIND 0)                            ; F
3     (LOAD&PUSH 8)
4     (LOAD&PUSH 10)
5     (CALLSR&PUSH 1 54)                  ; -
8     (LOAD&PUSH 6)
9     (CALLSR&PUSH 1 56)                  ; /
12    (CONST 1)                           ; 0.0
13    (BIND 2)                            ; X
15    (CONST 1)                           ; 0.0
16    (BIND 3)                            ; Y
18    (LOAD&PUSH 13)
19    (LOAD&PUSH 15)
20    (CALLSR&PUSH 1 54)                  ; -
23    (LOAD&PUSH 12)
24    (CALLSR&PUSH 1 56)                  ; /
27    (LOAD&PUSH 13)
28    (CALLS2 150)                        ; 1+
30    (BIND 4)                            ; NX
32    (CONST 5)                           ; 0
33    (BIND 6)                            ; L
35    (LOAD&INC&PUSH 18)
37    (CONST&PUSH 7)                      ; 12
38    (CONST&PUSH 8)                      ; 3
39    (GETVALUE&PUSH 4)                   ; NX
41    (CALLSR&PUSH 2 55)                  ; *
44    (LOAD&PUSH 2)
45    (CALLSR&PUSH 2 55)                  ; *
48    (CALLSR&PUSH 2 53)                  ; +
51    (T&PUSH)
52    (PUSH-UNBOUND 6)
54    (CONST&PUSH 8)                      ; 3
55    (GETVALUE&PUSH 4)                   ; NX
57    (CALLSR&PUSH 2 55)                  ; *
60    (LOAD&PUSH 9)
61    (CALLSR&STORE 2 55 2)               ; *
65    (CONST 9)                           ; LONG-FLOAT
66    (STORE 5)
67    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
69    (CONST&PUSH 5)                      ; 0
70    (LOAD&PUSH 2)
71    (CALLS2&JMPIF 13 L76)               ; SYSTEM::FIXNUMP
74    (CALL0 10)                          ; SLOOP::SLOOP-TYPE-ERROR
76    L76
76    (LOAD&PUSH 2)
77    (LOAD 1)
78    (BIND 11)                           ; J
80    (LOAD 28)
82    (SETVALUE 3)                        ; Y
84    (JMP L206)
87    L87
87    (LOAD 30)
89    (SETVALUE 2)                        ; X
91    (CONST&PUSH 5)                      ; 0
92    (GETVALUE&PUSH 4)                   ; NX
94    (CALLS2&JMPIF 13 L99)               ; SYSTEM::FIXNUMP
97    (CALL0 10)                          ; SLOOP::SLOOP-TYPE-ERROR
99    L99
99    (GETVALUE&PUSH 4)                   ; NX
101   (JMP L183)
104   L104
104   (CONST&PUSH 8)                      ; 3
105   (GETVALUE&PUSH 6)                   ; L
107   (CALLSR&PUSH 2 55)                  ; *
110   (CALLSR&PUSH 1 53)                  ; +
113   (GETVALUE&PUSH 2)                   ; X
115   (LOAD&PUSH 9)
116   (LOAD&PUSH 2)
117   (LOAD&PUSH 2)
118   (CALLSR 1 2)                        ; SYSTEM::STORE
121   (SKIP 2)
123   (CONST&PUSH 8)                      ; 3
124   (GETVALUE&PUSH 6)                   ; L
126   (CALLSR&PUSH 2 55)                  ; *
129   (CALLS2&PUSH 150)                   ; 1+
131   (GETVALUE&PUSH 3)                   ; Y
133   (LOAD&PUSH 9)
134   (LOAD&PUSH 2)
135   (LOAD&PUSH 2)
136   (CALLSR 1 2)                        ; SYSTEM::STORE
139   (SKIP 2)
141   (CONST&PUSH 12)                     ; 2
142   (CONST&PUSH 8)                      ; 3
143   (GETVALUE&PUSH 6)                   ; L
145   (CALLSR&PUSH 2 55)                  ; *
148   (CALLSR&PUSH 2 53)                  ; +
151   (GETVALUE&PUSH 0)                   ; F
153   (GETVALUE&PUSH 2)                   ; X
155   (GETVALUE&PUSH 3)                   ; Y
157   (FUNCALL&PUSH 2)
159   (LOAD&PUSH 9)
160   (LOAD&PUSH 2)
161   (LOAD&PUSH 2)
162   (CALLSR 1 2)                        ; SYSTEM::STORE
165   (SKIP 2)
167   (GETVALUE&PUSH 6)                   ; L
169   (CALLS2 150)                        ; 1+
171   (SETVALUE 6)                        ; L
173   (GETVALUE&PUSH 2)                   ; X
175   (LOAD&PUSH 23)
176   (CALLSR 2 53)                       ; +
179   (SETVALUE 2)                        ; X
181   (LOAD&INC&STORE 1)
183   L183
183   (LOAD&PUSH 1)
184   (LOAD&PUSH 1)
185   (CALLSR&JMPIFNOT 1 50 L104)         ; >=
190   (SKIP 2)
192   (GETVALUE&PUSH 3)                   ; Y
194   (LOAD&PUSH 14)
195   (CALLSR 2 53)                       ; +
198   (SETVALUE 3)                        ; Y
200   (GETVALUE&PUSH 11)                  ; J
202   (CALLS2 150)                        ; 1+
204   (SETVALUE 11)                       ; J
206   L206
206   (GETVALUE&PUSH 11)                  ; J
208   (LOAD&PUSH 4)
209   (CALLSR&JMPIFNOT 1 50 L87)          ; >=
214   (UNBIND1)
215   (SKIP 2)
217   (CONST&PUSH 13)                     ; ($POLYGON)
218   (LOAD&PUSH 1)
219   (LOAD&PUSH 23)
220   (LOAD&PUSH 23)
221   (CALL2&PUSH 14)                     ; MAKE-GRID-VERTICES
223   (LIST 3)
225   (SKIP 2)
227   (UNBIND 2)
229   (SKIP 1)
231   (UNBIND 2)
233   (SKIP 1)
235   (UNBIND1)
236   (SKIP&RET 8)


Disassembly of function #:|(DEFUN MAKE-GRID-VERTICES (NX NY) ...)-24|
(CONST 0) = MAKE-GRID-VERTICES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAKE-GRID-VERTICES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAKE-GRID-VERTICES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAKE-GRID-VERTICES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAKE-GRID-VERTICES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAKE-GRID-VERTICES
8     (SKIP&RET 1)


Disassembly of function MAKE-GRID-VERTICES
(CONST 0) = NX
(CONST 1) = 15
(CONST 2) = 5
(CONST 3) = (MOD 65000)
(CONST 4) = M
(CONST 5) = 0
(CONST 6) = SLOOP::SLOOP-TYPE-ERROR
(CONST 7) = K
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (M K NX)
writes special variables : (M K)
107 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; NX
3     (CONST&PUSH 1)                      ; 15
4     (CONST&PUSH 2)                      ; 5
5     (GETVALUE&PUSH 0)                   ; NX
7     (CALLSR&PUSH 2 55)                  ; *
10    (LOAD&PUSH 6)
11    (CALLSR&PUSH 2 55)                  ; *
14    (CALLSR&PUSH 2 53)                  ; +
17    (T&PUSH)
18    (CONST&PUSH 3)                      ; (MOD 65000)
19    (PUSH-UNBOUND 5)
21    (CONST&PUSH 2)                      ; 5
22    (GETVALUE&PUSH 0)                   ; NX
24    (CALLSR&PUSH 2 55)                  ; *
27    (LOAD&PUSH 13)
28    (CALLSR&STORE 2 55 2)               ; *
32    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
34    (GETVALUE 0)                        ; NX
36    (BIND 4)                            ; M
38    (GETVALUE&PUSH 0)                   ; NX
40    (CALLS2&PUSH 150)                   ; 1+
42    (CONST&PUSH 5)                      ; 0
43    (CONST&PUSH 5)                      ; 0
44    (LOAD&PUSH 6)
45    (CALLS2&PUSH 71)                    ; LENGTH
47    (LOAD&PUSH 0)
48    (CALLS2&JMPIF 13 L53)               ; SYSTEM::FIXNUMP
51    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
53    L53
53    (LOAD 1)
54    (BIND 7)                            ; K
56    (JMP L163)
59    L59
59    (GETVALUE&PUSH 7)                   ; K
61    (LOAD&PUSH 11)
62    (LOAD&PUSH 1)
63    (LOAD&PUSH 8)
64    (CALLSR 1 2)                        ; SYSTEM::STORE
67    (SKIP 1)
69    (GETVALUE&PUSH 7)                   ; K
71    (CALLS2 150)                        ; 1+
73    (SETVALUE 7)                        ; K
75    (PUSH)
76    (LOAD&PUSH 7)
77    (LOAD&PUSH 7)
78    (CALLSR&PUSH 2 53)                  ; +
81    (LOAD&PUSH 12)
82    (LOAD&PUSH 2)
83    (LOAD&PUSH 2)
84    (CALLSR 1 2)                        ; SYSTEM::STORE
87    (SKIP 2)
89    (GETVALUE&PUSH 7)                   ; K
91    (CALLS2 150)                        ; 1+
93    (SETVALUE 7)                        ; K
95    (PUSH)
96    (LOAD&PUSH 7)
97    (LOAD&INC&STORE 7)
99    (PUSH)
100   (CALLSR&PUSH 2 53)                  ; +
103   (LOAD&PUSH 12)
104   (LOAD&PUSH 2)
105   (LOAD&PUSH 2)
106   (CALLSR 1 2)                        ; SYSTEM::STORE
109   (SKIP 2)
111   (GETVALUE&PUSH 7)                   ; K
113   (CALLS2 150)                        ; 1+
115   (SETVALUE 7)                        ; K
117   (PUSH)
118   (LOAD&PUSH 11)
119   (LOAD&PUSH 1)
120   (LOAD&PUSH 8)
121   (CALLSR 1 2)                        ; SYSTEM::STORE
124   (SKIP 1)
126   (GETVALUE&PUSH 7)                   ; K
128   (CALLS2 150)                        ; 1+
130   (SETVALUE 7)                        ; K
132   (PUSH)
133   (LOAD&PUSH 11)
134   (LOAD&PUSH 1)
135   (CONST&PUSH 5)                      ; 0
136   (CALLSR 1 2)                        ; SYSTEM::STORE
139   (SKIP 1)
141   (GETVALUE&PUSH 4)                   ; M
143   (CALLS2 151)                        ; 1-
145   (SETVALUE 4)                        ; M
147   (PUSH)
148   (JMPIFNOTEQTO 5 L157)               ; 0
151   (GETVALUE 0)                        ; NX
153   (SETVALUE 4)                        ; M
155   (LOAD&INC&STORE 5)
157   L157
157   (GETVALUE&PUSH 7)                   ; K
159   (CALLS2 150)                        ; 1+
161   (SETVALUE 7)                        ; K
163   L163
163   (GETVALUE&PUSH 7)                   ; K
165   (LOAD&PUSH 4)
166   (CALLSR&JMPIFNOT 1 50 L59)          ; >=
171   (UNBIND1)
172   (SKIP 2)
174   (LOAD 5)
175   (SKIP 2)
177   (UNBIND1)
178   (SKIP 1)
180   (UNBIND1)
181   (SKIP&RET 3)


Disassembly of function #:|(DEFUN ADD-AXES (PTS VERT) ...)-25|
(CONST 0) = ADD-AXES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADD-AXES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADD-AXES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADD-AXES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADD-AXES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADD-AXES
8     (SKIP&RET 1)


Disassembly of function ADD-AXES
(CONST 0) = 1/3
(CONST 1) = -3
(CONST 2) = 9
(CONST 3) = 4
(CONST 4) = 0
(CONST 5) = $AXES_LENGTH
(CONST 6) = 0.0
(CONST 7) = 15
(CONST 8) = 5
(CONST 9) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($AXES_LENGTH)
53 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1/3
1     (LOAD&PUSH 3)
2     (CALLS2&PUSH 71)                    ; LENGTH
4     (CALLSR&PUSH 2 55)                  ; *
7     (CONST&PUSH 1)                      ; -3
8     (JMP L30)
10    L10
10    (GETVALUE 5)                        ; $AXES_LENGTH
12    (JMP L22)
14    L14
14    (LOAD&PUSH 0)
15    (CONST&PUSH 3)                      ; 4
16    (CALLS2&PUSH 183)                   ; MOD
18    (JMPIFEQTO 4 L10)                   ; 0
21    (CONST 6)                           ; 0.0
22    L22
22    (PUSH)
23    (LOAD&PUSH 5)
24    (PUSH-UNBOUND 1)
26    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
28    (LOAD&INC&STORE 0)
30    L30
30    (LOAD&PUSH 0)
31    (CONST&PUSH 2)                      ; 9
32    (CALLSR&JMPIFNOT 1 50 L14)          ; >=
36    (SKIP 1)
38    (CONST&PUSH 4)                      ; 0
39    (JMP L67)
41    L41
41    (LOAD&PUSH 1)
42    (LOAD&PUSH 1)
43    (CONST&PUSH 8)                      ; 5
44    (CALLS2&PUSH 180)                   ; CEILING
46    (CALLSR 2 53)                       ; +
49    (JMP L59)
51    L51
51    (LOAD&PUSH 0)
52    (CONST&PUSH 8)                      ; 5
53    (CALLS2&PUSH 183)                   ; MOD
55    (JMPIFEQTO 9 L41)                   ; 1
58    (LOAD 1)
59    L59
59    (PUSH)
60    (LOAD&PUSH 4)
61    (PUSH-UNBOUND 1)
63    (CALLS1 28)                         ; VECTOR-PUSH-EXTEND
65    (LOAD&INC&STORE 0)
67    L67
67    (LOAD&PUSH 0)
68    (CONST&PUSH 7)                      ; 15
69    (CALLSR&JMPIFNOT 1 50 L51)          ; >=
73    (NIL)
74    (SKIP&RET 5)


Disassembly of function #:|(DEFUN $ROTATION1 (PHI TH) ...)-26|
(CONST 0) = $ROTATION1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ROTATION1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ROTATION1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ROTATION1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ROTATION1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ROTATION1
8     (SKIP&RET 1)


Disassembly of function $ROTATION1
(CONST 0) = ($MATRIX SIMP)
(CONST 1) = (MLIST SIMP)
(CONST 2) = -1.0
(CONST 3) = (MLIST SIMP)
(CONST 4) = (0.0)
(CONST 5) = (MLIST SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
36 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 161)                   ; SIN
3     (LOAD&PUSH 3)
4     (CALLS2&PUSH 162)                   ; COS
6     (LOAD&PUSH 3)
7     (CALLS2&PUSH 161)                   ; SIN
9     (LOAD&PUSH 4)
10    (CALLS2&PUSH 162)                   ; COS
12    (CONST&PUSH 0)                      ; ($MATRIX SIMP)
13    (CONST&PUSH 1)                      ; (MLIST SIMP)
14    (LOAD&PUSH 4)
15    (LOAD&PUSH 3)
16    (CALLSR&PUSH 2 55)                  ; *
19    (CONST&PUSH 2)                      ; -1.0
20    (LOAD&PUSH 6)
21    (LOAD&PUSH 6)
22    (CALLSR&PUSH 3 55)                  ; *
25    (LOAD&PUSH 7)
26    (LIST&PUSH 4)
28    (CONST&PUSH 3)                      ; (MLIST SIMP)
29    (LOAD&PUSH 4)
30    (LOAD&PUSH 4)
31    (CONST 4)                           ; (0.0)
32    (LIST*&PUSH 3)
34    (CONST&PUSH 5)                      ; (MLIST SIMP)
35    (LOAD&PUSH 7)
36    (LOAD&PUSH 5)
37    (CALLSR&PUSH 2 55)                  ; *
40    (CALLSR&PUSH 0 54)                  ; -
43    (LOAD&PUSH 8)
44    (LOAD&PUSH 7)
45    (CALLSR&PUSH 2 55)                  ; *
48    (LOAD&PUSH 8)
49    (LIST&PUSH 4)
51    (LIST 4)
53    (SKIP&RET 7)


Disassembly of function #:|(DEFUN $ROTATE_PTS (PTS ROTATION-MATRIX) ...)-27|
(CONST 0) = $ROTATE_PTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ROTATE_PTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ROTATE_PTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ROTATE_PTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ROTATE_PTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ROTATE_PTS
8     (SKIP&RET 1)


Disassembly of function $ROTATE_PTS
(CONST 0) = $MATRIXP
(CONST 1) = "second arg not matrix"
(CONST 2) = *ROT*
(CONST 3) = L
(CONST 4) = 0.0
(CONST 5) = X
(CONST 6) = Y
(CONST 7) = Z
(CONST 8) = 0
(CONST 9) = $COPY_PTS
(CONST 10) = J
(CONST 11) = 2
(CONST 12) = A
(CONST 13) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L A Z Y X J *ROT*)
writes special variables : (J A Z Y X)
102 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&JMPIFNOT 0 L33)              ; $MATRIXP
4     (GETVALUE&PUSH 2)                   ; *ROT*
6     (LOAD&PUSH 3)
7     (CALLS2 71)                         ; LENGTH
9     (BIND 3)                            ; L
11    (CONST 4)                           ; 0.0
12    (BIND 5)                            ; X
14    (CONST 4)                           ; 0.0
15    (BIND 6)                            ; Y
17    (CONST 4)                           ; 0.0
18    (BIND 7)                            ; Z
20    (LOAD&PUSH 14)
21    (GETVALUE&PUSH 2)                   ; *ROT*
23    (CONST&PUSH 8)                      ; 0
24    (CALL 3 9)                          ; $COPY_PTS
27    (CONST 8)                           ; 0
28    (BIND 10)                           ; J
30    (JMP L175)
33    L33
33    (CONST&PUSH 1)                      ; "second arg not matrix"
34    (CALLSR 0 29)                       ; ERROR
37    L37
37    (LOAD&PUSH 18)
38    (GETVALUE&PUSH 10)                  ; J
40    (CALLSR 1 1)                        ; AREF
43    (SETVALUE 5)                        ; X
45    (LOAD&PUSH 18)
46    (GETVALUE&PUSH 10)                  ; J
48    (CALLS2&PUSH 150)                   ; 1+
50    (CALLSR 1 1)                        ; AREF
53    (SETVALUE 6)                        ; Y
55    (LOAD&PUSH 18)
56    (CONST&PUSH 11)                     ; 2
57    (GETVALUE&PUSH 10)                  ; J
59    (CALLSR&PUSH 2 53)                  ; +
62    (CALLSR 1 1)                        ; AREF
65    (SETVALUE 7)                        ; Z
67    (CONST&PUSH 8)                      ; 0
68    (CONST 4)                           ; 0.0
69    (BIND 12)                           ; A
71    (JMP L157)
74    L74
74    (GETVALUE&PUSH 5)                   ; X
76    (LOAD&PUSH 20)
77    (CONST&PUSH 13)                     ; 3
78    (LOAD&PUSH 6)
79    (CALLSR&PUSH 2 55)                  ; *
82    (CALLSR&PUSH 1 53)                  ; +
85    (CALLSR&PUSH 1 1)                   ; AREF
88    (CALLSR 2 55)                       ; *
91    (SETVALUE 12)                       ; A
93    (PUSH)
94    (GETVALUE&PUSH 6)                   ; Y
96    (LOAD&PUSH 21)
97    (CONST&PUSH 13)                     ; 3
98    (LOAD&PUSH 7)
99    (CALLSR&PUSH 2 55)                  ; *
102   (CALLS2&PUSH 150)                   ; 1+
104   (CALLSR&PUSH 1 1)                   ; AREF
107   (CALLSR&PUSH 2 55)                  ; *
110   (CALLSR 2 53)                       ; +
113   (SETVALUE 12)                       ; A
115   (PUSH)
116   (GETVALUE&PUSH 7)                   ; Z
118   (LOAD&PUSH 21)
119   (CONST&PUSH 11)                     ; 2
120   (CONST&PUSH 13)                     ; 3
121   (LOAD&PUSH 8)
122   (CALLSR&PUSH 2 55)                  ; *
125   (CALLSR&PUSH 2 53)                  ; +
128   (CALLSR&PUSH 1 1)                   ; AREF
131   (CALLSR&PUSH 2 55)                  ; *
134   (CALLSR 2 53)                       ; +
137   (SETVALUE 12)                       ; A
139   (GETVALUE&PUSH 10)                  ; J
141   (LOAD&PUSH 4)
142   (CALLSR&PUSH 2 53)                  ; +
145   (GETVALUE&PUSH 12)                  ; A
147   (LOAD&PUSH 24)
148   (LOAD&PUSH 2)
149   (LOAD&PUSH 2)
150   (CALLSR 1 2)                        ; SYSTEM::STORE
153   (SKIP 2)
155   (LOAD&INC&STORE 3)
157   L157
157   (LOAD&PUSH 3)
158   (CONST&PUSH 13)                     ; 3
159   (CALLSR&JMPIFNOT 1 50 L74)          ; >=
164   (UNBIND1)
165   (SKIP 1)
167   (CONST&PUSH 13)                     ; 3
168   (GETVALUE&PUSH 10)                  ; J
170   (CALLSR 2 53)                       ; +
173   (SETVALUE 10)                       ; J
175   L175
175   (GETVALUE&PUSH 10)                  ; J
177   (GETVALUE&PUSH 3)                   ; L
179   (CALLSR&JMPIF 1 47 L37)             ; <
184   (NIL)
185   (UNBIND 5)
187   (SKIP&RET 4)


Disassembly of function #:|(DEFUN $ROTATE_LIST (X) ...)-28|
(CONST 0) = $ROTATE_LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ROTATE_LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ROTATE_LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ROTATE_LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ROTATE_LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ROTATE_LIST
8     (SKIP&RET 1)


Disassembly of function $ROTATE_LIST
(CONST 0) = X
(CONST 1) = $LISTP
(CONST 2) = 1
(CONST 3) = MBAGP
(CONST 4) = $ROT
(CONST 5) = NCMUL2
(CONST 6) = $LIST_MATRIX_ENTRIES
(CONST 7) = $ROTATE_LIST
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ROT X)
30 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALL1&JMPIFNOT 1 L16)              ; $LISTP
8     (CONST&PUSH 2)                      ; 1
9     (GETVALUE&PUSH 0)                   ; X
11    (CALLS1&PUSH 148)                   ; NTH
13    (CALL1&JMPIFNOT 3 L25)              ; MBAGP
16    L16
16    (GETVALUE&PUSH 0)                   ; X
18    (CALL1&JMPIF 3 L35)                 ; MBAGP
21    (NIL)
22    L22
22    (UNBIND1)
23    (SKIP&RET 2)
25    L25
25    (GETVALUE&PUSH 4)                   ; $ROT
27    (GETVALUE&PUSH 0)                   ; X
29    (CALL2&PUSH 5)                      ; NCMUL2
31    (CALL1 6)                           ; $LIST_MATRIX_ENTRIES
33    (JMP L22)
35    L35
35    (GETVALUE 0)                        ; X
37    (CAR&PUSH)
38    (CONST&PUSH 7)                      ; $ROTATE_LIST
39    (GETVALUE 0)                        ; X
41    (CDR&PUSH)
42    (CALLSR 0 22)                       ; MAPCAR
45    (CONS)
46    (JMP L22)


Disassembly of function #:|(DEFUN $GET_RANGE (PTS K &AUX ...) ...)-29|
(CONST 0) = $GET_RANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GET_RANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GET_RANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GET_RANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GET_RANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GET_RANGE
8     (SKIP&RET 1)


Disassembly of function $GET_RANGE
(CONST 0) = K
(CONST 1) = 0.0
(CONST 2) = Z
(CONST 3) = MOST-NEGATIVE-LONG-FLOAT
(CONST 4) = MOST-POSITIVE-LONG-FLOAT
(CONST 5) = SLOOP::SLOOP-TYPE-ERROR
(CONST 6) = 3
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Z K MOST-POSITIVE-LONG-FLOAT MOST-NEGATIVE-LONG-FLOAT)
writes special variable : (Z)
53 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; K
3     (CONST 1)                           ; 0.0
4     (BIND 2)                            ; Z
6     (GETVALUE&PUSH 3)                   ; MOST-NEGATIVE-LONG-FLOAT
8     (GETVALUE&PUSH 4)                   ; MOST-POSITIVE-LONG-FLOAT
10    (GETVALUE&PUSH 0)                   ; K
12    (CALLS2&JMPIF 13 L17)               ; SYSTEM::FIXNUMP
15    (CALL0 5)                           ; SLOOP::SLOOP-TYPE-ERROR
17    L17
17    (GETVALUE&PUSH 0)                   ; K
19    (LOAD&PUSH 11)
20    (CALLS2&PUSH 71)                    ; LENGTH
22    (CONST&PUSH 6)                      ; 3
23    (LOAD&PUSH 1)
24    (CALLSR&PUSH 2 53)                  ; +
27    (CALLS2&JMPIF 13 L66)               ; SYSTEM::FIXNUMP
30    (CALL0 5)                           ; SLOOP::SLOOP-TYPE-ERROR
32    (JMP L66)
34    L34
34    (LOAD&PUSH 12)
35    (LOAD&PUSH 2)
36    (CALLSR 1 1)                        ; AREF
39    (SETVALUE 2)                        ; Z
41    (PUSH)
42    (LOAD&PUSH 3)
43    (CALLSR&JMPIFNOT 1 47 L50)          ; <
47    (GETVALUE 2)                        ; Z
49    (STORE 2)
50    L50
50    (GETVALUE&PUSH 2)                   ; Z
52    (LOAD&PUSH 4)
53    (CALLSR&JMPIFNOT 1 48 L60)          ; >
57    (GETVALUE 2)                        ; Z
59    (STORE 3)
60    L60
60    (CONST&PUSH 6)                      ; 3
61    (LOAD&PUSH 2)
62    (CALLSR&STORE 2 53 1)               ; +
66    L66
66    (LOAD&PUSH 1)
67    (LOAD&PUSH 1)
68    (CALLSR&JMPIFNOT 1 50 L34)          ; >=
72    (SKIP 2)
74    (LOAD&PUSH 0)
75    (LOAD&PUSH 2)
76    (LOAD&PUSH 3)
77    (LOAD&PUSH 3)
78    (CALLSR&PUSH 1 54)                  ; -
81    (LIST 3)
83    (SKIP 2)
85    (UNBIND 2)
87    (SKIP&RET 3)


Disassembly of function #:|(DEFUN ADD-PS-FINISH (OPTS) ...)-30|
(CONST 0) = ADD-PS-FINISH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ADD-PS-FINISH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ADD-PS-FINISH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ADD-PS-FINISH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ADD-PS-FINISH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ADD-PS-FINISH
8     (SKIP&RET 1)


Disassembly of function ADD-PS-FINISH
(CONST 0) = 
"/xr .30 def
/xb 0.60 def
/xg .60  def
/myset { .005 mul dup xr add exch
 dup xb add exch
 xg add
setrgbcolor} def

/myfinish { myset  gsave fill grestore 0 setgray stroke  } def"
(CONST 1) = "/myfinish {.9 setgray gsave fill grestore .1 setgray stroke  } def"
(CONST 2) = P
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
9 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     (CONST 1)                           ; "/myfinish {.9 setgray gsave fill grestore .1 setgray stroke  } def"
4     L4
4     (PUSH)
5     (CALL1 2)                           ; P
7     (SKIP&RET 2)
9     L9
9     (CONST 0)                           ; "/xr .30 def
/xb 0.60 def
/xg .60  def
/myset { .005 mul dup xr add exch
 dup xb add exch
 xg add
setrgbcolor} def

/myfinish { myset  gsave fill grestore 0 setgray stroke  } def"
10    (JMP L4)


Disassembly of function #:|(DEFUN $DRAW_NGONS (PTS NGONS NUMBER_EDGES ...) ...)-31|
(CONST 0) = $DRAW_NGONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DRAW_NGONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DRAW_NGONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DRAW_NGONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DRAW_NGONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DRAW_NGONS
8     (SKIP&RET 1)


Disassembly of function $DRAW_NGONS
(CONST 0) = 0
(CONST 1) = J
(CONST 2) = S
(CONST 3) = *ORIGINAL-POINTS*
(CONST 4) = MOST-NEGATIVE-LONG-FLOAT
(CONST 5) = ADD-PS-FINISH
(CONST 6) = 3
(CONST 7) = $PSTREAM
(CONST 8) = PRINT-PT1
(CONST 9) = 2
(CONST 10) = " moveto %"
(CONST 11) = P
(CONST 12) = "lineto %"
(CONST 13) = 1
(CONST 14) = 100.0
(CONST 15) = *Z-RANGE*
(CONST 16) = " myfinish"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (J *Z-RANGE* S $PSTREAM MOST-NEGATIVE-LONG-FLOAT *ORIGINAL-POINTS*)
writes special variables : (S J)
121 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0
1     (CONST 0)                           ; 0
2     (BIND 1)                            ; J
4     (CONST 0)                           ; 0
5     (BIND 2)                            ; S
7     (GETVALUE&PUSH 3)                   ; *ORIGINAL-POINTS*
9     (GETVALUE&PUSH 4)                   ; MOST-NEGATIVE-LONG-FLOAT
11    (LOAD&PUSH 11)
12    (CALLS2 71)                         ; LENGTH
14    (SETVALUE 1)                        ; J
16    (LOAD&PUSH 1)
17    (CALL1 5)                           ; ADD-PS-FINISH
19    (JMP L200)
22    L22
22    (CONST 10)                          ; " moveto %"
23    (JMP L119)
26    L26
26    (LOAD 10)
27    (SETVALUE 2)                        ; S
29    L29
29    (LOAD&PUSH 12)
30    (CONST&PUSH 6)                      ; 3
31    (LOAD&PUSH 13)
32    (LOAD&PUSH 11)
33    (CALLSR&PUSH 1 1)                   ; AREF
36    (CALLSR&PUSH 2 55)                  ; *
39    (CALLSR&PUSH 1 53)                  ; +
42    (CALLSR&PUSH 1 1)                   ; AREF
45    (GETVALUE&PUSH 7)                   ; $PSTREAM
47    (CALL2 8)                           ; PRINT-PT1
49    (LOAD&PUSH 12)
50    (CONST&PUSH 6)                      ; 3
51    (LOAD&PUSH 13)
52    (LOAD&PUSH 11)
53    (CALLSR&PUSH 1 1)                   ; AREF
56    (CALLSR&PUSH 2 55)                  ; *
59    (CALLS2&PUSH 150)                   ; 1+
61    (CALLSR&PUSH 1 1)                   ; AREF
64    (GETVALUE&PUSH 7)                   ; $PSTREAM
66    (CALL2 8)                           ; PRINT-PT1
68    (LOAD&JMPIFNOT 1 L111)
71    (PUSH)
72    (CONST&PUSH 9)                      ; 2
73    (CONST&PUSH 6)                      ; 3
74    (LOAD&PUSH 14)
75    (LOAD&PUSH 12)
76    (CALLSR&PUSH 1 1)                   ; AREF
79    (CALLSR&PUSH 2 55)                  ; *
82    (CALLSR&PUSH 2 53)                  ; +
85    (CALLSR&PUSH 1 1)                   ; AREF
88    (LOAD&PUSH 1)
89    (CALLSR&JMPIFNOT 1 48 L111)         ; >
93    (LOAD&PUSH 1)
94    (CONST&PUSH 9)                      ; 2
95    (CONST&PUSH 6)                      ; 3
96    (LOAD&PUSH 14)
97    (LOAD&PUSH 12)
98    (CALLSR&PUSH 1 1)                   ; AREF
101   (CALLSR&PUSH 2 55)                  ; *
104   (CALLSR&PUSH 2 53)                  ; +
107   (CALLSR&STORE 1 1 0)                ; AREF
111   L111
111   (LOAD&PUSH 10)
112   (GETVALUE&PUSH 2)                   ; S
114   (CALLS2&JMPIF 1 L22)                ; EQL
118   (CONST 12)                          ; "lineto %"
119   L119
119   (PUSH)
120   (CALL1 11)                          ; P
122   (LOAD&PUSH 8)
123   (CONST&PUSH 13)                     ; 1
124   (CALLSR&STORE 2 53 8)               ; +
128   (GETVALUE&PUSH 2)                   ; S
130   (CONST&PUSH 13)                     ; 1
131   (CALLSR 1 54)                       ; -
134   (SETVALUE 2)                        ; S
136   (PUSH)
137   (CONST&PUSH 0)                      ; 0
138   (CALLSR&JMPIF 1 48 L29)             ; >
143   (LOAD&PUSH 8)
144   (CONST&PUSH 13)                     ; 1
145   (CALLSR&STORE 2 53 8)               ; +
149   (LOAD&JMPIFNOT 1 L197)
152   (CONST&PUSH 13)                     ; 1
153   (CONST&PUSH 14)                     ; 100.0
154   (LOAD&PUSH 2)
155   (GETVALUE 15)                       ; *Z-RANGE*
157   (CAR&PUSH)
158   (CALLSR&PUSH 1 54)                  ; -
161   (GETVALUE 15)                       ; *Z-RANGE*
163   (CDR)
164   (CDR)
165   (CAR)
166   (JMPIF L178)
168   (GETVALUE 15)                       ; *Z-RANGE*
170   (CDR)
171   (CAR&PUSH)
172   (GETVALUE 15)                       ; *Z-RANGE*
174   (CAR&PUSH)
175   (CALLSR 1 54)                       ; -
178   L178
178   (PUSH)
179   (CALLSR&PUSH 1 56)                  ; /
182   (CALLSR&PUSH 2 55)                  ; *
185   (PUSH-UNBOUND 1)
187   (CALLS2&PUSH 182)                   ; ROUND
189   (CALLSR&PUSH 2 53)                  ; +
192   (CALL1 11)                          ; P
194   (GETVALUE 4)                        ; MOST-NEGATIVE-LONG-FLOAT
196   (STORE 0)
197   L197
197   (CONST&PUSH 16)                     ; " myfinish"
198   (CALL1 11)                          ; P
200   L200
200   (LOAD&PUSH 8)
201   (GETVALUE&PUSH 1)                   ; J
203   (CALLSR&JMPIF 1 47 L26)             ; <
208   (NIL)
209   (SKIP 2)
211   (UNBIND 2)
213   (SKIP&RET 5)


Disassembly of function #:|(DEFUN $NORM (PT) ...)-32|
(CONST 0) = $NORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NORM
8     (SKIP&RET 1)


Disassembly of function $NORM
(CONST 0) = PT
(CONST 1) = V
(CONST 2) = 0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V PT)
writes special variable : (V)
29 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; PT
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; PT
6     (CDR&PUSH)
7     (LOAD 1)
8     (BIND 1)                            ; V
10    (CONST&PUSH 2)                      ; 0
11    (NIL&PUSH)
12    (LOAD&JMPIFNOT 5 L38)
15    L15
15    (LOAD&CAR&PUSH 5)
17    (LOAD 0)
18    (SETVALUE 1)                        ; V
20    (STORE 0)
21    (GETVALUE&PUSH 1)                   ; V
23    (CALLSR&STORE 2 55 0)               ; *
27    (LOAD&PUSH 1)
28    (LOAD&PUSH 1)
29    (CALLSR&STORE 2 53 1)               ; +
33    (LOAD&CDR&STORE 5)
35    (LOAD&JMPIF 5 L15)
38    L38
38    (LOAD 1)
39    (SKIP 2)
41    (UNBIND1)
42    (SKIP 2)
44    (UNBIND1)
45    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $LENGTH_ONE (PT) ...)-33|
(CONST 0) = $LENGTH_ONE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $LENGTH_ONE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LENGTH_ONE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $LENGTH_ONE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $LENGTH_ONE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $LENGTH_ONE
8     (SKIP&RET 1)


Disassembly of function $LENGTH_ONE
(CONST 0) = PT
(CONST 1) = $NORM
(CONST 2) = (MLIST)
(CONST 3) = V
(CONST 4) = 1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PT)
writes special variable : (V)
49 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; PT
3     (GETVALUE&PUSH 0)                   ; PT
5     (CALL1&PUSH 1)                      ; $NORM
7     (CALLS2&PUSH 156)                   ; SQRT
9     (CONST&PUSH 2)                      ; (MLIST)
10    (NIL&PUSH)
11    (GETVALUE 0)                        ; PT
13    (CDR&PUSH)
14    (LOAD 1)
15    (BIND 3)                            ; V
17    (PUSH-NIL 3)
19    (LOAD&JMPIFNOT 6 L49)
22    L22
22    (LOAD&CAR&PUSH 6)
24    (LOAD 0)
25    (SETVALUE 3)                        ; V
27    (STORE 0)
28    (CONST&PUSH 4)                      ; 1.0
29    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
31    (LOAD&PUSH 10)
32    (CALLSR&STORE 1 56 0)               ; /
36    (LOAD&JMPIF 1 L61)
39    (LOAD&PUSH 0)
40    (NIL)
41    (CONS)
42    (STORE 1)
43    (STORE 2)
44    L44
44    (LOAD&CDR&STORE 6)
46    (LOAD&JMPIF 6 L22)
49    L49
49    (LOAD 2)
50    (SKIP 3)
52    (UNBIND1)
53    (SKIP 2)
55    (CONS)
56    (SKIP 1)
58    (UNBIND1)
59    (SKIP&RET 2)
61    L61
61    (PUSH)
62    (LOAD&PUSH 1)
63    (NIL)
64    (CONS)
65    (STORE 2)
66    (PUSH)
67    (CALLS1 171)                        ; SYSTEM::%RPLACD
69    (JMP L44)


Disassembly of function #:|(DEFUN $CROSS_PRODUCT (U V) ...)-34|
(CONST 0) = $CROSS_PRODUCT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CROSS_PRODUCT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CROSS_PRODUCT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CROSS_PRODUCT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CROSS_PRODUCT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CROSS_PRODUCT
8     (SKIP&RET 1)


Disassembly of function $CROSS_PRODUCT
(CONST 0) = U
(CONST 1) = V
(CONST 2) = (MLIST)
(CONST 3) = 2
(CONST 4) = 3
(CONST 5) = #<COMPILED-CLOSURE $CROSS_PRODUCT-CP>
(CONST 6) = 1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; U
3     (LOAD 4)
4     (BIND 1)                            ; V
6     (CONST&PUSH 2)                      ; (MLIST)
7     (CONST&PUSH 3)                      ; 2
8     (CONST&PUSH 4)                      ; 3
9     (CONST 5)                           ; #<COMPILED-CLOSURE $CROSS_PRODUCT-CP>
10    (CALLC&PUSH)
11    (CONST&PUSH 4)                      ; 3
12    (CONST&PUSH 6)                      ; 1
13    (CONST 5)                           ; #<COMPILED-CLOSURE $CROSS_PRODUCT-CP>
14    (CALLC&PUSH)
15    (CONST&PUSH 6)                      ; 1
16    (CONST&PUSH 3)                      ; 2
17    (CONST 5)                           ; #<COMPILED-CLOSURE $CROSS_PRODUCT-CP>
18    (CALLC&PUSH)
19    (LIST 4)
21    (UNBIND 2)
23    (SKIP&RET 3)


Disassembly of function $CROSS_PRODUCT-CP
(CONST 0) = J
(CONST 1) = U
(CONST 2) = V
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V J U)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; J
3     (LOAD&PUSH 5)
4     (GETVALUE&PUSH 1)                   ; U
6     (CALLS1&PUSH 148)                   ; NTH
8     (GETVALUE&PUSH 0)                   ; J
10    (GETVALUE&PUSH 2)                   ; V
12    (CALLS1&PUSH 148)                   ; NTH
14    (CALLSR&PUSH 2 55)                  ; *
17    (LOAD&PUSH 6)
18    (GETVALUE&PUSH 2)                   ; V
20    (CALLS1&PUSH 148)                   ; NTH
22    (GETVALUE&PUSH 0)                   ; J
24    (GETVALUE&PUSH 1)                   ; U
26    (CALLS1&PUSH 148)                   ; NTH
28    (CALLSR&PUSH 2 55)                  ; *
31    (CALLSR 1 54)                       ; -
34    (UNBIND1)
35    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $GET_ROTATION (PT) ...)-35|
(CONST 0) = $GET_ROTATION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GET_ROTATION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GET_ROTATION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GET_ROTATION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GET_ROTATION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GET_ROTATION
8     (SKIP&RET 1)


Disassembly of function $GET_ROTATION
(CONST 0) = PT
(CONST 1) = $LENGTH_ONE
(CONST 2) = V
(CONST 3) = U
(CONST 4) = 0.0
(CONST 5) = (MLIST)
(CONST 6) = 1.0
(CONST 7) = SYSTEM::%SETNTH
(CONST 8) = (MLIST)
(CONST 9) = 2
(CONST 10) = 1
(CONST 11) = (0.0)
(CONST 12) = $CROSS_PRODUCT
(CONST 13) = ($MATRIX)
(CONST 14) = $ROT
(CONST 15) = 3
(CONST 16) = GET-THETA-FOR-VERTICAL-Z
(CONST 17) = $ROTATION1
(CONST 18) = NCMUL2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($ROT U V PT)
writes special variables : ($ROT U V PT)
77 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; PT
3     (GETVALUE&PUSH 0)                   ; PT
5     (CALL1 1)                           ; $LENGTH_ONE
7     (SETVALUE 0)                        ; PT
9     (NIL)
10    (BIND 2)                            ; V
12    (NIL&PUSH)
13    (NIL)
14    (BIND 3)                            ; U
16    (CONST&PUSH 4)                      ; 0.0
17    (GETVALUE&PUSH 0)                   ; PT
19    (PUSH-UNBOUND 6)
21    (CALLS2&STORE 95 3)                 ; POSITION
24    (JMPIF L111)
27    (CONST&PUSH 8)                      ; (MLIST)
28    (CONST&PUSH 9)                      ; 2
29    (GETVALUE&PUSH 0)                   ; PT
31    (CALLS1&PUSH 148)                   ; NTH
33    (CALLSR&PUSH 0 54)                  ; -
36    (CONST&PUSH 10)                     ; 1
37    (GETVALUE&PUSH 0)                   ; PT
39    (CALLS1&PUSH 148)                   ; NTH
41    (CONST 11)                          ; (0.0)
42    (LIST*&PUSH 3)
44    (CALL1 1)                           ; $LENGTH_ONE
46    (SETVALUE 2)                        ; V
48    L48
48    (GETVALUE&PUSH 0)                   ; PT
50    (GETVALUE&PUSH 2)                   ; V
52    (CALL2 12)                          ; $CROSS_PRODUCT
54    (SETVALUE 3)                        ; U
56    (CONST&PUSH 13)                     ; ($MATRIX)
57    (GETVALUE&PUSH 2)                   ; V
59    (GETVALUE&PUSH 3)                   ; U
61    (GETVALUE&PUSH 0)                   ; PT
63    (LIST 4)
65    (BIND 14)                           ; $ROT
67    (CONST&PUSH 15)                     ; 3
68    (CONST&PUSH 10)                     ; 1
69    (GETVALUE&PUSH 14)                  ; $ROT
71    (CALLS1&PUSH 148)                   ; NTH
73    (CALLS1&PUSH 148)                   ; NTH
75    (CONST&PUSH 15)                     ; 3
76    (CONST&PUSH 9)                      ; 2
77    (GETVALUE&PUSH 14)                  ; $ROT
79    (CALLS1&PUSH 148)                   ; NTH
81    (CALLS1&PUSH 148)                   ; NTH
83    (CALL2&PUSH 16)                     ; GET-THETA-FOR-VERTICAL-Z
85    (LOAD&PUSH 0)
86    (CALLS2&JMPIF 145 L99)              ; ZEROP
89    (CONST&PUSH 4)                      ; 0.0
90    (LOAD&PUSH 1)
91    (CALL2&PUSH 17)                     ; $ROTATION1
93    (GETVALUE&PUSH 14)                  ; $ROT
95    (CALL2 18)                          ; NCMUL2
97    (SETVALUE 14)                       ; $ROT
99    L99
99    (GETVALUE 14)                       ; $ROT
101   (SKIP 1)
103   (UNBIND 2)
105   (SKIP 1)
107   (UNBIND 2)
109   (SKIP&RET 2)
111   L111
111   (CONST&PUSH 5)                      ; (MLIST)
112   (CONST&PUSH 4)                      ; 0.0
113   (CONST&PUSH 4)                      ; 0.0
114   (CONST&PUSH 4)                      ; 0.0
115   (LIST 3)
117   (CONS)
118   (SETVALUE 2)                        ; V
120   (LOAD&PUSH 3)
121   (GETVALUE&PUSH 2)                   ; V
123   (CONST&PUSH 6)                      ; 1.0
124   (CALL 3 7)                          ; SYSTEM::%SETNTH
127   (JMP L48)


Disassembly of function #:|(DEFUN GET-THETA-FOR-VERTICAL-Z (Z1 Z2) ...)-36|
(CONST 0) = GET-THETA-FOR-VERTICAL-Z
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-THETA-FOR-VERTICAL-Z>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-THETA-FOR-VERTICAL-Z
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-THETA-FOR-VERTICAL-Z
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-THETA-FOR-VERTICAL-Z>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-THETA-FOR-VERTICAL-Z
8     (SKIP&RET 1)


Disassembly of function GET-THETA-FOR-VERTICAL-Z
(CONST 0) = 0.0
(CONST 1) = PI
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PI)
16 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CONST&PUSH 0)                      ; 0.0
2     (CALLS2&JMPIF 1 L14)                ; EQL
5     (LOAD&PUSH 1)
6     (LOAD&PUSH 3)
7     (CALLS2 167)                        ; COMMON-LISP:ATAN
9     (SKIP&RET 3)
11    L11
11    (CONST 0)                           ; 0.0
12    (SKIP&RET 3)
14    L14
14    (LOAD&PUSH 1)
15    (CONST&PUSH 0)                      ; 0.0
16    (CALLSR&JMPIF 1 48 L11)             ; >
20    (GETVALUE 1)                        ; PI
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $PS_AXES (ROT) ...)-37|
(CONST 0) = $PS_AXES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PS_AXES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PS_AXES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PS_AXES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PS_AXES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PS_AXES
8     (SKIP&RET 1)


Disassembly of function $PS_AXES
(CONST 0) = 9
(CONST 1) = LONG-FLOAT
(CONST 2) = 0
(CONST 3) = 4.0
(CONST 4) = 4
(CONST 5) = 8
(CONST 6) = $ROTATE_PTS
(CONST 7) = "moveto"
(CONST 8) = P
(CONST 9) = 1
(CONST 10) = "lineto stroke"
(CONST 11) = "moveto (x) show"
(CONST 12) = "moveto"
(CONST 13) = 3
(CONST 14) = "lineto stroke"
(CONST 15) = "moveto (y) show"
(CONST 16) = "moveto"
(CONST 17) = 6
(CONST 18) = 7
(CONST 19) = "lineto stroke"
(CONST 20) = "moveto (z) show"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
81 byte-code instructions:
0     (CONST&PUSH 0)                      ; 9
1     (PUSH-UNBOUND 7)
3     (CONST 1)                           ; LONG-FLOAT
4     (STORE 5)
5     (CALLS1&PUSH 29)                    ; MAKE-ARRAY
7     (LOAD&PUSH 0)
8     (CONST&PUSH 2)                      ; 0
9     (CONST&PUSH 3)                      ; 4.0
10    (CALLSR 1 2)                        ; SYSTEM::STORE
13    (LOAD&PUSH 0)
14    (CONST&PUSH 4)                      ; 4
15    (CONST&PUSH 3)                      ; 4.0
16    (CALLSR 1 2)                        ; SYSTEM::STORE
19    (LOAD&PUSH 0)
20    (CONST&PUSH 5)                      ; 8
21    (CONST&PUSH 3)                      ; 4.0
22    (CALLSR 1 2)                        ; SYSTEM::STORE
25    (LOAD&PUSH 0)
26    (LOAD&PUSH 3)
27    (CALL2 6)                           ; $ROTATE_PTS
29    (CONST&PUSH 2)                      ; 0
30    (CONST&PUSH 2)                      ; 0
31    (CONST&PUSH 7)                      ; "moveto"
32    (CALL 3 8)                          ; P
35    (LOAD&PUSH 0)
36    (CONST&PUSH 2)                      ; 0
37    (CALLSR&PUSH 1 1)                   ; AREF
40    (LOAD&PUSH 1)
41    (CONST&PUSH 9)                      ; 1
42    (CALLSR&PUSH 1 1)                   ; AREF
45    (CONST&PUSH 10)                     ; "lineto stroke"
46    (CALL 3 8)                          ; P
49    (LOAD&PUSH 0)
50    (CONST&PUSH 2)                      ; 0
51    (CALLSR&PUSH 1 1)                   ; AREF
54    (LOAD&PUSH 1)
55    (CONST&PUSH 9)                      ; 1
56    (CALLSR&PUSH 1 1)                   ; AREF
59    (CONST&PUSH 11)                     ; "moveto (x) show"
60    (CALL 3 8)                          ; P
63    (CONST&PUSH 2)                      ; 0
64    (CONST&PUSH 2)                      ; 0
65    (CONST&PUSH 12)                     ; "moveto"
66    (CALL 3 8)                          ; P
69    (LOAD&PUSH 0)
70    (CONST&PUSH 13)                     ; 3
71    (CALLSR&PUSH 1 1)                   ; AREF
74    (LOAD&PUSH 1)
75    (CONST&PUSH 4)                      ; 4
76    (CALLSR&PUSH 1 1)                   ; AREF
79    (CONST&PUSH 14)                     ; "lineto stroke"
80    (CALL 3 8)                          ; P
83    (LOAD&PUSH 0)
84    (CONST&PUSH 13)                     ; 3
85    (CALLSR&PUSH 1 1)                   ; AREF
88    (LOAD&PUSH 1)
89    (CONST&PUSH 4)                      ; 4
90    (CALLSR&PUSH 1 1)                   ; AREF
93    (CONST&PUSH 15)                     ; "moveto (y) show"
94    (CALL 3 8)                          ; P
97    (CONST&PUSH 2)                      ; 0
98    (CONST&PUSH 2)                      ; 0
99    (CONST&PUSH 16)                     ; "moveto"
100   (CALL 3 8)                          ; P
103   (LOAD&PUSH 0)
104   (CONST&PUSH 17)                     ; 6
105   (CALLSR&PUSH 1 1)                   ; AREF
108   (LOAD&PUSH 1)
109   (CONST&PUSH 18)                     ; 7
110   (CALLSR&PUSH 1 1)                   ; AREF
113   (CONST&PUSH 19)                     ; "lineto stroke"
114   (CALL 3 8)                          ; P
117   (LOAD&PUSH 0)
118   (CONST&PUSH 17)                     ; 6
119   (CALLSR&PUSH 1 1)                   ; AREF
122   (LOAD&PUSH 1)
123   (CONST&PUSH 18)                     ; 7
124   (CALLSR&PUSH 1 1)                   ; AREF
127   (CONST&PUSH 20)                     ; "moveto (z) show"
128   (CALL 3 8)                          ; P
131   (SKIP&RET 3)


Disassembly of function #:|(DEFUN $POLAR_TO_XY (PTS &AUX # ...) ...)-38|
(CONST 0) = $POLAR_TO_XY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $POLAR_TO_XY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $POLAR_TO_XY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $POLAR_TO_XY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $POLAR_TO_XY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $POLAR_TO_XY
8     (SKIP&RET 1)


Disassembly of function $POLAR_TO_XY
(CONST 0) = 0.0
(CONST 1) = R
(CONST 2) = #(NIL)
(CONST 3) = :NAME
(CONST 4) = COMMON-LISP:CONTINUE
(CONST 5) = :INVOKE-FUNCTION
(CONST 6) = #<COMPILED-CLOSURE $POLAR_TO_XY-1>
(CONST 7) = :REPORT
(CONST 8) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 9) = :INTERACTIVE
(CONST 10) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 11) = SYSTEM::MAKE-RESTART
(CONST 12) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 13) = SYSTEM::*CONDITION-RESTARTS*
(CONST 14) = (#(CONDITION 7) 1 . 1)
(CONST 15) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 16) = SIGNAL
(CONST 17) = "~A"
(CONST 18) = (TYPEP PTS '(VECTOR LONG-FLOAT))
(CONST 19) = SYSTEM::ASSERT-ERROR-STRING
(CONST 20) = 0
(CONST 21) = 3
(CONST 22) = SLOOP::SLOOP-TYPE-ERROR
(CONST 23) = 1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
writes special variable : (R)
105 byte-code instructions:
0     (CONST 0)                           ; 0.0
1     (BIND 1)                            ; R
3     (CONST&PUSH 0)                      ; 0.0
4     (JMP L82)
7     L7
7     (HANDLER-BEGIN&PUSH)
8     (LOAD&PUSH 0)
9     (LOADI&PUSH 0 0 6)
13    (CALL2 15)                          ; SYSTEM::ADD-CONDITION-RESTARTS
15    (LOAD&PUSH 0)
16    (CALL1 16)                          ; SIGNAL
18    (SKIPSP 2 1)
21    (SKIP&RET 2)
23    L23
23    (NIL)
24    (MAKE-VECTOR1&PUSH 1)
26    (NIL)
27    (STOREC 0 0)
30    (TAGBODY-OPEN 2 L73)                ; #(NIL)
33    (CONST&PUSH 3)                      ; :NAME
34    (CONST&PUSH 4)                      ; COMMON-LISP:CONTINUE
35    (CONST&PUSH 5)                      ; :INVOKE-FUNCTION
36    (LOAD&PUSH 7)
37    (LOAD&PUSH 6)
38    (COPY-CLOSURE&PUSH 6 2)             ; #<COMPILED-CLOSURE $POLAR_TO_XY-1>
41    (CONST&PUSH 7)                      ; :REPORT
42    (CONST&SYMBOL-FUNCTION&PUSH 8)      ; SYSTEM::REPORT-NO-NEW-VALUE
44    (CONST&PUSH 9)                      ; :INTERACTIVE
45    (CONST&SYMBOL-FUNCTION&PUSH 10)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
47    (CALL&PUSH 8 11)                    ; SYSTEM::MAKE-RESTART
50    (LIST&PUSH 1)
52    (LOAD&PUSH 0)
53    (GETVALUE&PUSH 12)                  ; SYSTEM::*ACTIVE-RESTARTS*
55    (CALLSR 2 34)                       ; APPEND
58    (BIND 12)                           ; SYSTEM::*ACTIVE-RESTARTS*
60    (GETVALUE 13)                       ; SYSTEM::*CONDITION-RESTARTS*
62    (BIND 13)                           ; SYSTEM::*CONDITION-RESTARTS*
64    (HANDLER-OPEN 14 L7)                ; (#(CONDITION 7) 1 . 1)
66    (CONST&PUSH 17)                     ; "~A"
67    (CONST&PUSH 18)                     ; (TYPEP PTS '(VECTOR LONG-FLOAT))
68    (CALL1&PUSH 19)                     ; SYSTEM::ASSERT-ERROR-STRING
70    (CALLSR 1 29)                       ; ERROR
73    L73
73    (LOADC 4 0)
76    (UNLIST 0 0)
79    (TAGBODY-CLOSE)
80    (SKIP 1)
82    L82
82    (LOAD&PUSH 5)
83    (CALLS2&JMPIFNOT 35 L23)            ; VECTORP
86    (LOAD&PUSH 5)
87    (CALLS1&PUSH 6)                     ; ARRAY-ELEMENT-TYPE
89    (T)
90    (JMPIFNOTEQ L23)
93    (CONST&PUSH 20)                     ; 0
94    (LOAD&PUSH 6)
95    (CALLS2&PUSH 71)                    ; LENGTH
97    (CONST&PUSH 21)                     ; 3
98    (LOAD&PUSH 1)
99    (CALLSR&PUSH 2 53)                  ; +
102   (CALLS2&JMPIF 13 L170)              ; SYSTEM::FIXNUMP
106   (CALL0 22)                          ; SLOOP::SLOOP-TYPE-ERROR
108   (JMP L170)
110   L110
110   (LOAD&PUSH 7)
111   (LOAD&PUSH 2)
112   (CALLSR 1 1)                        ; AREF
115   (SETVALUE 1)                        ; R
117   (LOAD&PUSH 7)
118   (LOAD&PUSH 2)
119   (CONST&PUSH 23)                     ; 1
120   (CALLSR&PUSH 2 53)                  ; +
123   (CALLSR&STORE 1 1 2)                ; AREF
127   (GETVALUE&PUSH 1)                   ; R
129   (LOAD&PUSH 3)
130   (CALLS2&PUSH 162)                   ; COS
132   (CALLSR&PUSH 2 55)                  ; *
135   (LOAD&PUSH 8)
136   (LOAD&PUSH 3)
137   (LOAD&PUSH 2)
138   (CALLSR 1 2)                        ; SYSTEM::STORE
141   (SKIP 1)
143   (LOAD&PUSH 1)
144   (CONST&PUSH 23)                     ; 1
145   (CALLSR&PUSH 2 53)                  ; +
148   (GETVALUE&PUSH 1)                   ; R
150   (LOAD&PUSH 4)
151   (CALLS2&PUSH 161)                   ; SIN
153   (CALLSR&PUSH 2 55)                  ; *
156   (LOAD&PUSH 9)
157   (LOAD&PUSH 2)
158   (LOAD&PUSH 2)
159   (CALLSR 1 2)                        ; SYSTEM::STORE
162   (SKIP 2)
164   (CONST&PUSH 21)                     ; 3
165   (LOAD&PUSH 2)
166   (CALLSR&STORE 2 53 1)               ; +
170   L170
170   (LOAD&PUSH 1)
171   (LOAD&PUSH 1)
172   (CALLSR&JMPIFNOT 1 50 L110)         ; >=
177   (NIL)
178   (SKIP 3)
180   (UNBIND1)
181   (SKIP&RET 2)


Disassembly of function $POLAR_TO_XY-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN COERCE-FUNCTION-BODY (F LVARS) ...)-39|
(CONST 0) = COERCE-FUNCTION-BODY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COERCE-FUNCTION-BODY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COERCE-FUNCTION-BODY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COERCE-FUNCTION-BODY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COERCE-FUNCTION-BODY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COERCE-FUNCTION-BODY
8     (SKIP&RET 1)


Disassembly of function COERCE-FUNCTION-BODY
(CONST 0) = F
(CONST 1) = COERCE-FLOAT-FUN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
writes special variable : (F)
16 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (LOAD&PUSH 5)
6     (CALL2 1)                           ; COERCE-FLOAT-FUN
8     (SETVALUE 0)                        ; F
10    (PUSH)
11    (CALLS2&JMPIF 6 L19)                ; SYMBOLP
14    (GETVALUE 0)                        ; F
16    L16
16    (UNBIND1)
17    (SKIP&RET 3)
19    L19
19    (GETVALUE 0)                        ; F
21    (SYMBOL-FUNCTION)
22    (JMP L16)


Disassembly of function #:|(DEFUN $MAKE_TRANSFORM (LVARS FX FY ...) ...)-40|
(CONST 0) = $MAKE_TRANSFORM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MAKE_TRANSFORM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MAKE_TRANSFORM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MAKE_TRANSFORM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MAKE_TRANSFORM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MAKE_TRANSFORM
8     (SKIP&RET 1)


Disassembly of function $MAKE_TRANSFORM
(CONST 0) = $NUMER
(CONST 1) = COERCE-FUNCTION-BODY
(CONST 2) = "transform"
(CONST 3) = #<COMPILED-CLOSURE $MAKE_TRANSFORM-1>
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
28 byte-code instructions:
0     (NIL)
1     (MAKE-VECTOR1&PUSH 3)
3     (LOAD&STOREC 4 0 0)
7     (LOAD&STOREC 3 0 1)
11    (LOAD&STOREC 2 0 2)
15    (T)
16    (BIND 0)                            ; $NUMER
18    (LOADC&PUSH 3 0)
21    (LOAD&PUSH 9)
22    (CALL2 1)                           ; COERCE-FUNCTION-BODY
24    (STOREC 3 0)
27    (LOADC&PUSH 3 1)
30    (LOAD&PUSH 9)
31    (CALL2 1)                           ; COERCE-FUNCTION-BODY
33    (STOREC 3 1)
36    (LOADC&PUSH 3 2)
39    (LOAD&PUSH 9)
40    (CALL2 1)                           ; COERCE-FUNCTION-BODY
42    (STOREC 3 2)
45    (CONST&PUSH 2)                      ; "transform"
46    (CALLS2&PUSH 143)                   ; GENSYM
48    (LOAD&PUSH 0)
49    (LOAD&PUSH 5)
50    (COPY-CLOSURE&PUSH 3 1)             ; #<COMPILED-CLOSURE $MAKE_TRANSFORM-1>
53    (CALLS2 130)                        ; SYSTEM::%PUTD
55    (SKIP 1)
57    (UNBIND1)
58    (SKIP&RET 6)


Disassembly of function $MAKE_TRANSFORM-1
(CONST 0) = NIL
(CONST 1) = 0.0
(CONST 2) = 0
(CONST 3) = 3
(CONST 4) = SLOOP::SLOOP-TYPE-ERROR
(CONST 5) = 1
(CONST 6) = 2
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
71 byte-code instructions:
0     (CONST&PUSH 1)                      ; 0.0
1     (CONST&PUSH 1)                      ; 0.0
2     (CONST&PUSH 1)                      ; 0.0
3     (CONST&PUSH 2)                      ; 0
4     (LOAD&PUSH 5)
5     (CALLS2&PUSH 71)                    ; LENGTH
7     (CONST&PUSH 3)                      ; 3
8     (LOAD&PUSH 1)
9     (CALLSR&PUSH 2 53)                  ; +
12    (CALLS2&JMPIF 13 L111)              ; SYSTEM::FIXNUMP
16    (CALL0 4)                           ; SLOOP::SLOOP-TYPE-ERROR
18    (JMP L111)
21    L21
21    (LOAD&PUSH 6)
22    (LOAD&PUSH 2)
23    (CALLSR&STORE 1 1 4)                ; AREF
27    (LOAD&PUSH 6)
28    (LOAD&PUSH 2)
29    (CONST&PUSH 5)                      ; 1
30    (CALLSR&PUSH 2 53)                  ; +
33    (CALLSR&STORE 1 1 3)                ; AREF
37    (LOAD&PUSH 6)
38    (LOAD&PUSH 2)
39    (CONST&PUSH 6)                      ; 2
40    (CALLSR&PUSH 2 53)                  ; +
43    (CALLSR&STORE 1 1 2)                ; AREF
47    (LOADV&PUSH 0 1)
50    (LOAD&PUSH 5)
51    (LOAD&PUSH 5)
52    (LOAD&PUSH 5)
53    (FUNCALL&PUSH 3)
55    (LOAD&PUSH 7)
56    (LOAD&PUSH 3)
57    (LOAD&PUSH 2)
58    (CALLSR 1 2)                        ; SYSTEM::STORE
61    (SKIP 1)
63    (CONST&PUSH 5)                      ; 1
64    (LOAD&PUSH 2)
65    (CALLSR&PUSH 2 53)                  ; +
68    (LOADV&PUSH 0 2)
71    (LOAD&PUSH 6)
72    (LOAD&PUSH 6)
73    (LOAD&PUSH 6)
74    (FUNCALL&PUSH 3)
76    (LOAD&PUSH 8)
77    (LOAD&PUSH 2)
78    (LOAD&PUSH 2)
79    (CALLSR 1 2)                        ; SYSTEM::STORE
82    (SKIP 2)
84    (CONST&PUSH 6)                      ; 2
85    (LOAD&PUSH 2)
86    (CALLSR&PUSH 2 53)                  ; +
89    (LOADV&PUSH 0 3)
92    (LOAD&PUSH 6)
93    (LOAD&PUSH 6)
94    (LOAD&PUSH 6)
95    (FUNCALL&PUSH 3)
97    (LOAD&PUSH 8)
98    (LOAD&PUSH 2)
99    (LOAD&PUSH 2)
100   (CALLSR 1 2)                        ; SYSTEM::STORE
103   (SKIP 2)
105   (CONST&PUSH 3)                      ; 3
106   (LOAD&PUSH 2)
107   (CALLSR&STORE 2 53 1)               ; +
111   L111
111   (LOAD&PUSH 1)
112   (LOAD&PUSH 1)
113   (CALLSR&JMPIFNOT 1 50 L21)          ; >=
118   (NIL)
119   (SKIP&RET 7)


Disassembly of function #:|(DEFUN COERCE-FLOAT-FUN (EXPR &OPTIONAL LVARS) ...)-41|
(CONST 0) = COERCE-FLOAT-FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COERCE-FLOAT-FUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COERCE-FLOAT-FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COERCE-FLOAT-FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COERCE-FLOAT-FUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COERCE-FLOAT-FUN
8     (SKIP&RET 1)


Disassembly of function COERCE-FLOAT-FUN
(CONST 0) = FUNCTIONP
(CONST 1) = MEXPR
(CONST 2) = MGET
(CONST 3) = 1
(CONST 4) = ARGS
(CONST 5) = "Undefined function ~a"
(CONST 6) = MERROR
(CONST 7) = LAMBDA
(CONST 8) = DECLARE
(CONST 9) = SPECIAL
(CONST 10) = FLOAT
(CONST 11) = $REALPART
(CONST 12) = MEVAL*
(CONST 13) = QUOTE
(CONST 14) = 2
(CONST 15) = (1.0)
(CONST 16) = FUNCTION
(CONST 17) = $LISTOFVARS
(CONST 18) = $SORT
(CONST 19) = VARS
(CONST 20) = (1.0)
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (VARS ARGS)
87 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (LOAD 2)
3     (JMPIFATOM L9)
5     (LOAD&PUSH 2)
6     (CALL1&JMPIF 0 L25)                 ; FUNCTIONP
9     L9
9     (LOAD&PUSH 2)
10    (CALLS2&JMPIFNOT 6 L82)             ; SYMBOLP
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 2)
16    (PUSH-UNBOUND 3)
18    (CALLS1&JMPIF 180 L82)              ; MEMBER
21    (LOAD&PUSH 2)
22    (CALLS1&JMPIFNOT 80 L28)            ; FBOUNDP
25    L25
25    (LOAD 2)
26    (SKIP&RET 3)
28    L28
28    (LOAD&PUSH 2)
29    (CONST&PUSH 1)                      ; MEXPR
30    (CALL2&PUSH 2)                      ; MGET
32    (CONST&PUSH 3)                      ; 1
33    (LOAD&PUSH 1)
34    (CALLS1 148)                        ; NTH
36    (BIND 4)                            ; ARGS
38    (LOAD&JMPIF 3 L45)
41    (CONST&PUSH 5)                      ; "Undefined function ~a"
42    (LOAD&PUSH 7)
43    (CALL2 6)                           ; MERROR
45    L45
45    (CONST&PUSH 7)                      ; LAMBDA
46    (GETVALUE 4)                        ; ARGS
48    (CDR&PUSH)
49    (CONST&PUSH 8)                      ; DECLARE
50    (CONST&PUSH 9)                      ; SPECIAL
51    (GETVALUE 4)                        ; ARGS
53    (CDR)
54    (CONS&PUSH)
55    (LIST&PUSH 2)
57    (CONST&PUSH 10)                     ; FLOAT
58    (CONST&PUSH 11)                     ; $REALPART
59    (CONST&PUSH 12)                     ; MEVAL*
60    (CONST&PUSH 13)                     ; QUOTE
61    (CONST&PUSH 14)                     ; 2
62    (LOAD&PUSH 11)
63    (CALLS1&PUSH 148)                   ; NTH
65    (LIST&PUSH 2)
67    (LIST&PUSH 2)
69    (LIST&PUSH 2)
71    (CONST 15)                          ; (1.0)
72    (LIST*&PUSH 2)
74    (LIST&PUSH 4)
76    (CONST&PUSH 16)                     ; FUNCTION
77    (CALLS2 42)                         ; COERCE
79    (UNBIND1)
80    (SKIP&RET 4)
82    L82
82    (LOAD&JMPIF 1 L90)
85    (LOAD&PUSH 2)
86    (CALL1&PUSH 17)                     ; $LISTOFVARS
88    (CALL1 18)                          ; $SORT
90    L90
90    (BIND 19)                           ; VARS
92    (CONST&PUSH 7)                      ; LAMBDA
93    (GETVALUE 19)                       ; VARS
95    (CDR&PUSH)
96    (CONST&PUSH 8)                      ; DECLARE
97    (CONST&PUSH 9)                      ; SPECIAL
98    (GETVALUE 19)                       ; VARS
100   (CDR)
101   (CONS&PUSH)
102   (LIST&PUSH 2)
104   (CONST&PUSH 10)                     ; FLOAT
105   (CONST&PUSH 11)                     ; $REALPART
106   (CONST&PUSH 12)                     ; MEVAL*
107   (CONST&PUSH 13)                     ; QUOTE
108   (LOAD&PUSH 12)
109   (LIST&PUSH 2)
111   (LIST&PUSH 2)
113   (LIST&PUSH 2)
115   (CONST 20)                          ; (1.0)
116   (LIST*&PUSH 2)
118   (LIST&PUSH 4)
120   (CONST&PUSH 16)                     ; FUNCTION
121   (CALLS2 42)                         ; COERCE
123   (UNBIND1)
124   (SKIP&RET 3)


Disassembly of function #:|(DEFMACRO ZVAL (POINTS VERTS I) ...)-42|
(CONST 0) = ZVAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ZVAL>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; ZVAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ZVAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ZVAL>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; ZVAL
10    (SKIP&RET 1)


Disassembly of function ZVAL
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = AREF
(CONST 3) = F+
(CONST 4) = 2
(CONST 5) = F*
(CONST 6) = 3
1 required argument
1 optional argument
No rest parameter
No keyword parameters
34 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L39)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR&PUSH)
11    (LOAD 3)
12    (CDR)
13    (CDR)
14    (CAR&PUSH)
15    (LOAD 4)
16    (CDR)
17    (CDR)
18    (CDR)
19    (CAR&PUSH)
20    (CONST&PUSH 2)                      ; AREF
21    (LOAD&PUSH 3)
22    (CONST&PUSH 3)                      ; F+
23    (CONST&PUSH 4)                      ; 2
24    (CONST&PUSH 5)                      ; F*
25    (CONST&PUSH 6)                      ; 3
26    (CONST&PUSH 2)                      ; AREF
27    (LOAD&PUSH 8)
28    (LOAD&PUSH 8)
29    (LIST&PUSH 3)
31    (LIST&PUSH 3)
33    (LIST&PUSH 3)
35    (LIST 3)
37    (SKIP&RET 6)
39    L39
39    (LOAD&PUSH 2)
40    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
42    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SORT-NGONS (POINTS EDGES N ...) ...)-43|
(CONST 0) = SORT-NGONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SORT-NGONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SORT-NGONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SORT-NGONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SORT-NGONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SORT-NGONS
8     (SKIP&RET 1)


Disassembly of function SORT-NGONS
(CONST 0) = N
(CONST 1) = 0
(CONST 2) = 0.0
(CONST 3) = Z
(CONST 4) = 2
(CONST 5) = 3
(CONST 6) = SLOOP::SLOOP-TYPE-ERROR
(CONST 7) = J
(CONST 8) = SORTCAR
(CONST 9) = V
(CONST 10) = K
(CONST 11) = 16777214
(CONST 12) = COPY-ARRAY-PORTION
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (K J Z N)
writes special variables : (K V J Z)
186 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (NIL&PUSH)
4     (LOAD&PUSH 6)
5     (CALLS2&PUSH 71)                    ; LENGTH
7     (PUSH-UNBOUND 7)
9     (LOAD&PUSH 14)
10    (CALLS1&STORE 6 5)                  ; ARRAY-ELEMENT-TYPE
13    (CALLS1&PUSH 29)                    ; MAKE-ARRAY
15    (CONST&PUSH 1)                      ; 0
16    (CONST&PUSH 2)                      ; 0.0
17    (CONST&PUSH 2)                      ; 0.0
18    (GETVALUE&PUSH 0)                   ; N
20    (CALLS2&PUSH 151)                   ; 1-
22    (CONST&PUSH 1)                      ; 0
23    (LOAD&PUSH 12)
24    (CALLS2&PUSH 71)                    ; LENGTH
26    (LOAD 4)
27    (BIND 3)                            ; Z
29    (CONST&PUSH 1)                      ; 0
30    (PUSH-NIL 3)
32    (JMP L171)
35    L35
35    (LOAD 3)
36    (STORE 12)
38    (CONST 1)                           ; 0
39    (STORE 8)
41    (LOAD&PUSH 21)
42    (CONST&PUSH 4)                      ; 2
43    (CONST&PUSH 5)                      ; 3
44    (LOAD&PUSH 23)
45    (LOAD&PUSH 16)
46    (CALLSR&PUSH 1 1)                   ; AREF
49    (CALLSR&PUSH 2 55)                  ; *
52    (CALLSR&PUSH 2 53)                  ; +
55    (CALLSR 1 1)                        ; AREF
58    (SETVALUE 3)                        ; Z
60    (LOAD&INC&STORE 12)
62    (CONST&PUSH 1)                      ; 0
63    (LOAD&PUSH 10)
64    (CALLS2&JMPIF 13 L69)               ; SYSTEM::FIXNUMP
67    (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
69    L69
69    (LOAD&PUSH 10)
70    (LOAD 1)
71    (BIND 7)                            ; J
73    (JMP L132)
75    L75
75    (PUSH)
76    (LOAD&PUSH 1)
77    (NIL)
78    (CONS)
79    (STORE 2)
80    (PUSH)
81    (CALLS1 171)                        ; SYSTEM::%RPLACD
83    (JMP L162)
86    L86
86    (LOAD&PUSH 26)
88    (CONST&PUSH 4)                      ; 2
89    (CONST&PUSH 5)                      ; 3
90    (LOAD&PUSH 28)
92    (LOAD&PUSH 21)
93    (CALLSR&PUSH 1 1)                   ; AREF
96    (CALLSR&PUSH 2 55)                  ; *
99    (CALLSR&PUSH 2 53)                  ; +
102   (CALLSR&STORE 1 1 15)               ; AREF
106   (PUSH)
107   (GETVALUE&PUSH 3)                   ; Z
109   (CALLSR&JMPIFNOT 1 48 L124)         ; >
113   (LOAD 15)
115   (SETVALUE 3)                        ; Z
117   (LOAD&PUSH 25)
119   (LOAD&PUSH 18)
120   (CALLSR&STORE 1 1 13)               ; AREF
124   L124
124   (LOAD&INC&STORE 17)
126   (GETVALUE&PUSH 7)                   ; J
128   (CALLS2 150)                        ; 1+
130   (SETVALUE 7)                        ; J
132   L132
132   (GETVALUE&PUSH 7)                   ; J
134   (LOAD&PUSH 4)
135   (CALLSR&JMPIFNOT 1 50 L86)          ; >=
139   (UNBIND1)
140   (SKIP 2)
142   (LOAD&PUSH 20)
143   (LOAD&PUSH 13)
144   (LOAD&PUSH 10)
145   (CALLSR 1 2)                        ; SYSTEM::STORE
148   (GETVALUE&PUSH 3)                   ; Z
150   (LOAD 4)
151   (CONS)
152   (STORE 0)
153   (LOAD&JMPIF 1 L75)
157   (LOAD&PUSH 0)
158   (NIL)
159   (CONS)
160   (STORE 1)
161   (STORE 2)
162   L162
162   (LOAD&PUSH 3)
163   (GETVALUE&PUSH 0)                   ; N
165   (CALLS2&PUSH 150)                   ; 1+
167   (CALLSR&STORE 2 53 3)               ; +
171   L171
171   (LOAD&PUSH 3)
172   (LOAD&PUSH 8)
173   (CALLSR&JMPIFNOT 1 50 L35)          ; >=
178   (LOAD 2)
179   (SKIP 4)
181   (STORE 10)
183   (PUSH)
184   (CALL1 8)                           ; SORTCAR
186   (STORE 10)
188   (CONST 1)                           ; 0
189   (STORE 8)
191   (NIL)
192   (BIND 9)                            ; V
194   (LOAD&PUSH 13)
195   (LOAD&JMPIFNOT 0 L288)
199   L199
199   (LOAD&CAR&PUSH 0)
201   (LOAD 0)
202   (SETVALUE 9)                        ; V
204   (SKIP 1)
206   (CDR&PUSH)
207   (LOAD&PUSH 0)
208   (CALLS2&JMPIF 13 L213)              ; SYSTEM::FIXNUMP
211   (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
213   L213
213   (POP)
214   (BIND 7)                            ; J
216   (CONST&PUSH 1)                      ; 0
217   (GETVALUE&PUSH 0)                   ; N
219   (CALLS2&PUSH 150)                   ; 1+
221   (CALLS2&JMPIF 13 L226)              ; SYSTEM::FIXNUMP
224   (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
226   L226
226   (GETVALUE&PUSH 0)                   ; N
228   (LOAD 1)
229   (BIND 10)                           ; K
231   (JMP L271)
233   L233
233   (LOAD&PUSH 28)
235   (GETVALUE&PUSH 7)                   ; J
237   (CALLSR&PUSH 1 1)                   ; AREF
240   (LOAD&PUSH 22)
241   (LOAD&PUSH 22)
242   (LOAD&PUSH 2)
243   (CALLSR 1 2)                        ; SYSTEM::STORE
246   (SKIP 1)
248   (LOAD&INC&STORE 20)
250   (GETVALUE&PUSH 7)                   ; J
252   (CONST&PUSH 11)                     ; 16777214
253   (CALLSR&JMPIF 1 47 L259)            ; <
257   (CALL0 6)                           ; SLOOP::SLOOP-TYPE-ERROR
259   L259
259   (GETVALUE&PUSH 7)                   ; J
261   (CALLS2 150)                        ; 1+
263   (SETVALUE 7)                        ; J
265   (GETVALUE&PUSH 10)                  ; K
267   (CALLS2 150)                        ; 1+
269   (SETVALUE 10)                       ; K
271   L271
271   (GETVALUE&PUSH 10)                  ; K
273   (LOAD&PUSH 4)
274   (CALLSR&JMPIFNOT 1 48 L233)         ; >
278   (UNBIND1)
279   (SKIP 2)
281   (UNBIND1)
282   (LOAD&CDR&STORE 0)
284   (LOAD&JMPIF 0 L199)
288   L288
288   (SKIP 1)
290   (UNBIND1)
291   (LOAD&PUSH 16)
292   (LOAD&PUSH 10)
293   (CONST&PUSH 1)                      ; 0
294   (CONST&PUSH 1)                      ; 0
295   (LOAD&PUSH 20)
296   (CALLS2&PUSH 71)                    ; LENGTH
298   (CALL 5 12)                         ; COPY-ARRAY-PORTION
301   (UNBIND1)
302   (SKIP 8)
304   (UNBIND1)
305   (SKIP&RET 4)


Disassembly of function #:|(DEFUN COPY-ARRAY-PORTION (AR1 AR2 I1 ...) ...)-44|
(CONST 0) = COPY-ARRAY-PORTION
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COPY-ARRAY-PORTION>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COPY-ARRAY-PORTION
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COPY-ARRAY-PORTION
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COPY-ARRAY-PORTION>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COPY-ARRAY-PORTION
8     (SKIP&RET 1)


Disassembly of function COPY-ARRAY-PORTION
(CONST 0) = 0
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
19 byte-code instructions:
0     (JMP L19)
2     L2
2     (LOAD&PUSH 4)
3     (LOAD&PUSH 3)
4     (CALLSR&PUSH 1 1)                   ; AREF
7     (LOAD&PUSH 6)
8     (LOAD&PUSH 5)
9     (LOAD&PUSH 2)
10    (CALLSR 1 2)                        ; SYSTEM::STORE
13    (SKIP 1)
15    (LOAD&INC&STORE 3)
17    (LOAD&INC&STORE 2)
19    L19
19    (LOAD&DEC&STORE 1)
21    (PUSH)
22    (CONST&PUSH 0)                      ; 0
23    (CALLSR&JMPIF 1 50 L2)              ; >=
27    (NIL)
28    (SKIP&RET 6)


Disassembly of function #:|(DEFUN $CONCAT_POLYGONS (PL1 PL2 &AUX ...) ...)-45|
(CONST 0) = $CONCAT_POLYGONS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CONCAT_POLYGONS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CONCAT_POLYGONS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CONCAT_POLYGONS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CONCAT_POLYGONS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CONCAT_POLYGONS
8     (SKIP&RET 1)


Disassembly of function $CONCAT_POLYGONS
(CONST 0) = V
(CONST 1) = W
(CONST 2) = L
(CONST 3) = ($POLYGON)
(CONST 4) = 1
(CONST 5) = 0
(CONST 6) = COPY-ARRAY-PORTION
(CONST 7) = 2
(CONST 8) = SLOOP::SLOOP-TYPE-ERROR
(CONST 9) = J
(CONST 10) = 16777214
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (J L W V)
writes special variables : (J L W V)
170 byte-code instructions:
0     (PUSH-NIL 2)
2     (NIL)
3     (BIND 0)                            ; V
5     (LOAD&PUSH 7)
6     (NIL)
7     (BIND 1)                            ; W
9     (LOAD&PUSH 10)
10    (NIL)
11    (BIND 2)                            ; L
13    (PUSH-NIL 2)
15    (LOAD&JMPIFNOT 5 L79)
18    L18
18    (LOAD&JMPIFNOT 9 L79)
21    (LOAD&CAR&PUSH 9)
23    (LOAD 0)
24    (SETVALUE 0)                        ; V
26    (SKIP 1)
28    (LOAD&CAR&PUSH 5)
30    (LOAD 0)
31    (SETVALUE 1)                        ; W
33    (SKIP 1)
35    (GETVALUE&PUSH 0)                   ; V
37    (CALLS2&PUSH 71)                    ; LENGTH
39    (GETVALUE&PUSH 1)                   ; W
41    (CALLS2&PUSH 71)                    ; LENGTH
43    (CALLSR&PUSH 2 53)                  ; +
46    (LOAD 0)
47    (SETVALUE 2)                        ; L
49    (STORE 0)
50    (PUSH-UNBOUND 7)
52    (GETVALUE&PUSH 0)                   ; V
54    (CALLS1&STORE 6 5)                  ; ARRAY-ELEMENT-TYPE
57    (GETVALUE 2)                        ; L
59    (STORE 2)
60    (CALLS1&STORE 29 14)                ; MAKE-ARRAY
63    (LOAD&JMPIF 0 L205)
67    (LOAD&PUSH 14)
68    (NIL)
69    (CONS)
70    (STORE 0)
71    (STORE 1)
72    L72
72    (LOAD&CDR&STORE 9)
74    (LOAD&CDR&STORE 5)
76    (LOAD&JMPIF 5 L18)
79    L79
79    (LOAD 1)
80    (SKIP 2)
82    (UNBIND1)
83    (SKIP 1)
85    (UNBIND1)
86    (SKIP 1)
88    (UNBIND1)
89    (STORE 0)
90    (CONST&PUSH 3)                      ; ($POLYGON)
91    (LOAD&CAR&PUSH 1)
93    (LOAD 2)
94    (CDR)
95    (CAR&PUSH)
96    (LIST 3)
98    (STORE 0)
99    (CONST&PUSH 4)                      ; 1
100   (LOAD&PUSH 5)
101   (CALLS1&PUSH 148)                   ; NTH
103   (CONST&PUSH 4)                      ; 1
104   (LOAD&PUSH 2)
105   (CALLS1&PUSH 148)                   ; NTH
107   (CONST&PUSH 5)                      ; 0
108   (CONST&PUSH 5)                      ; 0
109   (CONST&PUSH 4)                      ; 1
110   (LOAD&PUSH 9)
111   (CALLS1&PUSH 148)                   ; NTH
113   (CALLS2&PUSH 71)                    ; LENGTH
115   (CALL 5 6)                          ; COPY-ARRAY-PORTION
118   (CONST&PUSH 4)                      ; 1
119   (LOAD&PUSH 4)
120   (CALLS1&PUSH 148)                   ; NTH
122   (CONST&PUSH 4)                      ; 1
123   (LOAD&PUSH 2)
124   (CALLS1&PUSH 148)                   ; NTH
126   (CONST&PUSH 4)                      ; 1
127   (LOAD&PUSH 7)
128   (CALLS1&PUSH 148)                   ; NTH
130   (CALLS2&PUSH 71)                    ; LENGTH
132   (CONST&PUSH 5)                      ; 0
133   (CONST&PUSH 4)                      ; 1
134   (LOAD&PUSH 8)
135   (CALLS1&PUSH 148)                   ; NTH
137   (CALLS2&PUSH 71)                    ; LENGTH
139   (CALL 5 6)                          ; COPY-ARRAY-PORTION
142   (CONST&PUSH 7)                      ; 2
143   (LOAD&PUSH 5)
144   (CALLS1&PUSH 148)                   ; NTH
146   (CONST&PUSH 7)                      ; 2
147   (LOAD&PUSH 2)
148   (CALLS1&PUSH 148)                   ; NTH
150   (CONST&PUSH 5)                      ; 0
151   (CONST&PUSH 5)                      ; 0
152   (CONST&PUSH 7)                      ; 2
153   (LOAD&PUSH 9)
154   (CALLS1&PUSH 148)                   ; NTH
156   (CALLS2&PUSH 71)                    ; LENGTH
158   (CALL 5 6)                          ; COPY-ARRAY-PORTION
161   (CONST&PUSH 7)                      ; 2
162   (LOAD&PUSH 5)
163   (CALLS1&PUSH 148)                   ; NTH
165   (CALLS2&PUSH 71)                    ; LENGTH
167   (LOAD&PUSH 0)
168   (CALLS2&JMPIF 13 L173)              ; SYSTEM::FIXNUMP
171   (CALL0 8)                           ; SLOOP::SLOOP-TYPE-ERROR
173   L173
173   (CONST&PUSH 5)                      ; 0
174   (CONST&PUSH 7)                      ; 2
175   (LOAD&PUSH 6)
176   (CALLS1&PUSH 148)                   ; NTH
178   (CALLS2&PUSH 71)                    ; LENGTH
180   (LOAD&PUSH 0)
181   (CALLS2&JMPIF 13 L186)              ; SYSTEM::FIXNUMP
184   (CALL0 8)                           ; SLOOP::SLOOP-TYPE-ERROR
186   L186
186   (LOAD 1)
187   (BIND 9)                            ; J
189   (CONST&PUSH 4)                      ; 1
190   (LOAD&PUSH 11)
191   (CALLS1&PUSH 148)                   ; NTH
193   (CALLS2&PUSH 71)                    ; LENGTH
195   (CONST&PUSH 7)                      ; 2
196   (LOAD&PUSH 11)
197   (CALLS1&PUSH 148)                   ; NTH
199   (CONST&PUSH 7)                      ; 2
200   (LOAD&PUSH 9)
201   (CALLS1&PUSH 148)                   ; NTH
203   (JMP L250)
205   L205
205   (PUSH)
206   (LOAD&PUSH 15)
207   (NIL)
208   (CONS)
209   (STORE 1)
210   (PUSH)
211   (CALLS1 171)                        ; SYSTEM::%RPLACD
213   (JMP L72)
216   L216
216   (LOAD&PUSH 2)
217   (LOAD&PUSH 2)
218   (GETVALUE&PUSH 9)                   ; J
220   (CALLSR&PUSH 1 1)                   ; AREF
223   (CALLSR&PUSH 2 53)                  ; +
226   (LOAD&PUSH 1)
227   (LOAD&PUSH 10)
228   (LOAD&PUSH 2)
229   (CALLSR 1 2)                        ; SYSTEM::STORE
232   (SKIP 1)
234   (LOAD&PUSH 8)
235   (CONST&PUSH 10)                     ; 16777214
236   (CALLSR&JMPIF 1 47 L242)            ; <
240   (CALL0 8)                           ; SLOOP::SLOOP-TYPE-ERROR
242   L242
242   (LOAD&INC&STORE 8)
244   (GETVALUE&PUSH 9)                   ; J
246   (CALLS2 150)                        ; 1+
248   (SETVALUE 9)                        ; J
250   L250
250   (GETVALUE&PUSH 9)                   ; J
252   (LOAD&PUSH 7)
253   (CALLSR&JMPIFNOT 1 50 L216)         ; >=
257   (NIL)
258   (SKIP 3)
260   (UNBIND1)
261   (SKIP&RET 8)


Disassembly of function #:|(DEFUN $COPY_PTS (LIS VEC START) ...)-46|
(CONST 0) = $COPY_PTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $COPY_PTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $COPY_PTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $COPY_PTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $COPY_PTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $COPY_PTS
8     (SKIP&RET 1)


Disassembly of function $COPY_PTS
(CONST 0) = 0.0
(CONST 1) = "bad lis"
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
34 byte-code instructions:
0     L0
0     (LOAD&PUSH 3)
1     (CALLS2&JMPIF 8 L15)                ; NUMBERP
4     (LOAD 3)
5     (JMPIFCONSP L35)
7     (LOAD&PUSH 3)
8     (CALLS2&JMPIF 6 L48)                ; SYMBOLP
11    (CONST&PUSH 1)                      ; "bad lis"
12    (CALLSR 0 29)                       ; ERROR
15    L15
15    (LOAD&PUSH 3)
16    (CALLS2&JMPIF 19 L24)               ; SYSTEM::LONG-FLOAT-P
19    (LOAD&PUSH 3)
20    (CONST&PUSH 0)                      ; 0.0
21    (CALLS2&STORE 174 3)                ; COMMON-LISP:FLOAT
24    L24
24    (LOAD&PUSH 2)
25    (LOAD&PUSH 2)
26    (LOAD&PUSH 5)
27    (CALLSR 1 2)                        ; SYSTEM::STORE
30    (LOAD&PUSH 1)
31    (CALLS2 150)                        ; 1+
33    (SKIP&RET 4)
35    L35
35    (LOAD&CDR&PUSH 3)
37    (LOAD&PUSH 3)
38    (LOAD&CAR&PUSH 5)
40    (LOAD&PUSH 5)
41    (LOAD&PUSH 5)
42    (JSR&PUSH L0)
44    (JMPTAIL 3 7 L0)
48    L48
48    (LOAD 1)
49    (SKIP&RET 4)


Disassembly of function #:|(DEFUN DRAW2D-PARAMETRIC (PARAM RANGE1 &AUX ...) ...)-47|
(CONST 0) = DRAW2D-PARAMETRIC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DRAW2D-PARAMETRIC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRAW2D-PARAMETRIC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRAW2D-PARAMETRIC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DRAW2D-PARAMETRIC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DRAW2D-PARAMETRIC
8     (SKIP&RET 1)


Disassembly of function DRAW2D-PARAMETRIC
(CONST 0) = 4
(CONST 1) = $LISTP
(CONST 2) = $LENGTH
(CONST 3) = 3
(CONST 4) = 2
(CONST 5) = $REST
(CONST 6) = $PLOT_OPTIONS
(CONST 7) = $CONS
(CONST 8) = $APPEND
(CONST 9) = $NTICKS
(CONST 10) = $GET_PLOT_OPTION
(CONST 11) = |$t|
(CONST 12) = |$x|
(CONST 13) = |$y|
(CONST 14) = $NUMER
(CONST 15) = MEVAL*
(CONST 16) = 1.0
(CONST 17) = 0.0
(CONST 18) = X
(CONST 19) = Y
(CONST 20) = (MLIST)
(CONST 21) = 1
(CONST 22) = COERCE-FLOAT-FUN
(CONST 23) = (MLIST)
(CONST 24) = (MLIST SIMP)
(CONST 25) = MOVETO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X $PLOT_OPTIONS)
writes special variables : (Y X)
277 byte-code instructions:
0     (PUSH-NIL 2)
2     (CONST&PUSH 0)                      ; 4
3     (LOAD&PUSH 5)
4     (CALLS1&STORE 148 0)                ; NTH
7     (PUSH)
8     (CALL1&JMPIFNOT 1 L37)              ; $LISTP
11    (LOAD 0)
12    (CDR)
13    (CAR&PUSH)
14    (CALLS2&JMPIFNOT 6 L37)             ; SYMBOLP
17    (LOAD&PUSH 0)
18    (CALL1&PUSH 2)                      ; $LENGTH
20    (JMPIFNOTEQTO 3 L37)                ; 3
23    (LOAD 0)
24    (CDR)
25    (CAR&PUSH)
26    (CALLS2&PUSH 140)                   ; SYMBOL-NAME
28    (CALLS2&PUSH 71)                    ; LENGTH
30    (CONST&PUSH 4)                      ; 2
31    (CALLSR&JMPIFNOT 1 49 L37)          ; <=
35    (LOAD 0)
36    (STORE 1)
37    L37
37    (LOAD&PUSH 4)
38    (CONST&PUSH 3)                      ; 3
39    (CALL2&PUSH 5)                      ; $REST
41    (LOAD&JMPIF 4 L185)
45    (GETVALUE 6)                        ; $PLOT_OPTIONS
47    L47
47    (PUSH)
48    (CALL2 8)                           ; $APPEND
50    (BIND 6)                            ; $PLOT_OPTIONS
52    (CONST&PUSH 4)                      ; 2
53    (CONST&PUSH 9)                      ; $NTICKS
54    (CALL1&PUSH 10)                     ; $GET_PLOT_OPTION
56    (CALLS1&PUSH 148)                   ; NTH
58    (LOAD&JMPIF 5 L64)
61    (CONST&PUSH 11)                     ; |$t|
62    (CALL1 10)                          ; $GET_PLOT_OPTION
64    L64
64    (PUSH)
65    (CONST&PUSH 12)                     ; |$x|
66    (CALL1&PUSH 10)                     ; $GET_PLOT_OPTION
68    (CONST&PUSH 13)                     ; |$y|
69    (CALL1&PUSH 10)                     ; $GET_PLOT_OPTION
71    (T)
72    (BIND 14)                           ; $NUMER
74    (CONST&PUSH 4)                      ; 2
75    (LOAD&PUSH 6)
76    (CALLS1&PUSH 148)                   ; NTH
78    (CALL1&PUSH 15)                     ; MEVAL*
80    (CONST&PUSH 16)                     ; 1.0
81    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
83    (CONST&PUSH 3)                      ; 3
84    (LOAD&PUSH 7)
85    (CALLS1&PUSH 148)                   ; NTH
87    (CALL1&PUSH 15)                     ; MEVAL*
89    (CONST&PUSH 16)                     ; 1.0
90    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
92    (CONST&PUSH 4)                      ; 2
93    (LOAD&PUSH 7)
94    (CALLS1&PUSH 148)                   ; NTH
96    (CALL1&PUSH 15)                     ; MEVAL*
98    (CONST&PUSH 16)                     ; 1.0
99    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
101   (CONST&PUSH 3)                      ; 3
102   (LOAD&PUSH 8)
103   (CALLS1&PUSH 148)                   ; NTH
105   (CALL1&PUSH 15)                     ; MEVAL*
107   (CONST&PUSH 16)                     ; 1.0
108   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
110   (CONST&PUSH 4)                      ; 2
111   (LOAD&PUSH 8)
112   (CALLS1&PUSH 148)                   ; NTH
114   (CALL1&PUSH 15)                     ; MEVAL*
116   (CONST&PUSH 16)                     ; 1.0
117   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
119   (CONST&PUSH 3)                      ; 3
120   (LOAD&PUSH 9)
121   (CALLS1&PUSH 148)                   ; NTH
123   (CALL1&PUSH 15)                     ; MEVAL*
125   (CONST&PUSH 16)                     ; 1.0
126   (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
128   (CONST 17)                          ; 0.0
129   (BIND 18)                           ; X
131   (CONST 17)                          ; 0.0
132   (BIND 19)                           ; Y
134   (LOAD&PUSH 11)
135   (LOAD&PUSH 11)
136   (LOAD&PUSH 13)
137   (CALLSR&PUSH 1 54)                  ; -
140   (LOAD&DEC&PUSH 20)
142   (CALLSR&PUSH 1 56)                  ; /
145   (PUSH-NIL 6)
147   (CONST&PUSH 4)                      ; 2
148   (LOAD&PUSH 35)
150   (CALLS1&PUSH 148)                   ; NTH
152   (CONST&PUSH 20)                     ; (MLIST)
153   (CONST&PUSH 21)                     ; 1
154   (LOAD&PUSH 28)
156   (CALLS1&PUSH 148)                   ; NTH
158   (LIST&PUSH 2)
160   (CALL2 22)                          ; COERCE-FLOAT-FUN
162   (STORE 5)
163   (CONST&PUSH 3)                      ; 3
164   (LOAD&PUSH 35)
166   (CALLS1&PUSH 148)                   ; NTH
168   (CONST&PUSH 23)                     ; (MLIST)
169   (CONST&PUSH 21)                     ; 1
170   (LOAD&PUSH 28)
172   (CALLS1&PUSH 148)                   ; NTH
174   (LIST&PUSH 2)
176   (CALL2 22)                          ; COERCE-FLOAT-FUN
178   (STORE 4)
179   (CONST&PUSH 24)                     ; (MLIST SIMP)
180   (PUSH-NIL 6)
182   (JMP L295)
185   L185
185   (PUSH)
186   (GETVALUE&PUSH 6)                   ; $PLOT_OPTIONS
188   (CALL2 7)                           ; $CONS
190   (JMP L47)
193   L193
193   (GETVALUE&PUSH 18)                  ; X
195   (LOAD&PUSH 25)
197   (CALLSR&STORE 1 50 9)               ; >=
201   (JMPIFNOT L334)
204   L204
204   (LOAD 10)
205   (STORE 8)
207   (JMPIFNOT L338)
210   (JMP L365)
213   L213
213   (PUSH)
214   (LOAD&PUSH 4)
215   (NIL)
216   (CONS)
217   (STORE 5)
218   (PUSH)
219   (CALLS1 171)                        ; SYSTEM::%RPLACD
221   (JMP L353)
224   L224
224   (PUSH)
225   (LOAD&PUSH 3)
226   (NIL)
227   (CONS)
228   (STORE 5)
229   (PUSH)
230   (CALLS1 171)                        ; SYSTEM::%RPLACD
232   (JMP L365)
235   L235
235   (GETVALUE 18)                       ; X
237   (JMP L381)
240   L240
240   (LOAD 23)
242   (JMP L381)
245   L245
245   (PUSH)
246   (LOAD&PUSH 2)
247   (NIL)
248   (CONS)
249   (STORE 5)
250   (PUSH)
251   (CALLS1 171)                        ; SYSTEM::%RPLACD
253   (LOAD&JMPIFNOT 10 L395)
257   L257
257   (GETVALUE 19)                       ; Y
259   (JMP L405)
262   L262
262   (LOAD 21)
264   (JMP L405)
267   L267
267   (PUSH)
268   (LOAD&PUSH 1)
269   (NIL)
270   (CONS)
271   (STORE 5)
272   (PUSH)
273   (CALLS1 171)                        ; SYSTEM::%RPLACD
275   (JMP L415)
278   L278
278   (LOAD&PUSH 14)
279   (LOAD&PUSH 14)
280   (CALLSR&STORE 2 53 14)              ; +
284   (PUSH)
285   (LOAD&PUSH 26)
287   (CALLSR&JMPIFNOT 1 50 L295)         ; >=
291   (LOAD 25)
293   (STORE 14)
295   L295
295   (LOAD&PUSH 12)
296   (LOAD&PUSH 15)
297   (FUNCALL 1)
299   (SETVALUE 18)                       ; X
301   (LOAD&PUSH 11)
302   (LOAD&PUSH 15)
303   (FUNCALL 1)
305   (SETVALUE 19)                       ; Y
307   (PUSH)
308   (LOAD&PUSH 22)
309   (CALLSR&JMPIFNOT 1 49 L319)         ; <=
313   (GETVALUE&PUSH 19)                  ; Y
315   (LOAD&PUSH 23)
316   (CALLSR 1 50)                       ; >=
319   L319
319   (STORE 10)
321   (GETVALUE&PUSH 18)                  ; X
323   (LOAD&PUSH 24)
324   (CALLSR&JMPIF 1 49 L193)            ; <=
329   (STORE 9)
331   (JMPIF L204)
334   L334
334   (STORE 8)
336   (JMPIF L365)
338   L338
338   (LOAD&JMPIF 7 L365)
341   (CONST 25)                          ; MOVETO
343   (STORE 3)
344   (LOAD&JMPIF 4 L213)
348   (LOAD&PUSH 3)
349   (NIL)
350   (CONS)
351   (STORE 4)
352   (STORE 5)
353   L353
353   (CONST 25)                          ; MOVETO
355   (STORE 2)
356   (LOAD&JMPIF 4 L224)
360   (LOAD&PUSH 2)
361   (NIL)
362   (CONS)
363   (STORE 4)
364   (STORE 5)
365   L365
365   (LOAD 8)
366   (STORE 7)
367   (LOAD&JMPIF 9 L235)
371   (GETVALUE&PUSH 18)                  ; X
373   (LOAD&PUSH 24)
374   (CALLSR&JMPIF 1 48 L240)            ; >
379   (LOAD 24)
381   L381
381   (STORE 1)
382   (LOAD&JMPIF 4 L245)
386   (LOAD&PUSH 1)
387   (NIL)
388   (CONS)
389   (STORE 4)
390   (STORE 5)
391   (LOAD&JMPIF 10 L257)
395   L395
395   (GETVALUE&PUSH 19)                  ; Y
397   (LOAD&PUSH 22)
398   (CALLSR&JMPIF 1 48 L262)            ; >
403   (LOAD 22)
405   L405
405   (STORE 0)
406   (LOAD&JMPIF 4 L267)
410   (LOAD&PUSH 0)
411   (NIL)
412   (CONS)
413   (STORE 4)
414   (STORE 5)
415   L415
415   (LOAD&PUSH 14)
416   (LOAD&PUSH 26)
418   (CALLSR&JMPIFNOT 1 50 L278)         ; >=
423   (LOAD 5)
424   (SKIP 6)
426   (CONS)
427   (SKIP 8)
429   (UNBIND 2)
431   (SKIP 6)
433   (UNBIND1)
434   (SKIP 4)
436   (UNBIND1)
437   (SKIP&RET 5)


Disassembly of function #:|(DEFUN DRAW2D (F RANGE) ...)-48|
(CONST 0) = DRAW2D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DRAW2D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DRAW2D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DRAW2D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DRAW2D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DRAW2D
8     (SKIP&RET 1)


Disassembly of function DRAW2D
(CONST 0) = F
(CONST 1) = $LISTP
(CONST 2) = $PARAMETRIC
(CONST 3) = DRAW2D-PARAMETRIC
(CONST 4) = 2
(CONST 5) = $NTICKS
(CONST 6) = $GET_PLOT_OPTION
(CONST 7) = |$y|
(CONST 8) = $NUMER
(CONST 9) = (MLIST)
(CONST 10) = 1
(CONST 11) = COERCE-FLOAT-FUN
(CONST 12) = MEVAL*
(CONST 13) = 1.0
(CONST 14) = X
(CONST 15) = 3
(CONST 16) = 0.0
(CONST 17) = Y
(CONST 18) = (MLIST)
(CONST 19) = 0
(CONST 20) = MOVETO
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X F)
writes special variables : (Y X F)
302 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; F
3     (GETVALUE&PUSH 0)                   ; F
5     (CALL1&JMPIFNOT 1 L16)              ; $LISTP
8     (GETVALUE 0)                        ; F
10    (CDR)
11    (CAR&PUSH)
12    (JMPIFEQTO 2 L358)                  ; $PARAMETRIC
16    L16
16    (CONST&PUSH 4)                      ; 2
17    (CONST&PUSH 5)                      ; $NTICKS
18    (CALL1&PUSH 6)                      ; $GET_PLOT_OPTION
20    (CALLS1&PUSH 148)                   ; NTH
22    (CONST&PUSH 7)                      ; |$y|
23    (CALL1&PUSH 6)                      ; $GET_PLOT_OPTION
25    (T)
26    (BIND 8)                            ; $NUMER
28    (GETVALUE&PUSH 0)                   ; F
30    (CONST&PUSH 9)                      ; (MLIST)
31    (CONST&PUSH 10)                     ; 1
32    (LOAD&PUSH 12)
33    (CALLS1&PUSH 148)                   ; NTH
35    (LIST&PUSH 2)
37    (CALL2 11)                          ; COERCE-FLOAT-FUN
39    (SETVALUE 0)                        ; F
41    (CONST&PUSH 4)                      ; 2
42    (LOAD&PUSH 10)
43    (CALLS1&PUSH 148)                   ; NTH
45    (CALL1&PUSH 12)                     ; MEVAL*
47    (CONST&PUSH 13)                     ; 1.0
48    (CALLS2 174)                        ; COMMON-LISP:FLOAT
50    (BIND 14)                           ; X
52    (CONST&PUSH 15)                     ; 3
53    (LOAD&PUSH 13)
54    (CALLS1&PUSH 148)                   ; NTH
56    (CALL1&PUSH 12)                     ; MEVAL*
58    (CONST&PUSH 13)                     ; 1.0
59    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
61    (CONST&PUSH 4)                      ; 2
62    (LOAD&PUSH 8)
63    (CALLS1&PUSH 148)                   ; NTH
65    (CALL1&PUSH 12)                     ; MEVAL*
67    (CONST&PUSH 13)                     ; 1.0
68    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
70    (CONST&PUSH 15)                     ; 3
71    (LOAD&PUSH 9)
72    (CALLS1&PUSH 148)                   ; NTH
74    (CALL1&PUSH 12)                     ; MEVAL*
76    (CONST&PUSH 13)                     ; 1.0
77    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
79    (LOAD&PUSH 2)
80    (GETVALUE&PUSH 14)                  ; X
82    (CALLSR&PUSH 1 54)                  ; -
85    (LOAD&PUSH 11)
86    (CALL1&PUSH 12)                     ; MEVAL*
88    (CONST&PUSH 13)                     ; 1.0
89    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
91    (CALLSR&PUSH 1 56)                  ; /
94    (CONST&PUSH 16)                     ; 0.0
95    (CONST&PUSH 16)                     ; 0.0
96    (GETVALUE&PUSH 0)                   ; F
98    (GETVALUE&PUSH 14)                  ; X
100   (FUNCALL 1)
102   (BIND 17)                           ; Y
104   (CONST&PUSH 16)                     ; 0.0
105   (LOAD&PUSH 7)
106   (LOAD&PUSH 9)
107   (CALLSR&PUSH 1 54)                  ; -
110   (CONST&PUSH 13)                     ; 1.0
111   (CALLSR&PUSH 1 56)                  ; /
114   (LOAD&PUSH 7)
115   (LOAD&PUSH 8)
116   (CALLSR&PUSH 2 55)                  ; *
119   (PUSH-NIL 2)
121   (GETVALUE&PUSH 14)                  ; X
123   (LOAD&PUSH 11)
124   (CALLSR 1 54)                       ; -
127   (SETVALUE 14)                       ; X
129   (CONST&PUSH 18)                     ; (MLIST)
130   (PUSH-NIL 6)
132   L132
132   (LOAD&PUSH 17)
133   (GETVALUE&PUSH 14)                  ; X
135   (CALLSR&STORE 2 53 16)              ; +
139   (GETVALUE&PUSH 0)                   ; F
141   (LOAD&PUSH 17)
142   (FUNCALL 1)
144   (STORE 15)
146   (PUSH)
147   (LOAD&PUSH 19)
148   (CALLSR&JMPIF 1 49 L365)            ; <=
153   (STORE 8)
155   (JMPIFNOT L217)
157   L157
157   (LOAD&PUSH 15)
158   (GETVALUE&PUSH 17)                  ; Y
160   (CALLSR&STORE 1 54 11)              ; -
164   (PUSH)
165   (CONST&PUSH 19)                     ; 0
166   (CALLSR&JMPIFNOT 1 47 L175)         ; <
170   (LOAD&PUSH 11)
171   (CALLSR&STORE 0 54 11)              ; -
175   L175
175   (LOAD&PUSH 11)
176   (LOAD&PUSH 18)
177   (CALLSR&JMPIFNOT 1 48 L217)         ; >
181   (GETVALUE&PUSH 14)                  ; X
183   (LOAD&PUSH 10)
184   (LOAD&PUSH 13)
185   (CALLSR&PUSH 1 56)                  ; /
188   (CALLSR&STORE 2 53 16)              ; +
192   (GETVALUE&PUSH 0)                   ; F
194   (LOAD&PUSH 17)
195   (FUNCALL 1)
197   (STORE 15)
199   (PUSH)
200   (LOAD&PUSH 19)
201   (CALLSR&JMPIF 1 49 L377)            ; <=
206   (STORE 8)
208   (JMPIF L217)
210   L210
210   (LOAD&PUSH 17)
211   (GETVALUE&PUSH 14)                  ; X
213   (CALLSR&STORE 2 53 16)              ; +
217   L217
217   (LOAD 16)
219   (SETVALUE 14)                       ; X
221   (LOAD 15)
223   (SETVALUE 17)                       ; Y
225   (LOAD&JMPIF 7 L231)
228   (LOAD&JMPIFNOT 8 L237)
231   L231
231   (LOAD&PUSH 11)
232   (LOAD&PUSH 11)
233   (CALLSR&JMPIFNOT 1 48 L259)         ; >
237   L237
237   (CONST 20)                          ; MOVETO
238   (STORE 3)
239   (LOAD&JMPIF 4 L389)
243   (LOAD&PUSH 3)
244   (NIL)
245   (CONS)
246   (STORE 4)
247   (STORE 5)
248   L248
248   (CONST 20)                          ; MOVETO
249   (STORE 2)
250   (LOAD&JMPIF 4 L400)
254   (LOAD&PUSH 2)
255   (NIL)
256   (CONS)
257   (STORE 4)
258   (STORE 5)
259   L259
259   (LOAD 8)
260   (STORE 7)
261   (LOAD&JMPIF 4 L411)
265   (LOAD&PUSH 16)
266   (NIL)
267   (CONS)
268   (STORE 4)
269   (STORE 5)
270   (LOAD&JMPIF 8 L423)
274   L274
274   (LOAD&PUSH 15)
275   (LOAD&PUSH 19)
276   (CALLSR&JMPIF 1 48 L428)            ; >
281   (LOAD 19)
283   L283
283   (STORE 1)
284   (LOAD&JMPIF 4 L433)
288   (LOAD&PUSH 1)
289   (NIL)
290   (CONS)
291   (STORE 4)
292   (STORE 5)
293   L293
293   (GETVALUE&PUSH 14)                  ; X
295   (LOAD&PUSH 21)
296   (CALLSR&JMPIFNOT 1 50 L132)         ; >=
301   (LOAD&JMPIF 4 L444)
305   (LOAD&PUSH 20)
306   (NIL)
307   (CONS)
308   (STORE 4)
309   (STORE 5)
310   L310
310   (GETVALUE&PUSH 0)                   ; F
312   (LOAD&PUSH 21)
313   (FUNCALL&PUSH 1)
315   (LOAD&PUSH 0)
316   (LOAD&PUSH 20)
317   (CALLSR&JMPIF 1 50 L455)            ; >=
322   (LOAD&PUSH 0)
323   (LOAD&PUSH 21)
324   (CALLSR&JMPIF 1 49 L460)            ; <=
329   (LOAD 0)
330   L330
330   (SKIP 1)
332   (STORE 0)
333   (LOAD&JMPIF 4 L465)
337   (LOAD&PUSH 0)
338   (NIL)
339   (CONS)
340   (STORE 4)
341   (STORE 5)
342   (LOAD 5)
343   L343
343   (SKIP 6)
345   (CONS)
346   (SKIP 5)
348   (UNBIND1)
349   (SKIP 6)
351   (UNBIND 2)
353   (SKIP 2)
355   L355
355   (UNBIND1)
356   (SKIP&RET 3)
358   L358
358   (GETVALUE&PUSH 0)                   ; F
360   (LOAD&PUSH 5)
361   (CALL2 3)                           ; DRAW2D-PARAMETRIC
363   (JMP L355)
365   L365
365   (LOAD&PUSH 15)
366   (LOAD&PUSH 20)
367   (CALLSR&STORE 1 50 8)               ; >=
371   (JMPIFNOT L217)
374   (JMP L157)
377   L377
377   (LOAD&PUSH 15)
378   (LOAD&PUSH 20)
379   (CALLSR&STORE 1 50 8)               ; >=
383   (JMPIFNOT L210)
386   (JMP L217)
389   L389
389   (PUSH)
390   (LOAD&PUSH 4)
391   (NIL)
392   (CONS)
393   (STORE 5)
394   (PUSH)
395   (CALLS1 171)                        ; SYSTEM::%RPLACD
397   (JMP L248)
400   L400
400   (PUSH)
401   (LOAD&PUSH 3)
402   (NIL)
403   (CONS)
404   (STORE 5)
405   (PUSH)
406   (CALLS1 171)                        ; SYSTEM::%RPLACD
408   (JMP L259)
411   L411
411   (PUSH)
412   (LOAD&PUSH 17)
413   (NIL)
414   (CONS)
415   (STORE 5)
416   (PUSH)
417   (CALLS1 171)                        ; SYSTEM::%RPLACD
419   (LOAD&JMPIFNOT 8 L274)
423   L423
423   (LOAD 15)
425   (JMP L283)
428   L428
428   (LOAD 18)
430   (JMP L283)
433   L433
433   (PUSH)
434   (LOAD&PUSH 2)
435   (NIL)
436   (CONS)
437   (STORE 5)
438   (PUSH)
439   (CALLS1 171)                        ; SYSTEM::%RPLACD
441   (JMP L293)
444   L444
444   (PUSH)
445   (LOAD&PUSH 21)
446   (NIL)
447   (CONS)
448   (STORE 5)
449   (PUSH)
450   (CALLS1 171)                        ; SYSTEM::%RPLACD
452   (JMP L310)
455   L455
455   (LOAD 19)
457   (JMP L330)
460   L460
460   (LOAD 20)
462   (JMP L330)
465   L465
465   (PUSH)
466   (LOAD&PUSH 1)
467   (NIL)
468   (CONS)
469   (STORE 5)
470   (PUSH)
471   (CALLS1 171)                        ; SYSTEM::%RPLACD
473   (LOAD 5)
474   (JMP L343)


Disassembly of function #:|(DEFUN GET-RANGE (LIS) ...)-49|
(CONST 0) = GET-RANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-RANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-RANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-RANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-RANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-RANGE
8     (SKIP&RET 1)


Disassembly of function GET-RANGE
(CONST 0) = MOST-POSITIVE-LONG-FLOAT
(CONST 1) = MOST-NEGATIVE-LONG-FLOAT
(CONST 2) = L
(CONST 3) = 2.0L0
(CONST 4) = (MLIST)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (L MOST-NEGATIVE-LONG-FLOAT MOST-POSITIVE-LONG-FLOAT)
writes special variable : (L)
46 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; MOST-POSITIVE-LONG-FLOAT
2     (GETVALUE&PUSH 1)                   ; MOST-NEGATIVE-LONG-FLOAT
4     (LOAD 3)
5     (BIND 2)                            ; L
7     (GETVALUE 2)                        ; L
9     (JMPIFNOT L61)
11    L11
11    (GETVALUE 2)                        ; L
13    (CAR&PUSH)
14    (CALLS2&JMPIF 15 L27)               ; FLOATP
17    (GETVALUE&PUSH 2)                   ; L
19    (GETVALUE 2)                        ; L
21    (CAR&PUSH)
22    (CONST&PUSH 3)                      ; 2.0L0
23    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
25    (CALLS1 169)                        ; SYSTEM::%RPLACA
27    L27
27    (GETVALUE 2)                        ; L
29    (CAR&PUSH)
30    (LOAD&PUSH 5)
31    (CALLSR&JMPIFNOT 1 47 L39)          ; <
35    (GETVALUE 2)                        ; L
37    (CAR)
38    (STORE 4)
39    L39
39    (LOAD&PUSH 3)
40    (GETVALUE 2)                        ; L
42    (CAR&PUSH)
43    (CALLSR&JMPIFNOT 1 47 L51)          ; <
47    (GETVALUE 2)                        ; L
49    (CAR)
50    (STORE 3)
51    L51
51    (GETVALUE 2)                        ; L
53    (CDR)
54    (CDR)
55    (SETVALUE 2)                        ; L
57    (GETVALUE 2)                        ; L
59    (JMPIF L11)
61    L61
61    (UNBIND1)
62    (CONST&PUSH 4)                      ; (MLIST)
63    (LOAD&PUSH 2)
64    (LOAD&PUSH 2)
65    (LIST 3)
67    (SKIP&RET 4)


Disassembly of function #:|(DEFVAR $WINDOW_SIZE '(# 612.0 792))-50|
(CONST 0) = (SPECIAL $WINDOW_SIZE)
(CONST 1) = $WINDOW_SIZE
(CONST 2) = ((MLIST) 612.0 792)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $WINDOW_SIZE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $WINDOW_SIZE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $WINDOW_SIZE
8     (CONST&PUSH 2)                      ; ((MLIST) 612.0 792)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $WINDOW_SIZE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $GETRANGE (X &OPTIONAL XRANGE ...) ...)-51|
(CONST 0) = $GETRANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $GETRANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $GETRANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $GETRANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $GETRANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $GETRANGE
8     (SKIP&RET 1)


Disassembly of function $GETRANGE
(CONST 0) = X
(CONST 1) = GET-RANGE
(CONST 2) = SETUP-FOR-PS-RANGE
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variable: (X)
24 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (UNBOUND->NIL 4)
5     (NIL&PUSH)
6     (GETVALUE 0)                        ; X
8     (CDR)
9     (CDR&PUSH)
10    (CALL1 1)                           ; GET-RANGE
12    (CDR)
13    (STORE 0)
14    (LOAD&JMPIF 5 L24)
17    (GETVALUE 0)                        ; X
19    (CDR&PUSH)
20    (CALL1 1)                           ; GET-RANGE
22    (CDR)
23    (STORE 5)
24    L24
24    (LOAD&PUSH 5)
25    (LOAD&PUSH 1)
26    (NIL&PUSH)
27    (CALL 3 2)                          ; SETUP-FOR-PS-RANGE
30    (SKIP 1)
32    (UNBIND1)
33    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $PARAMPLOT (F G RANGE ...) ...)-52|
(CONST 0) = $PARAMPLOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PARAMPLOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PARAMPLOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PARAMPLOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PARAMPLOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PARAMPLOT
8     (SKIP&RET 1)


Disassembly of function $PARAMPLOT
(CONST 0) = F
(CONST 1) = G
(CONST 2) = 0.1
(CONST 3) = DELTA
(CONST 4) = $NUMER
(CONST 5) = COERCE-FLOAT-FUN
(CONST 6) = MEVAL*
(CONST 7) = 2
(CONST 8) = 1
(CONST 9) = $NTICKS
(CONST 10) = $GET_PLOT_OPTION
(CONST 11) = (MLIST)
(CONST 12) = 1.0
(CONST 13) = $CLOSEPS
(CONST 14) = $GETRANGE
(CONST 15) = $PSDRAW_CURVE
(CONST 16) = $VIEWPS
3 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (DELTA G F)
writes special variables : (DELTA G F)
117 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; F
3     (LOAD 6)
4     (BIND 1)                            ; G
6     (BOUNDP 7)
8     (PUSH)
9     (JMPIFBOUNDP 8 L13)
12    (CONST 2)                           ; 0.1
13    L13
13    (BIND 3)                            ; DELTA
15    (NIL&PUSH)
16    (T)
17    (BIND 4)                            ; $NUMER
19    (GETVALUE&PUSH 0)                   ; F
21    (CALL1 5)                           ; COERCE-FLOAT-FUN
23    (SETVALUE 0)                        ; F
25    (GETVALUE&PUSH 1)                   ; G
27    (CALL1 5)                           ; COERCE-FLOAT-FUN
29    (SETVALUE 1)                        ; G
31    (LOAD&PUSH 16)
32    (CALL1 6)                           ; MEVAL*
34    (STORE 16)
36    (LOAD&JMPIF 7 L61)
39    (CONST&PUSH 7)                      ; 2
40    (LOAD&PUSH 17)
41    (CALLS1&PUSH 148)                   ; NTH
43    (CONST&PUSH 8)                      ; 1
44    (LOAD&PUSH 18)
45    (CALLS1&PUSH 148)                   ; NTH
47    (CALLSR&PUSH 1 54)                  ; -
50    (CONST&PUSH 7)                      ; 2
51    (CONST&PUSH 9)                      ; $NTICKS
52    (CALL1&PUSH 10)                     ; $GET_PLOT_OPTION
54    (CALLS1&PUSH 148)                   ; NTH
56    (CALLSR 1 56)                       ; /
59    (SETVALUE 3)                        ; DELTA
61    L61
61    (CONST&PUSH 11)                     ; (MLIST)
62    (CONST&PUSH 8)                      ; 1
63    (LOAD&PUSH 18)
64    (CALLS1&PUSH 148)                   ; NTH
66    (CALL1&PUSH 6)                      ; MEVAL*
68    (CONST&PUSH 12)                     ; 1.0
69    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
71    (CONST&PUSH 7)                      ; 2
72    (LOAD&PUSH 19)
73    (CALLS1&PUSH 148)                   ; NTH
75    (CALL1&PUSH 6)                      ; MEVAL*
77    (CONST&PUSH 12)                     ; 1.0
78    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
80    (PUSH-NIL 4)
82    (JMP L139)
84    L84
84    (PUSH)
85    (LOAD&PUSH 2)
86    (NIL)
87    (CONS)
88    (STORE 3)
89    (PUSH)
90    (CALLS1 171)                        ; SYSTEM::%RPLACD
92    (JMP L118)
94    L94
94    (PUSH)
95    (LOAD&PUSH 1)
96    (NIL)
97    (CONS)
98    (STORE 3)
99    (PUSH)
100   (CALLS1 171)                        ; SYSTEM::%RPLACD
102   (JMP L132)
104   L104
104   (GETVALUE&PUSH 0)                   ; F
106   (LOAD&PUSH 6)
107   (FUNCALL 1)
109   (STORE 1)
110   (LOAD&JMPIF 2 L84)
113   (LOAD&PUSH 1)
114   (NIL)
115   (CONS)
116   (STORE 2)
117   (STORE 3)
118   L118
118   (GETVALUE&PUSH 1)                   ; G
120   (LOAD&PUSH 6)
121   (FUNCALL 1)
123   (STORE 0)
124   (LOAD&JMPIF 2 L94)
127   (LOAD&PUSH 0)
128   (NIL)
129   (CONS)
130   (STORE 2)
131   (STORE 3)
132   L132
132   (LOAD&PUSH 5)
133   (GETVALUE&PUSH 3)                   ; DELTA
135   (CALLSR&STORE 2 53 5)               ; +
139   L139
139   (LOAD&PUSH 5)
140   (LOAD&PUSH 5)
141   (CALLSR&JMPIF 1 47 L104)            ; <
145   (LOAD 3)
146   (SKIP 6)
148   (CONS)
149   (STORE 3)
150   (CALL0 13)                          ; $CLOSEPS
152   (LOAD&PUSH 3)
153   (CALL1 14)                          ; $GETRANGE
155   (LOAD&PUSH 3)
156   (CALL1 15)                          ; $PSDRAW_CURVE
158   (CALL0 13)                          ; $CLOSEPS
160   (CALL0 16)                          ; $VIEWPS
162   (UNBIND1)
163   (SKIP 1)
165   (UNBIND1)
166   (SKIP 1)
168   (UNBIND 2)
170   (SKIP&RET 5)


Disassembly of function #:|(DEFUN $PLOT2D_PS (FUN RANGE &REST ...) ...)-53|
(CONST 0) = $PLOT2D_PS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PLOT2D_PS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PLOT2D_PS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PLOT2D_PS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PLOT2D_PS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PLOT2D_PS
8     (SKIP&RET 1)


Disassembly of function $PLOT2D_PS
(CONST 0) = FUN
(CONST 1) = OPTIONS
(CONST 2) = $NUMER
(CONST 3) = $DISPLAY2D
(CONST 4) = $PLOT_OPTIONS
(CONST 5) = V
(CONST 6) = $SET_PLOT_OPTION
(CONST 7) = CHECK-RANGE
(CONST 8) = DRAW2D
(CONST 9) = $CLOSEPS
(CONST 10) = $GETRANGE
(CONST 11) = $PSDRAW_CURVE
(CONST 12) = $REST
(CONST 13) = $PSAXES
(CONST 14) = "showpage"
(CONST 15) = P
(CONST 16) = $VIEWPS
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (FUN OPTIONS $PLOT_OPTIONS)
writes special variable : (V)
49 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FUN
3     (LOAD 4)
4     (BIND 1)                            ; OPTIONS
6     (T)
7     (BIND 2)                            ; $NUMER
9     (NIL)
10    (BIND 3)                            ; $DISPLAY2D
12    (GETVALUE 4)                        ; $PLOT_OPTIONS
14    (BIND 4)                            ; $PLOT_OPTIONS
16    (GETVALUE&PUSH 1)                   ; OPTIONS
18    (NIL)
19    (BIND 5)                            ; V
21    (JMP L32)
23    L23
23    (LOAD 3)
24    (CAR)
25    (SETVALUE 5)                        ; V
27    (PUSH)
28    (CALL1 6)                           ; $SET_PLOT_OPTION
30    (LOAD&CDR&STORE 3)
32    L32
32    (LOAD&PUSH 3)
33    (CALLS1&JMPIFNOT 146 L23)           ; ENDP
36    (UNBIND1)
37    (SKIP 1)
39    (LOAD&PUSH 17)
40    (CALL1 7)                           ; CHECK-RANGE
42    (STORE 17)
44    (GETVALUE&PUSH 0)                   ; FUN
46    (LOAD&PUSH 18)
47    (CALL2&PUSH 8)                      ; DRAW2D
49    (CALL0 9)                           ; $CLOSEPS
51    (LOAD&PUSH 0)
52    (LOAD 19)
54    (CDR)
55    (CDR&PUSH)
56    (CALL2 10)                          ; $GETRANGE
58    (LOAD&PUSH 0)
59    (CALL1 11)                          ; $PSDRAW_CURVE
61    (LOAD&PUSH 18)
62    (CALL1&PUSH 12)                     ; $REST
64    (CALL1 13)                          ; $PSAXES
66    (CONST&PUSH 14)                     ; "showpage"
67    (CALL1 15)                          ; P
69    (CALL0 16)                          ; $VIEWPS
71    (SKIP 1)
73    (UNBIND 5)
75    (SKIP&RET 4)


Disassembly of function #:|(DEFVAR $GNUPLOT_COMMAND "mgnuplot")-54|
(CONST 0) = (SPECIAL $GNUPLOT_COMMAND)
(CONST 1) = $GNUPLOT_COMMAND
(CONST 2) = "mgnuplot"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $GNUPLOT_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $GNUPLOT_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $GNUPLOT_COMMAND
8     (CONST&PUSH 2)                      ; "mgnuplot"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $GNUPLOT_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $GEOMVIEW_COMMAND "geomview maxout.geomview")-55|
(CONST 0) = (SPECIAL $GEOMVIEW_COMMAND)
(CONST 1) = $GEOMVIEW_COMMAND
(CONST 2) = "geomview maxout.geomview"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $GEOMVIEW_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $GEOMVIEW_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $GEOMVIEW_COMMAND
8     (CONST&PUSH 2)                      ; "geomview maxout.geomview"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $GEOMVIEW_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $OPENMATH_PLOT_COMMAND "omplotdata")-56|
(CONST 0) = (SPECIAL $OPENMATH_PLOT_COMMAND)
(CONST 1) = $OPENMATH_PLOT_COMMAND
(CONST 2) = "omplotdata"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $OPENMATH_PLOT_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $OPENMATH_PLOT_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $OPENMATH_PLOT_COMMAND
8     (CONST&PUSH 2)                      ; "omplotdata"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $OPENMATH_PLOT_COMMAND
12    (SKIP&RET 1)

WARNING in $PLOT2D in lines 727..764 :
*MAXIMA-PLOTDIR* is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN $PLOT2D (FUN &OPTIONAL RANGE ...) ...)-57|
(CONST 0) = $PLOT2D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PLOT2D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PLOT2D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PLOT2D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PLOT2D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PLOT2D
8     (SKIP&RET 1)


Disassembly of function $PLOT2D
(CONST 0) = FUN
(CONST 1) = OPTIONS
(CONST 2) = $NUMER
(CONST 3) = $DISPLAY2D
(CONST 4) = 0
(CONST 5) = $PLOT_OPTIONS
(CONST 6) = V
(CONST 7) = $SET_PLOT_OPTION
(CONST 8) = $LISTP
(CONST 9) = (MLIST)
(CONST 10) = $PARAMETRIC
(CONST 11) = 4
(CONST 12) = (MLIST)
(CONST 13) = $PLOT_FORMAT
(CONST 14) = 2
(CONST 15) = $GET_PLOT_OPTION
(CONST 16) = $OPENMATH
(CONST 17) = $PLOT2DOPEN
(CONST 18) = CHECK-RANGE
(CONST 19) = STRIPDOLLAR
(CONST 20) = "maxout."
(CONST 21) = :OUTPUT
(CONST 22) = ST
(CONST 23) = MSTRING
(CONST 24) = STRING
(CONST 25) = 9
(CONST 26) = "Fun"
(CONST 27) = $XGRAPH
(CONST 28) = #<COMPILED-CLOSURE $PLOT2D-1>
(CONST 29) = FORMAT
(CONST 30) = $GNUPLOT
(CONST 31) = #<COMPILED-CLOSURE $PLOT2D-2>
(CONST 32) = DRAW2D
(CONST 33) = W
(CONST 34) = MOVETO
(CONST 35) = #<COMPILED-CLOSURE $PLOT2D-3>
(CONST 36) = #<COMPILED-CLOSURE $PLOT2D-4>
(CONST 37) = CLOSE
(CONST 38) = :ABORT
(CONST 39) = *MAXIMA-PLOTDIR*
(CONST 40) = "/"
(CONST 41) = $GNUPLOT_COMMAND
(CONST 42) = " -plot2d maxout.gnuplot -title '"
(CONST 43) = "'"
(CONST 44) = $SYSTEM
(CONST 45) = "xgraph -t 'Maxima Plot' < maxout.xgraph &"
1 required argument
1 optional argument
Rest parameter
No keyword parameters
reads special variables: ($GNUPLOT_COMMAND *MAXIMA-PLOTDIR* W V ST STRING FUN OPTIONS $PLOT_OPTIONS)
writes special variables : (W FUN V)
245 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FUN
3     (UNBOUND->NIL 5)
5     (LOAD 4)
6     (BIND 1)                            ; OPTIONS
8     (T)
9     (BIND 2)                            ; $NUMER
11    (NIL)
12    (BIND 3)                            ; $DISPLAY2D
14    (CONST&PUSH 4)                      ; 0
15    (PUSH-NIL 3)
17    (GETVALUE 5)                        ; $PLOT_OPTIONS
19    (BIND 5)                            ; $PLOT_OPTIONS
21    (GETVALUE&PUSH 1)                   ; OPTIONS
23    (NIL)
24    (BIND 6)                            ; V
26    (JMP L74)
28    L28
28    (CONST&PUSH 17)                     ; $PLOT2DOPEN
29    (GETVALUE&PUSH 0)                   ; FUN
31    (LOAD&PUSH 23)
32    (GETVALUE 1)                        ; OPTIONS
34    (APPLY 2)
36    (JMP L389)
39    L39
39    (GETVALUE 24)                       ; STRING
41    (JMP L242)
44    L44
44    (GETVALUE&PUSH 22)                  ; ST
46    (CONST 28)                          ; #<COMPILED-CLOSURE $PLOT2D-1>
48    (JMP L258)
51    L51
51    (LOAD&PUSH 23)
52    (JMPIFEQTO 30 L307)                 ; $GNUPLOT
56    (GETVALUE&PUSH 22)                  ; ST
58    (CONST&PUSH 35)                     ; #<COMPILED-CLOSURE $PLOT2D-3>
60    (CALL2 29)                          ; FORMAT
62    (JMP L307)
65    L65
65    (LOAD 3)
66    (CAR)
67    (SETVALUE 6)                        ; V
69    (PUSH)
70    (CALL1 7)                           ; $SET_PLOT_OPTION
72    (LOAD&CDR&STORE 3)
74    L74
74    (LOAD&PUSH 3)
75    (CALLS1&JMPIFNOT 146 L65)           ; ENDP
78    (UNBIND1)
79    (SKIP 1)
81    (GETVALUE&PUSH 0)                   ; FUN
83    (CALL1&JMPIF 8 L93)                 ; $LISTP
86    (CONST&PUSH 9)                      ; (MLIST)
87    (GETVALUE&PUSH 0)                   ; FUN
89    (LIST 2)
91    (SETVALUE 0)                        ; FUN
93    L93
93    (GETVALUE 0)                        ; FUN
95    (CDR)
96    (CAR&PUSH)
97    (JMPIFNOTEQTO 10 L116)              ; $PARAMETRIC
100   (LOAD&JMPIF 21 L109)
103   (CONST&PUSH 11)                     ; 4
104   (GETVALUE&PUSH 0)                   ; FUN
106   (CALLS1&STORE 148 21)               ; NTH
109   L109
109   (CONST&PUSH 12)                     ; (MLIST)
110   (GETVALUE&PUSH 0)                   ; FUN
112   (LIST 2)
114   (SETVALUE 0)                        ; FUN
116   L116
116   (CONST&PUSH 13)                     ; $PLOT_FORMAT
117   (CONST&PUSH 14)                     ; 2
118   (CALL2&PUSH 15)                     ; $GET_PLOT_OPTION
120   (JMPIFEQTO 16 L28)                  ; $OPENMATH
124   (LOAD&PUSH 21)
125   (CALL1 18)                          ; CHECK-RANGE
127   (CONST&PUSH 13)                     ; $PLOT_FORMAT
128   (CONST&PUSH 14)                     ; 2
129   (CALL2 15)                          ; $GET_PLOT_OPTION
131   (STORE 5)
132   (PUSH-UNBOUND 2)
134   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
136   (LOAD&PUSH 6)
137   (CALL1&PUSH 19)                     ; STRIPDOLLAR
139   (CONST&PUSH 20)                     ; "maxout."
140   (LOAD&PUSH 2)
141   (PUSH-UNBOUND 2)
143   (CALLS1 137)                        ; WRITE-STRING
145   (PUSH-UNBOUND 1)
147   (LOAD&PUSH 2)
148   (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
150   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
152   (LOAD&PUSH 1)
153   (LOAD&PUSH 1)
154   (CALLS1 132)                        ; PRINC
156   (LOAD&PUSH 0)
157   (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
159   (PUSH-UNBOUND 2)
161   (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
163   (LOAD&PUSH 3)
164   (PUSH-UNBOUND 2)
166   (CALLS1 137)                        ; WRITE-STRING
168   (SKIP 2)
170   (LOAD&PUSH 0)
171   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
173   (SKIP 1)
175   (STORE 4)
176   (PUSH)
177   (CONST&PUSH 21)                     ; :OUTPUT
178   (PUSH-UNBOUND 5)
180   (CALLS1 249)                        ; OPEN
182   (BIND 22)                           ; ST
184   (UNWIND-PROTECT-OPEN L367)
187   (GETVALUE 0)                        ; FUN
189   (CDR&PUSH)
190   (NIL)
191   (BIND 6)                            ; V
193   L193
193   (LOAD&PUSH 3)
194   (CALLS1&JMPIF 146 L323)             ; ENDP
198   (LOAD 3)
199   (CAR)
200   (SETVALUE 6)                        ; V
202   (LOAD&INC&STORE 15)
204   (GETVALUE&PUSH 6)                   ; V
206   (CALL1&PUSH 23)                     ; MSTRING
208   (CONST&PUSH 24)                     ; STRING
209   (CALLS2 42)                         ; COERCE
211   (BIND 24)                           ; STRING
213   (GETVALUE&PUSH 24)                  ; STRING
215   (CALLS2&PUSH 71)                    ; LENGTH
217   (CONST&PUSH 25)                     ; 9
218   (CALLSR&JMPIF 1 47 L39)             ; <
223   (PUSH-UNBOUND 2)
225   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
227   (CONST&PUSH 26)                     ; "Fun"
228   (LOAD&PUSH 1)
229   (PUSH-UNBOUND 2)
231   (CALLS1 137)                        ; WRITE-STRING
233   (LOAD&PUSH 19)
234   (LOAD&PUSH 1)
235   (CALLS1 132)                        ; PRINC
237   (LOAD&PUSH 0)
238   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
240   (SKIP 1)
242   L242
242   (UNBIND1)
243   (STORE 12)
245   (LOAD&PUSH 14)
246   (JMPIFEQTO 27 L44)                  ; $XGRAPH
250   (LOAD&PUSH 14)
251   (JMPIFNOTEQTO 30 L263)              ; $GNUPLOT
254   (GETVALUE&PUSH 22)                  ; ST
256   (CONST 31)                          ; #<COMPILED-CLOSURE $PLOT2D-2>
258   L258
258   (PUSH)
259   (LOAD&PUSH 14)
260   (CALL 3 29)                         ; FORMAT
263   L263
263   (PUSH-NIL 2)
265   (GETVALUE&PUSH 6)                   ; V
267   (LOAD&PUSH 33)
269   (CALL2 32)                          ; DRAW2D
271   (CDR&PUSH)
272   (LOAD 2)
273   (BIND 6)                            ; V
275   (LOAD 4)
276   (BIND 33)                           ; W
278   (LOAD&JMPIFNOT 6 L314)
281   L281
281   (LOAD 6)
282   (CAR)
283   (SETVALUE 6)                        ; V
285   (LOAD 6)
286   (CDR)
287   (CAR)
288   (SETVALUE 33)                       ; W
290   (GETVALUE&PUSH 6)                   ; V
292   (JMPIFEQTO 34 L51)                  ; MOVETO
296   (GETVALUE&PUSH 22)                  ; ST
298   (CONST&PUSH 36)                     ; #<COMPILED-CLOSURE $PLOT2D-4>
300   (GETVALUE&PUSH 6)                   ; V
302   (GETVALUE&PUSH 33)                  ; W
304   (CALL 4 29)                         ; FORMAT
307   L307
307   (LOAD 6)
308   (CDR)
309   (CDR)
310   (STORE 6)
311   (LOAD&JMPIF 6 L281)
314   L314
314   (UNBIND 2)
316   (SKIP 3)
318   (LOAD&CDR&STORE 3)
320   (JMP L193)
323   L323
323   (UNBIND1)
324   (SKIP 1)
326   (GETVALUE 22)                       ; ST
328   (JMPIFNOT L333)
330   (PUSH)
331   (CALL1 37)                          ; CLOSE
333   L333
333   (VALUES0)
334   (UNWIND-PROTECT-NORMAL-EXIT)
335   (GETVALUE 22)                       ; ST
337   (JMPIFNOT L378)
339   (JMP L371)
341   L341
341   (CONST&PUSH 24)                     ; STRING
342   (GETVALUE&PUSH 39)                  ; *MAXIMA-PLOTDIR*
344   (CONST&PUSH 40)                     ; "/"
346   (GETVALUE&PUSH 41)                  ; $GNUPLOT_COMMAND
348   (CALLSR&PUSH 3 37)                  ; CONCATENATE
351   (CONST&PUSH 42)                     ; " -plot2d maxout.gnuplot -title '"
353   (LOAD&PUSH 5)
354   (CONST&PUSH 43)                     ; "'"
356   (CALL 4 44)                         ; $SYSTEM
359   (JMP L389)
361   L361
361   (CONST&PUSH 45)                     ; "xgraph -t 'Maxima Plot' < maxout.xgraph &"
363   (CALL1 44)                          ; $SYSTEM
365   (JMP L389)
367   L367
367   (GETVALUE 22)                       ; ST
369   (JMPIFNOT L378)
371   L371
371   (PUSH)
372   (CONST&PUSH 38)                     ; :ABORT
374   (T&PUSH)
375   (CALL 3 37)                         ; CLOSE
378   L378
378   (UNWIND-PROTECT-CLOSE)
379   (UNBIND1)
380   (LOAD&PUSH 5)
381   (JMPIFEQTO 30 L341)                 ; $GNUPLOT
384   (LOAD&PUSH 5)
385   (JMPIFEQTO 27 L361)                 ; $XGRAPH
388   (NIL)
389   L389
389   (UNBIND1)
390   (SKIP 4)
392   (UNBIND 4)
394   (SKIP&RET 4)


Disassembly of function $PLOT2D-1
(CONST 0) = 
"

 \""
(CONST 1) = 
"\"
"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; "

 \""
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; "\"
"
11    (LOAD&PUSH 4)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD 1)
17    (SKIP&RET 4)


Disassembly of function $PLOT2D-2
(CONST 0) = 
"

# \""
(CONST 1) = 
"\"
"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; "

# \""
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; "\"
"
11    (LOAD&PUSH 4)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD 1)
17    (SKIP&RET 4)


Disassembly of function $PLOT2D-3
(CONST 0) = "move "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "move "
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT2D-4
(CONST 0) = 3
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
(CONST 3) = 
" 
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 4)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 3
4     (PUSH-NIL 3)
6     (LOAD&PUSH 11)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 5)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 4)
15    (PUSH-NIL 3)
17    (CONST&PUSH 0)                      ; 3
18    (PUSH-NIL 3)
20    (LOAD&PUSH 10)
21    (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
24    (CONST&PUSH 3)                      ; " 
"
25    (LOAD&PUSH 5)
26    (PUSH-UNBOUND 2)
28    (CALLS1 137)                        ; WRITE-STRING
30    (LOAD 1)
31    (SKIP&RET 5)


Disassembly of function #:|(DEFUN MAXIMA-BIN-SEARCH (COMMAND) ...)-58|
(CONST 0) = MAXIMA-BIN-SEARCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-BIN-SEARCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-BIN-SEARCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-BIN-SEARCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-BIN-SEARCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-BIN-SEARCH
8     (SKIP&RET 1)


Disassembly of function MAXIMA-BIN-SEARCH
(CONST 0) = COMMAND
(CONST 1) = (MLIST)
(CONST 2) = "bin"
(CONST 3) = "###"
(CONST 4) = MAXIMA-PATH
(CONST 5) = $FILE_SEARCH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (COMMAND)
14 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; COMMAND
3     (GETVALUE&PUSH 0)                   ; COMMAND
5     (CONST&PUSH 1)                      ; (MLIST)
6     (CONST&PUSH 2)                      ; "bin"
7     (CONST&PUSH 3)                      ; "###"
8     (CALL2&PUSH 4)                      ; MAXIMA-PATH
10    (LIST&PUSH 2)
12    (CALL2 5)                           ; $FILE_SEARCH
14    (JMPIF1 L18)
16    (GETVALUE 0)                        ; COMMAND
18    L18
18    (UNBIND1)
19    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $PLOT2DOPEN (FUN RANGE &REST ...) ...)-59|
(CONST 0) = $PLOT2DOPEN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PLOT2DOPEN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PLOT2DOPEN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PLOT2DOPEN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PLOT2DOPEN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PLOT2DOPEN
8     (SKIP&RET 1)


Disassembly of function $PLOT2DOPEN
(CONST 0) = FUN
(CONST 1) = OPTIONS
(CONST 2) = $NUMER
(CONST 3) = $DISPLAY2D
(CONST 4) = 0
(CONST 5) = $PLOT_OPTIONS
(CONST 6) = V
(CONST 7) = $SET_PLOT_OPTION
(CONST 8) = CHECK-RANGE
(CONST 9) = $LISTP
(CONST 10) = (MLIST)
(CONST 11) = ST
(CONST 12) = #<COMPILED-CLOSURE $PLOT2DOPEN-1>
(CONST 13) = FORMAT
(CONST 14) = F
(CONST 15) = #<COMPILED-CLOSURE $PLOT2DOPEN-2>
(CONST 16) = MSTRING
(CONST 17) = STRING
(CONST 18) = 9
(CONST 19) = "Fun"
(CONST 20) = #<COMPILED-CLOSURE $PLOT2DOPEN-3>
(CONST 21) = DRAW2D
(CONST 22) = YY
(CONST 23) = MOVETO
(CONST 24) = TCL-OUTPUT-LIST
(CONST 25) = #<COMPILED-CLOSURE $PLOT2DOPEN-4>
(CONST 26) = #<COMPILED-CLOSURE $PLOT2DOPEN-5>
(CONST 27) = CLOSE
(CONST 28) = SHOW-OPEN-PLOT
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (YY F ST FUN STRING OPTIONS $PLOT_OPTIONS)
writes special variables : (YY F FUN V)
193 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FUN
3     (LOAD 4)
4     (BIND 1)                            ; OPTIONS
6     (T)
7     (BIND 2)                            ; $NUMER
9     (NIL)
10    (BIND 3)                            ; $DISPLAY2D
12    (CONST&PUSH 4)                      ; 0
13    (GETVALUE 5)                        ; $PLOT_OPTIONS
15    (BIND 5)                            ; $PLOT_OPTIONS
17    (GETVALUE&PUSH 1)                   ; OPTIONS
19    (NIL)
20    (BIND 6)                            ; V
22    (JMP L60)
24    L24
24    (GETVALUE 17)                       ; STRING
26    (JMP L160)
29    L29
29    (PUSH)
30    (LOAD&PUSH 6)
31    (NIL)
32    (CONS)
33    (STORE 7)
34    (PUSH)
35    (CALLS1 171)                        ; SYSTEM::%RPLACD
37    (JMP L207)
40    L40
40    (PUSH)
41    (LOAD&PUSH 1)
42    (NIL)
43    (CONS)
44    (STORE 2)
45    (PUSH)
46    (CALLS1 171)                        ; SYSTEM::%RPLACD
48    (JMP L221)
51    L51
51    (LOAD 3)
52    (CAR)
53    (SETVALUE 6)                        ; V
55    (PUSH)
56    (CALL1 7)                           ; $SET_PLOT_OPTION
58    (LOAD&CDR&STORE 3)
60    L60
60    (LOAD&PUSH 3)
61    (CALLS1&JMPIFNOT 146 L51)           ; ENDP
64    (UNBIND1)
65    (SKIP 1)
67    (LOAD&PUSH 18)
68    (CALL1 8)                           ; CHECK-RANGE
70    (STORE 18)
72    (GETVALUE&PUSH 0)                   ; FUN
74    (CALL1&JMPIF 9 L84)                 ; $LISTP
77    (CONST&PUSH 10)                     ; (MLIST)
78    (GETVALUE&PUSH 0)                   ; FUN
80    (LIST 2)
82    (SETVALUE 0)                        ; FUN
84    L84
84    (NIL&PUSH)
85    (PUSH-UNBOUND 1)
87    (CALLS2 117)                        ; MAKE-STRING-OUTPUT-STREAM
89    (BIND 11)                           ; ST
91    (UNWIND-PROTECT-OPEN L284)
94    (GETVALUE&PUSH 11)                  ; ST
96    (CONST&PUSH 12)                     ; #<COMPILED-CLOSURE $PLOT2DOPEN-1>
97    (CALL2 13)                          ; FORMAT
99    (NIL&PUSH)
100   (GETVALUE 0)                        ; FUN
102   (CDR&PUSH)
103   (LOAD 1)
104   (BIND 14)                           ; F
106   (LOAD&JMPIFNOT 3 L270)
110   L110
110   (LOAD&CAR&PUSH 3)
112   (LOAD 0)
113   (SETVALUE 14)                       ; F
115   (SKIP 1)
117   (LOAD&INC&STORE 13)
119   (GETVALUE&PUSH 11)                  ; ST
121   (CONST&PUSH 15)                     ; #<COMPILED-CLOSURE $PLOT2DOPEN-2>
122   (GETVALUE&PUSH 14)                  ; F
124   (CALL1&PUSH 16)                     ; MSTRING
126   (CONST&PUSH 17)                     ; STRING
127   (CALLS2 42)                         ; COERCE
129   (BIND 17)                           ; STRING
131   (GETVALUE&PUSH 17)                  ; STRING
133   (CALLS2&PUSH 71)                    ; LENGTH
135   (CONST&PUSH 18)                     ; 9
136   (CALLSR&JMPIF 1 47 L24)             ; <
141   (PUSH-UNBOUND 2)
143   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
145   (CONST&PUSH 19)                     ; "Fun"
146   (LOAD&PUSH 1)
147   (PUSH-UNBOUND 2)
149   (CALLS1 137)                        ; WRITE-STRING
151   (LOAD&PUSH 19)
152   (LOAD&PUSH 1)
153   (CALLS1 132)                        ; PRINC
155   (LOAD&PUSH 0)
156   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
158   (SKIP 1)
160   L160
160   (UNBIND1)
161   (PUSH)
162   (CALL 3 13)                         ; FORMAT
165   (GETVALUE&PUSH 11)                  ; ST
167   (CONST&PUSH 20)                     ; #<COMPILED-CLOSURE $PLOT2DOPEN-3>
168   (CALL2 13)                          ; FORMAT
170   (GETVALUE&PUSH 14)                  ; F
172   (LOAD&PUSH 29)
174   (CALL2 21)                          ; DRAW2D
176   (CDR&PUSH)
177   (LOAD&JMPIFNOT 0 L257)
181   L181
181   (PUSH-NIL 3)
183   (NIL)
184   (BIND 22)                           ; YY
186   (PUSH-NIL 2)
188   (LOAD&JMPIFNOT 8 L229)
191   L191
191   (CAR&PUSH)
192   (JMPIFEQTO 23 L229)                 ; MOVETO
195   (LOAD&CAR&STORE 8 5)
198   (LOAD&JMPIF 6 L29)
202   (LOAD&PUSH 5)
203   (NIL)
204   (CONS)
205   (STORE 6)
206   (STORE 7)
207   L207
207   (LOAD 8)
208   (CDR)
209   (CAR)
210   (STORE 0)
211   (LOAD&JMPIF 1 L40)
215   (LOAD&PUSH 0)
216   (NIL)
217   (CONS)
218   (STORE 1)
219   (SETVALUE 22)                       ; YY
221   L221
221   (LOAD 8)
222   (CDR)
223   (CDR)
224   (STORE 8)
226   (LOAD&JMPIF 8 L191)
229   L229
229   (LOAD 7)
230   (CDR)
231   (JMPIFNOT L244)
233   (GETVALUE&PUSH 11)                  ; ST
235   (LOAD&PUSH 8)
236   (CALL2 24)                          ; TCL-OUTPUT-LIST
238   (GETVALUE&PUSH 11)                  ; ST
240   (GETVALUE&PUSH 22)                  ; YY
242   (CALL2 24)                          ; TCL-OUTPUT-LIST
244   L244
244   (SKIP 2)
246   (UNBIND1)
247   (SKIP 3)
249   (LOAD 0)
250   (CDR)
251   (CDR)
252   (STORE 0)
253   (LOAD&JMPIF 0 L181)
257   L257
257   (SKIP 1)
259   (GETVALUE&PUSH 11)                  ; ST
261   (CONST&PUSH 25)                     ; #<COMPILED-CLOSURE $PLOT2DOPEN-4>
262   (CALL2 13)                          ; FORMAT
264   (LOAD&CDR&STORE 3)
266   (LOAD&JMPIF 3 L110)
270   L270
270   (UNBIND1)
271   (SKIP 2)
273   (GETVALUE&PUSH 11)                  ; ST
275   (CONST&PUSH 26)                     ; #<COMPILED-CLOSURE $PLOT2DOPEN-5>
276   (CALL2 13)                          ; FORMAT
278   (GETVALUE&PUSH 11)                  ; ST
280   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
282   (VALUES1)
283   (UNWIND-PROTECT-NORMAL-EXIT)
284   L284
284   (GETVALUE&PUSH 11)                  ; ST
286   (CALL1 27)                          ; CLOSE
288   (UNWIND-PROTECT-CLOSE)
289   (UNBIND1)
290   (PUSH)
291   (CALL1 28)                          ; SHOW-OPEN-PLOT
293   (UNBIND1)
294   (SKIP 1)
296   (UNBIND 4)
298   (SKIP&RET 4)


Disassembly of function $PLOT2DOPEN-1
(CONST 0) = 
"
{plot2d 
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
{plot2d 
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT2DOPEN-2
(CONST 0) = " {label \""
(CONST 1) = 
"\"}
 "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; " {label \""
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; "\"}
 "
11    (LOAD&PUSH 4)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD 1)
17    (SKIP&RET 4)


Disassembly of function $PLOT2DOPEN-3
(CONST 0) = 
"{xversusy 
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "{xversusy 
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT2DOPEN-4
(CONST 0) = 
"
}"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
}"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT2DOPEN-5
(CONST 0) = 
"
} 
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
} 
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFVAR $IN_NETMATH NIL)-60|
(CONST 0) = (SPECIAL $IN_NETMATH)
(CONST 1) = $IN_NETMATH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $IN_NETMATH)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $IN_NETMATH
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $IN_NETMATH
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $IN_NETMATH
12    (SKIP&RET 1)

WARNING in (EVAL-WHEN (LOAD) (COND #))-61 in lines 819..823 :
$SHOW_OPENPLOT is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(EVAL-WHEN (LOAD) (COND #))-61|
(CONST 0) = $IN_NETMATH
(CONST 1) = $PLOT2D
(CONST 2) = $PLOT2DOPEN
(CONST 3) = $SHOW_OPENPLOT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($IN_NETMATH)
writes special variable : ($SHOW_OPENPLOT)
10 byte-code instructions:
0     (GETVALUE 0)                        ; $IN_NETMATH
2     (JMPIFNOT1 L14)
4     (CONST&PUSH 1)                      ; $PLOT2D
5     (CONST&SYMBOL-FUNCTION&PUSH 2)      ; $PLOT2DOPEN
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (NIL)
10    (SETVALUE 3)                        ; $SHOW_OPENPLOT
12    (SKIP&RET 1)
14    L14
14    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $SPRINT (&REST ARGS) ...)-62|
(CONST 0) = $SPRINT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SPRINT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SPRINT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SPRINT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SPRINT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SPRINT
8     (SKIP&RET 1)


Disassembly of function $SPRINT
(CONST 0) = ARGS
(CONST 1) = V
(CONST 2) = (#\$ #\&)
(CONST 3) = STRING-LEFT-TRIM
(CONST 4) = STRGRIND
(CONST 5) = IMPLODE
(CONST 6) = " "
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (V ARGS)
writes special variable : (V)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARGS
3     (NIL)
4     (BIND 1)                            ; V
6     (GETVALUE&PUSH 0)                   ; ARGS
8     (LOAD&JMPIFNOT 0 L49)
11    L11
11    (LOAD&CAR&PUSH 0)
13    (LOAD 0)
14    (SETVALUE 1)                        ; V
16    (STORE 0)
17    (CALLS2&JMPIF 6 L58)                ; SYMBOLP
20    (GETVALUE&PUSH 1)                   ; V
22    (CALLS2&JMPIF 8 L33)                ; NUMBERP
25    (GETVALUE&PUSH 1)                   ; V
27    (CALL1&PUSH 4)                      ; STRGRIND
29    (CALL1 5)                           ; IMPLODE
31    (SETVALUE 1)                        ; V
33    L33
33    (GETVALUE&PUSH 1)                   ; V
35    (PUSH-UNBOUND 1)
37    (CALLS1 132)                        ; PRINC
39    (CONST&PUSH 6)                      ; " "
40    (PUSH-UNBOUND 1)
42    (CALLS1 132)                        ; PRINC
44    (LOAD&CDR&STORE 0)
46    (LOAD&JMPIF 0 L11)
49    L49
49    (SKIP 1)
51    (UNBIND1)
52    (GETVALUE 0)                        ; ARGS
54    (CAR)
55    (UNBIND1)
56    (SKIP&RET 2)
58    L58
58    (CONST&PUSH 2)                      ; (#\$ #\&)
59    (GETVALUE&PUSH 1)                   ; V
61    (CALLS2&PUSH 140)                   ; SYMBOL-NAME
63    (CALL2 3)                           ; STRING-LEFT-TRIM
65    (SETVALUE 1)                        ; V
67    (JMP L33)


Disassembly of function #:|(DEFUN $SHOW_FILE (FILE) ...)-63|
(CONST 0) = $SHOW_FILE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SHOW_FILE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SHOW_FILE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SHOW_FILE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SHOW_FILE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SHOW_FILE
8     (SKIP&RET 1)


Disassembly of function $SHOW_FILE
(CONST 0) = $FILE_SEARCH
(CONST 1) = FILE-TO-STRING
(CONST 2) = $DONE
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALL1&PUSH 0)                      ; $FILE_SEARCH
3     (CALL1&PUSH 1)                      ; FILE-TO-STRING
5     (PUSH-UNBOUND 1)
7     (CALLS1 132)                        ; PRINC
9     (CONST 2)                           ; $DONE
10    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $TCL_OUTPUT (LIS I &OPTIONAL ...) ...)-64|
(CONST 0) = $TCL_OUTPUT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $TCL_OUTPUT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TCL_OUTPUT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $TCL_OUTPUT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $TCL_OUTPUT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $TCL_OUTPUT
8     (SKIP&RET 1)


Disassembly of function $TCL_OUTPUT
(CONST 0) = 2
(CONST 1) = "~a should be an integer"
(CONST 2) = LIST
(CONST 3) = $LISTP_CHECK
(CONST 4) = *STANDARD-OUTPUT*
(CONST 5) = #<COMPILED-CLOSURE $TCL_OUTPUT-1>
(CONST 6) = FORMAT
(CONST 7) = 1
(CONST 8) = $LISTP
(CONST 9) = V
(CONST 10) = #<COMPILED-CLOSURE $TCL_OUTPUT-2>
(CONST 11) = #<COMPILED-CLOSURE $TCL_OUTPUT-3>
(CONST 12) = #<COMPILED-CLOSURE $TCL_OUTPUT-4>
2 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (V *STANDARD-OUTPUT*)
writes special variable : (V)
67 byte-code instructions:
0     (JMPIFBOUNDP 1 L5)
3     (CONST 0)                           ; 2
4     (STORE 1)
5     L5
5     (LOAD&PUSH 2)
6     (CALLS2&JMPIFNOT 13 L64)            ; SYSTEM::FIXNUMP
9     (CONST&PUSH 2)                      ; LIST
10    (LOAD&PUSH 4)
11    (CALL2 3)                           ; $LISTP_CHECK
13    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
15    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE $TCL_OUTPUT-1>
16    (CALL2 6)                           ; FORMAT
18    (CONST&PUSH 7)                      ; 1
19    (LOAD&PUSH 4)
20    (CALLS1&PUSH 148)                   ; NTH
22    (CALL1&JMPIF 8 L69)                 ; $LISTP
25    (LOAD&PUSH 2)
26    (LOAD&PUSH 4)
27    (CALLS1&STORE 155 3)                ; NTHCDR
30    (BIND 9)                            ; V
32    (GETVALUE 9)                        ; V
34    (JMPIFNOT L56)
36    L36
36    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
38    (CONST&PUSH 11)                     ; #<COMPILED-CLOSURE $TCL_OUTPUT-3>
39    (GETVALUE 9)                        ; V
41    (CAR&PUSH)
42    (CALL 3 6)                          ; FORMAT
45    (LOAD&PUSH 4)
46    (GETVALUE&PUSH 9)                   ; V
48    (CALLS1 155)                        ; NTHCDR
50    (SETVALUE 9)                        ; V
52    (GETVALUE 9)                        ; V
54    (JMPIF L36)
56    L56
56    (UNBIND1)
57    L57
57    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
59    (CONST&PUSH 12)                     ; #<COMPILED-CLOSURE $TCL_OUTPUT-4>
60    (CALL2 6)                           ; FORMAT
62    (SKIP&RET 4)
64    L64
64    (CONST&PUSH 1)                      ; "~a should be an integer"
65    (LOAD&PUSH 3)
66    (CALLSR 1 29)                       ; ERROR
69    L69
69    (NIL)
70    (BIND 9)                            ; V
72    (LOAD&PUSH 6)
73    (LOAD&JMPIFNOT 0 L99)
76    L76
76    (LOAD&CAR&PUSH 0)
78    (LOAD 0)
79    (SETVALUE 9)                        ; V
81    (SKIP 1)
83    (GETVALUE&PUSH 4)                   ; *STANDARD-OUTPUT*
85    (CONST&PUSH 10)                     ; #<COMPILED-CLOSURE $TCL_OUTPUT-2>
86    (LOAD&PUSH 8)
87    (GETVALUE&PUSH 9)                   ; V
89    (CALLS1&PUSH 148)                   ; NTH
91    (CALL 3 6)                          ; FORMAT
94    (LOAD&CDR&STORE 0)
96    (LOAD&JMPIF 0 L76)
99    L99
99    (SKIP 1)
101   (UNBIND1)
102   (JMP L57)


Disassembly of function $TCL_OUTPUT-1
(CONST 0) = 
"
 {"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
 {"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $TCL_OUTPUT-2
(CONST 0) = 10
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 10
4     (PUSH-NIL 3)
6     (LOAD&PUSH 10)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function $TCL_OUTPUT-3
(CONST 0) = 10
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 10
4     (PUSH-NIL 3)
6     (LOAD&PUSH 10)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function $TCL_OUTPUT-4
(CONST 0) = 
"
 }"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
 }"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN TCL-OUTPUT-LIST (ST LIS) ...)-65|
(CONST 0) = TCL-OUTPUT-LIST
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TCL-OUTPUT-LIST>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TCL-OUTPUT-LIST
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TCL-OUTPUT-LIST
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TCL-OUTPUT-LIST>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TCL-OUTPUT-LIST
8     (SKIP&RET 1)


Disassembly of function TCL-OUTPUT-LIST
(CONST 0) = ST
(CONST 1) = " {  "
(CONST 2) = V
(CONST 3) = 0
(CONST 4) = N
(CONST 5) = 5
(CONST 6) = #<COMPILED-CLOSURE TCL-OUTPUT-LIST-1>
(CONST 7) = FORMAT
(CONST 8) = #<COMPILED-CLOSURE TCL-OUTPUT-LIST-2>
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V N ST)
writes special variables : (N V)
57 byte-code instructions:
0     L0
0     (LOAD 2)
1     (BIND 0)                            ; ST
3     (LOAD 4)
4     (NOT)
5     (JMPIF1 L23)
7     (LOAD 4)
8     (CAR)
9     (JMPIFATOM L26)
11    (GETVALUE&PUSH 0)                   ; ST
13    (LOAD&CAR&PUSH 5)
15    (JSR L0)
17    (GETVALUE&PUSH 0)                   ; ST
19    (LOAD&CDR&PUSH 5)
21    (JSR L0)
23    L23
23    (UNBIND1)
24    (SKIP&RET 3)
26    L26
26    (CONST&PUSH 1)                      ; " {  "
27    (GETVALUE&PUSH 0)                   ; ST
29    (CALLS1 132)                        ; PRINC
31    (NIL)
32    (BIND 2)                            ; V
34    (LOAD&PUSH 7)
35    (CONST 3)                           ; 0
36    (BIND 4)                            ; N
38    (LOAD&JMPIFNOT 3 L79)
41    L41
41    (LOAD&CAR&PUSH 3)
43    (LOAD 0)
44    (SETVALUE 2)                        ; V
46    (SKIP 1)
48    (GETVALUE&PUSH 4)                   ; N
50    (CALLS2 150)                        ; 1+
52    (SETVALUE 4)                        ; N
54    (GETVALUE&PUSH 4)                   ; N
56    (CONST&PUSH 5)                      ; 5
57    (CALLS2&PUSH 183)                   ; MOD
59    (JMPIFNOTEQTO 3 L66)                ; 0
62    (GETVALUE&PUSH 0)                   ; ST
64    (CALLS1 139)                        ; TERPRI
66    L66
66    (GETVALUE&PUSH 0)                   ; ST
68    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE TCL-OUTPUT-LIST-1>
69    (GETVALUE&PUSH 2)                   ; V
71    (CALL 3 7)                          ; FORMAT
74    (LOAD&CDR&STORE 3)
76    (LOAD&JMPIF 3 L41)
79    L79
79    (UNBIND1)
80    (SKIP 1)
82    (UNBIND1)
83    (GETVALUE&PUSH 0)                   ; ST
85    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE TCL-OUTPUT-LIST-2>
86    (CALL2 7)                           ; FORMAT
88    (JMP L23)


Disassembly of function TCL-OUTPUT-LIST-1
(CONST 0) = 10
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 10
4     (PUSH-NIL 3)
6     (LOAD&PUSH 10)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 4)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD 1)
15    (SKIP&RET 4)


Disassembly of function TCL-OUTPUT-LIST-2
(CONST 0) = 
" }
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; " }
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN $OPENPLOT_CURVES (LIS &AUX #) ...)-66|
(CONST 0) = $OPENPLOT_CURVES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $OPENPLOT_CURVES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $OPENPLOT_CURVES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $OPENPLOT_CURVES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $OPENPLOT_CURVES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $OPENPLOT_CURVES
8     (SKIP&RET 1)


Disassembly of function $OPENPLOT_CURVES
(CONST 0) = 100000
(CONST 1) = LINEL
(CONST 2) = ST
(CONST 3) = #<COMPILED-CLOSURE $OPENPLOT_CURVES-1>
(CONST 4) = FORMAT
(CONST 5) = $LISTP
(CONST 6) = 1
(CONST 7) = "Need a list of curves, [[x1,y1,x2,y2,...],[u1,v1,u2,v2,...]] or [[[x1,y1],[x2,y2],...]"
(CONST 8) = MERROR
(CONST 9) = V
(CONST 10) = "should be a list"
(CONST 11) = #<COMPILED-CLOSURE $OPENPLOT_CURVES-2>
(CONST 12) = "~M~%"
(CONST 13) = $CONCAT
(CONST 14) = MFORMAT
(CONST 15) = #<COMPILED-CLOSURE $OPENPLOT_CURVES-3>
(CONST 16) = BAD
(CONST 17) = TCL-OUTPUT-LIST
(CONST 18) = #<COMPILED-CLOSURE $OPENPLOT_CURVES-4>
(CONST 19) = #<COMPILED-CLOSURE $OPENPLOT_CURVES-5>
(CONST 20) = CLOSE
(CONST 21) = SHOW-OPEN-PLOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V ST)
writes special variable : (V)
158 byte-code instructions:
0     (CONST 0)                           ; 100000
1     (BIND 1)                            ; LINEL
3     (NIL&PUSH)
4     (PUSH-UNBOUND 1)
6     (CALLS2 117)                        ; MAKE-STRING-OUTPUT-STREAM
8     (BIND 2)                            ; ST
10    (UNWIND-PROTECT-OPEN L231)
13    (GETVALUE&PUSH 2)                   ; ST
15    (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE $OPENPLOT_CURVES-1>
16    (CALL2 4)                           ; FORMAT
18    (LOAD&PUSH 9)
19    (CALL1&JMPIFNOT 5 L29)              ; $LISTP
22    (CONST&PUSH 6)                      ; 1
23    (LOAD&PUSH 10)
24    (CALLS1&PUSH 148)                   ; NTH
26    (CALL1&JMPIF 5 L32)                 ; $LISTP
29    L29
29    (CONST&PUSH 7)                      ; "Need a list of curves, [[x1,y1,x2,y2,...],[u1,v1,u2,v2,...]] or [[[x1,y1],[x2,y2],...]"
30    (CALL1 8)                           ; MERROR
32    L32
32    (NIL&PUSH)
33    (LOAD&CDR&PUSH 10)
35    (LOAD 1)
36    (BIND 9)                            ; V
38    (LOAD&JMPIFNOT 3 L217)
42    L42
42    (LOAD&CAR&PUSH 3)
44    (LOAD 0)
45    (SETVALUE 9)                        ; V
47    (STORE 0)
48    (CALL1&JMPIF 5 L54)                 ; $LISTP
51    (CONST&PUSH 10)                     ; "should be a list"
52    (CALL1 8)                           ; MERROR
54    L54
54    (GETVALUE 9)                        ; V
56    (CDR)
57    (SETVALUE 9)                        ; V
59    (GETVALUE&PUSH 2)                   ; ST
61    (CONST&PUSH 11)                     ; #<COMPILED-CLOSURE $OPENPLOT_CURVES-2>
62    (CALL2 4)                           ; FORMAT
64    (JMP L82)
66    L66
66    (GETVALUE&PUSH 2)                   ; ST
68    (CONST&PUSH 12)                     ; "~M~%"
69    (GETVALUE 9)                        ; V
71    (CAR&PUSH)
72    (CALL1&PUSH 13)                     ; $CONCAT
74    (CALL 3 14)                         ; MFORMAT
77    (GETVALUE 9)                        ; V
79    (CDR)
80    (SETVALUE 9)                        ; V
82    L82
82    (GETVALUE 9)                        ; V
84    (CAR)
85    (JMPIFNOT L93)
87    (GETVALUE 9)                        ; V
89    (CAR&PUSH)
90    (CALLS2&JMPIF 6 L66)                ; SYMBOLP
93    L93
93    (GETVALUE 9)                        ; V
95    (JMPIFNOT L211)
98    (GETVALUE&PUSH 2)                   ; ST
100   (CONST&PUSH 15)                     ; #<COMPILED-CLOSURE $OPENPLOT_CURVES-3>
101   (CALL2 4)                           ; FORMAT
103   (PUSH-NIL 3)
105   (GETVALUE 9)                        ; V
107   (JMPIFNOT L190)
110   (JMP L159)
112   L112
112   (GETVALUE 9)                        ; V
114   (CAR)
115   (CDR)
116   (STORE 2)
117   (CAR&PUSH)
118   (LOAD&CONS&STORE 1)
120   (LOAD 2)
121   (CDR)
122   (CAR&PUSH)
123   (LOAD&CONS&STORE 0)
125   (LOAD 2)
126   (CDR)
127   (CDR)
128   (CAR)
129   (JMPIFNOT L181)
131   (LOAD 2)
132   (CDR)
133   (CDR)
134   (CAR&PUSH)
135   (LOAD&CONS&STORE 0)
137   (JMP L181)
139   L139
139   (GETVALUE 9)                        ; V
141   (STORE 2)
142   (CDR)
143   (CDR)
144   (SETVALUE 9)                        ; V
146   (LOAD&CAR&PUSH 2)
148   (LOAD&CONS&STORE 1)
150   (LOAD 2)
151   (CDR)
152   (CAR&PUSH)
153   (LOAD&CONS&STORE 0)
155   (GETVALUE 9)                        ; V
157   (JMPIFNOT L190)
159   L159
159   (GETVALUE 9)                        ; V
161   (CAR&PUSH)
162   (CALLS2&JMPIF 8 L139)               ; NUMBERP
165   (GETVALUE 9)                        ; V
167   (CAR&PUSH)
168   (CALL1&JMPIF 5 L112)                ; $LISTP
171   (CONST&PUSH 16)                     ; BAD
172   (GETVALUE 9)                        ; V
174   (CAR&PUSH)
175   (LIST&PUSH 2)
177   (PUSH-UNBOUND 1)
179   (CALLS1 132)                        ; PRINC
181   L181
181   (GETVALUE 9)                        ; V
183   (CDR)
184   (SETVALUE 9)                        ; V
186   (GETVALUE 9)                        ; V
188   (JMPIF L159)
190   L190
190   (GETVALUE&PUSH 2)                   ; ST
192   (LOAD&PUSH 2)
193   (CALLS2&PUSH 73)                    ; NREVERSE
195   (CALL2 17)                          ; TCL-OUTPUT-LIST
197   (GETVALUE&PUSH 2)                   ; ST
199   (LOAD&PUSH 1)
200   (CALLS2&PUSH 73)                    ; NREVERSE
202   (CALL2 17)                          ; TCL-OUTPUT-LIST
204   (SKIP 3)
206   (GETVALUE&PUSH 2)                   ; ST
208   (CONST&PUSH 18)                     ; #<COMPILED-CLOSURE $OPENPLOT_CURVES-4>
209   (CALL2 4)                           ; FORMAT
211   L211
211   (LOAD&CDR&STORE 3)
213   (LOAD&JMPIF 3 L42)
217   L217
217   (UNBIND1)
218   (SKIP 2)
220   (GETVALUE&PUSH 2)                   ; ST
222   (CONST&PUSH 19)                     ; #<COMPILED-CLOSURE $OPENPLOT_CURVES-5>
223   (CALL2 4)                           ; FORMAT
225   (GETVALUE&PUSH 2)                   ; ST
227   (CALLS2 118)                        ; GET-OUTPUT-STREAM-STRING
229   (VALUES1)
230   (UNWIND-PROTECT-NORMAL-EXIT)
231   L231
231   (GETVALUE&PUSH 2)                   ; ST
233   (CALL1 20)                          ; CLOSE
235   (UNWIND-PROTECT-CLOSE)
236   (UNBIND1)
237   (PUSH)
238   (CALL1 21)                          ; SHOW-OPEN-PLOT
240   (UNBIND1)
241   (SKIP&RET 2)


Disassembly of function $OPENPLOT_CURVES-1
(CONST 0) = 
"{plot2d 
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "{plot2d 
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $OPENPLOT_CURVES-2
(CONST 0) = 
"

"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "

"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $OPENPLOT_CURVES-3
(CONST 0) = 
"
{ xversusy  "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
{ xversusy  "
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $OPENPLOT_CURVES-4
(CONST 0) = " }"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; " }"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $OPENPLOT_CURVES-5
(CONST 0) = 
"}
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "}
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN $XGRAPH_CURVES (LIS &REST OPTIONS ...) ...)-67|
(CONST 0) = $XGRAPH_CURVES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $XGRAPH_CURVES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $XGRAPH_CURVES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $XGRAPH_CURVES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $XGRAPH_CURVES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $XGRAPH_CURVES
8     (SKIP&RET 1)


Disassembly of function $XGRAPH_CURVES
(CONST 0) = OPTIONS
(CONST 1) = W
(CONST 2) = "xgraph-out"
(CONST 3) = :OUTPUT
(CONST 4) = ST
(CONST 5) = #<COMPILED-CLOSURE $XGRAPH_CURVES-1>
(CONST 6) = FORMAT
(CONST 7) = V
(CONST 8) = #<COMPILED-CLOSURE $XGRAPH_CURVES-2>
(CONST 9) = "~M~%"
(CONST 10) = $CONCAT
(CONST 11) = MFORMAT
(CONST 12) = $LISTP
(CONST 13) = #<COMPILED-CLOSURE $XGRAPH_CURVES-3>
(CONST 14) = CLOSE
(CONST 15) = :ABORT
(CONST 16) = "xgraph -t 'Maxima Plot' < xgraph-out &"
(CONST 17) = $SYSTEM
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (W V ST)
writes special variables : (W V)
108 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; OPTIONS
3     (NIL)
4     (BIND 1)                            ; W
6     (CONST&PUSH 2)                      ; "xgraph-out"
7     (CONST&PUSH 3)                      ; :OUTPUT
8     (PUSH-UNBOUND 5)
10    (CALLS1 249)                        ; OPEN
12    (BIND 4)                            ; ST
14    (UNWIND-PROTECT-OPEN L151)
17    (GETVALUE&PUSH 4)                   ; ST
19    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE $XGRAPH_CURVES-1>
20    (CALL2 6)                           ; FORMAT
22    (NIL&PUSH)
23    (LOAD&CDR&PUSH 14)
25    (LOAD 1)
26    (BIND 7)                            ; V
28    (LOAD&JMPIFNOT 3 L133)
32    L32
32    (LOAD&CAR&PUSH 3)
34    (LOAD 0)
35    (SETVALUE 7)                        ; V
37    (SKIP 1)
39    (CDR)
40    (SETVALUE 7)                        ; V
42    (GETVALUE&PUSH 4)                   ; ST
44    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE $XGRAPH_CURVES-2>
45    (CALL2 6)                           ; FORMAT
47    (GETVALUE 7)                        ; V
49    (JMPIFNOT L127)
52    (JMP L81)
54    L54
54    (GETVALUE 7)                        ; V
56    (SETVALUE 1)                        ; W
58    (CDR)
59    (JMP L107)
61    L61
61    (GETVALUE&PUSH 4)                   ; ST
63    (CONST&PUSH 9)                      ; "~M~%"
64    (GETVALUE 7)                        ; V
66    (CAR&PUSH)
67    (CALL1&PUSH 10)                     ; $CONCAT
69    (CALL 3 11)                         ; MFORMAT
72    (GETVALUE 7)                        ; V
74    (CDR)
75    (SETVALUE 7)                        ; V
77    (GETVALUE 7)                        ; V
79    (JMPIFNOT L127)
81    L81
81    (GETVALUE 7)                        ; V
83    (CAR&PUSH)
84    (CALLS2&JMPIF 6 L61)                ; SYMBOLP
87    (GETVALUE 7)                        ; V
89    (CAR&PUSH)
90    (CALLS2&JMPIF 8 L54)                ; NUMBERP
93    (GETVALUE 7)                        ; V
95    (CAR&PUSH)
96    (CALL1&JMPIFNOT 12 L110)            ; $LISTP
99    (GETVALUE 7)                        ; V
101   (CAR)
102   (CDR)
103   (SETVALUE 1)                        ; W
105   (GETVALUE 7)                        ; V
107   L107
107   (CDR)
108   (SETVALUE 7)                        ; V
110   L110
110   (GETVALUE&PUSH 4)                   ; ST
112   (CONST&PUSH 13)                     ; #<COMPILED-CLOSURE $XGRAPH_CURVES-3>
113   (GETVALUE 1)                        ; W
115   (CAR&PUSH)
116   (GETVALUE 1)                        ; W
118   (CDR)
119   (CAR&PUSH)
120   (CALL 4 6)                          ; FORMAT
123   (GETVALUE 7)                        ; V
125   (JMPIF L81)
127   L127
127   (LOAD&CDR&STORE 3)
129   (LOAD&JMPIF 3 L32)
133   L133
133   (UNBIND1)
134   (SKIP 2)
136   (GETVALUE 4)                        ; ST
138   (JMPIFNOT L143)
140   (PUSH)
141   (CALL1 14)                          ; CLOSE
143   L143
143   (VALUES0)
144   (UNWIND-PROTECT-NORMAL-EXIT)
145   (GETVALUE 4)                        ; ST
147   (JMPIFNOT L161)
149   (JMP L155)
151   L151
151   (GETVALUE 4)                        ; ST
153   (JMPIFNOT L161)
155   L155
155   (PUSH)
156   (CONST&PUSH 15)                     ; :ABORT
157   (T&PUSH)
158   (CALL 3 14)                         ; CLOSE
161   L161
161   (UNWIND-PROTECT-CLOSE)
162   (UNBIND1)
163   (CONST&PUSH 16)                     ; "xgraph -t 'Maxima Plot' < xgraph-out &"
164   (CALL1 17)                          ; $SYSTEM
166   (UNBIND 2)
168   (SKIP&RET 3)


Disassembly of function $XGRAPH_CURVES-1
(CONST 0) = 
"=600x600
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "=600x600
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $XGRAPH_CURVES-2
(CONST 0) = 
"

"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "

"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $XGRAPH_CURVES-3
(CONST 0) = 3
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
(CONST 2) = #\Space
(CONST 3) = 
" 
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
21 byte-code instructions:
0     (LOAD&PUSH 4)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 3
4     (PUSH-NIL 3)
6     (LOAD&PUSH 11)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (CONST&PUSH 2)                      ; #\Space
11    (LOAD&PUSH 5)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 4)
15    (PUSH-NIL 3)
17    (CONST&PUSH 0)                      ; 3
18    (PUSH-NIL 3)
20    (LOAD&PUSH 10)
21    (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
24    (CONST&PUSH 3)                      ; " 
"
25    (LOAD&PUSH 5)
26    (PUSH-UNBOUND 2)
28    (CALLS1 137)                        ; WRITE-STRING
30    (LOAD 1)
31    (SKIP&RET 5)


Disassembly of function #:|(DEFUN AVERAGE-SLOPE (M1 M2) ...)-68|
(CONST 0) = AVERAGE-SLOPE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE AVERAGE-SLOPE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; AVERAGE-SLOPE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; AVERAGE-SLOPE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE AVERAGE-SLOPE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; AVERAGE-SLOPE
8     (SKIP&RET 1)


Disassembly of function AVERAGE-SLOPE
(CONST 0) = 2.0
(CONST 1) = TAN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (LOAD&PUSH 2)
1     (PUSH-UNBOUND 1)
3     (CALLS2&PUSH 167)                   ; COMMON-LISP:ATAN
5     (LOAD&PUSH 2)
6     (PUSH-UNBOUND 1)
8     (CALLS2&PUSH 167)                   ; COMMON-LISP:ATAN
10    (CALLSR&PUSH 2 53)                  ; +
13    (CONST&PUSH 0)                      ; 2.0
14    (CALLSR&PUSH 1 56)                  ; /
17    (CALL1 1)                           ; TAN
19    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SLOPE (X1 Y1 X2 ...) ...)-69|
(CONST 0) = SLOPE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SLOPE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SLOPE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SLOPE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SLOPE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SLOPE
8     (SKIP&RET 1)


Disassembly of function SLOPE
(CONST 0) = 0.0
(CONST 1) = 1000000000000000000000000000000
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 5)
2     (CALLSR&PUSH 1 54)                  ; -
5     (LOAD&PUSH 0)
6     (CONST&PUSH 0)                      ; 0.0
7     (CALLS2&JMPIF 1 L21)                ; EQL
10    (LOAD&PUSH 2)
11    (LOAD&PUSH 5)
12    (CALLSR&PUSH 1 54)                  ; -
15    (LOAD&PUSH 1)
16    (CALLSR 1 56)                       ; /
19    (SKIP&RET 6)
21    L21
21    (CONST 1)                           ; 1000000000000000000000000000000
22    (SKIP&RET 6)


Disassembly of function #:|(DEFVAR $PS_TRANSLATE '(# 0 0))-70|
(CONST 0) = (SPECIAL $PS_TRANSLATE)
(CONST 1) = $PS_TRANSLATE
(CONST 2) = ((MLIST) 0 0)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PS_TRANSLATE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PS_TRANSLATE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PS_TRANSLATE
8     (CONST&PUSH 2)                      ; ((MLIST) 0 0)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PS_TRANSLATE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $PS_SCALE '(# 72 72))-71|
(CONST 0) = (SPECIAL $PS_SCALE)
(CONST 1) = $PS_SCALE
(CONST 2) = ((MLIST) 72 72)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PS_SCALE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PS_SCALE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PS_SCALE
8     (CONST&PUSH 2)                      ; ((MLIST) 72 72)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PS_SCALE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $PSCOM (&REST L) ...)-72|
(CONST 0) = $PSCOM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSCOM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSCOM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSCOM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSCOM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSCOM
8     (SKIP&RET 1)


Disassembly of function $PSCOM
(CONST 0) = L
(CONST 1) = P
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variable: (L)
7 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CONST&PUSH 1)                      ; P
4     (GETVALUE 0)                        ; L
6     (APPLY 0)
8     (UNBIND1)
9     (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSX (X) ...)-73|
(CONST 0) = PSX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSX
8     (SKIP&RET 1)


Disassembly of function PSX
(CONST 0) = X
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
5 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (UNBIND1)
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN PSY (Y) ...)-74|
(CONST 0) = PSY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSY
8     (SKIP&RET 1)


Disassembly of function PSY
(CONST 0) = Y
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (Y)
5 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; Y
3     (GETVALUE 0)                        ; Y
5     (UNBIND1)
6     (SKIP&RET 2)


Disassembly of function #:|(DEFUN P (&REST L) ...)-75|
(CONST 0) = P
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE P>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; P
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; P
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE P>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; P
8     (SKIP&RET 1)


Disassembly of function P
(CONST 0) = L
(CONST 1) = ASSUREPS
(CONST 2) = V
(CONST 3) = MAXIMA-STRING
(CONST 4) = W
(CONST 5) = $PSTREAM
(CONST 6) = #<COMPILED-CLOSURE P-1>
(CONST 7) = FORMAT
(CONST 8) = " "
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: ($PSTREAM V L)
writes special variables : (W V)
64 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; L
3     (CALL0 1)                           ; ASSUREPS
5     (NIL)
6     (BIND 2)                            ; V
8     (GETVALUE&PUSH 0)                   ; L
10    (LOAD&JMPIFNOT 0 L53)
13    L13
13    (LOAD&CAR&PUSH 0)
15    (LOAD 0)
16    (SETVALUE 2)                        ; V
18    (STORE 0)
19    (CALLS2&JMPIFNOT 6 L28)             ; SYMBOLP
22    (GETVALUE&PUSH 2)                   ; V
24    (CALL1 3)                           ; MAXIMA-STRING
26    (SETVALUE 2)                        ; V
28    L28
28    (GETVALUE 2)                        ; V
30    (JMPIFCONSP L63)
32    (GETVALUE&PUSH 2)                   ; V
34    (CALLS2&JMPIF 15 L94)               ; FLOATP
37    (GETVALUE&PUSH 2)                   ; V
39    (GETVALUE&PUSH 5)                   ; $PSTREAM
41    (CALLS1 132)                        ; PRINC
43    L43
43    (CONST&PUSH 8)                      ; " "
44    (GETVALUE&PUSH 5)                   ; $PSTREAM
46    (CALLS1 132)                        ; PRINC
48    (LOAD&CDR&STORE 0)
50    (LOAD&JMPIF 0 L13)
53    L53
53    (SKIP 1)
55    (UNBIND1)
56    (GETVALUE&PUSH 5)                   ; $PSTREAM
58    (CALLS1 139)                        ; TERPRI
60    (UNBIND1)
61    (SKIP&RET 2)
63    L63
63    (NIL&PUSH)
64    (GETVALUE 2)                        ; V
66    (CDR&PUSH)
67    (LOAD 1)
68    (BIND 4)                            ; W
70    (LOAD&JMPIFNOT 3 L89)
73    L73
73    (LOAD&CAR&PUSH 3)
75    (LOAD 0)
76    (SETVALUE 4)                        ; W
78    (STORE 0)
79    (LIST&PUSH 1)
81    (JSR L0)
84    (LOAD&CDR&STORE 3)
86    (LOAD&JMPIF 3 L73)
89    L89
89    (UNBIND1)
90    (SKIP 2)
92    (JMP L43)
94    L94
94    (GETVALUE&PUSH 5)                   ; $PSTREAM
96    (CONST&PUSH 6)                      ; #<COMPILED-CLOSURE P-1>
97    (GETVALUE&PUSH 2)                   ; V
99    (CALL 3 7)                          ; FORMAT
102   (JMP L43)


Disassembly of function P-1
(CONST 0) = 4
(CONST 1) = SYSTEM::DO-FORMAT-FIXED-FLOAT
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 3)
1     (PUSH-NIL 3)
3     (CONST&PUSH 0)                      ; 4
4     (PUSH-NIL 3)
6     (LOAD&PUSH 10)
7     (CALL 9 1)                          ; SYSTEM::DO-FORMAT-FIXED-FLOAT
10    (LOAD 1)
11    (SKIP&RET 4)


Disassembly of function #:|(DEFUN PSAPPLY (F LIS) ...)-76|
(CONST 0) = PSAPPLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PSAPPLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PSAPPLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PSAPPLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PSAPPLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PSAPPLY
8     (SKIP&RET 1)


Disassembly of function PSAPPLY
(CONST 0) = F
(CONST 1) = $LISTP
(CONST 2) = P
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (F)
13 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; F
3     (LOAD&PUSH 4)
4     (CALL1&JMPIFNOT 1 L9)               ; $LISTP
7     (LOAD&CDR&STORE 4)
9     L9
9     (CONST&PUSH 2)                      ; P
10    (LOAD 5)
11    (APPLY 0)
13    (GETVALUE&PUSH 0)                   ; F
15    (CALL1 2)                           ; P
17    (UNBIND1)
18    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $MOVETO (X Y) ...)-77|
(CONST 0) = $MOVETO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $MOVETO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $MOVETO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $MOVETO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $MOVETO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $MOVETO
8     (SKIP&RET 1)


Disassembly of function $MOVETO
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = PSX
(CONST 3) = PSY
(CONST 4) = "moveto "
(CONST 5) = P
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
12 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1&PUSH 2)                      ; PSX
10    (GETVALUE&PUSH 1)                   ; Y
12    (CALL1&PUSH 3)                      ; PSY
14    (CONST&PUSH 4)                      ; "moveto "
15    (CALL 3 5)                          ; P
18    (UNBIND 2)
20    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $JOIN (X Y) ...)-78|
(CONST 0) = $JOIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $JOIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $JOIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $JOIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $JOIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $JOIN
8     (SKIP&RET 1)


Disassembly of function $JOIN
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (MLIST)
(CONST 3) = W
(CONST 4) = U
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (U W Y X)
writes special variables : (U W)
72 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST&PUSH 2)                      ; (MLIST)
7     (NIL&PUSH)
8     (GETVALUE 0)                        ; X
10    (CDR&PUSH)
11    (LOAD 1)
12    (BIND 3)                            ; W
14    (NIL&PUSH)
15    (GETVALUE 1)                        ; Y
17    (CDR&PUSH)
18    (LOAD 1)
19    (BIND 4)                            ; U
21    (PUSH-NIL 2)
23    (LOAD&JMPIFNOT 5 L68)
26    L26
26    (LOAD&JMPIFNOT 10 L68)
29    (LOAD&CAR&PUSH 10)
31    (LOAD 0)
32    (SETVALUE 3)                        ; W
34    (SKIP 1)
36    (LOAD&CAR&PUSH 5)
38    (LOAD 0)
39    (SETVALUE 4)                        ; U
41    (SKIP 1)
43    (LOAD&JMPIF 0 L82)
46    (GETVALUE&PUSH 3)                   ; W
48    (NIL)
49    (CONS)
50    (STORE 0)
51    (STORE 1)
52    (LOAD&JMPIF 0 L94)
55    L55
55    (GETVALUE&PUSH 4)                   ; U
57    (NIL)
58    (CONS)
59    (STORE 0)
60    (STORE 1)
61    L61
61    (LOAD&CDR&STORE 10)
63    (LOAD&CDR&STORE 5)
65    (LOAD&JMPIF 5 L26)
68    L68
68    (LOAD 1)
69    (SKIP 2)
71    (UNBIND1)
72    (SKIP 2)
74    (UNBIND1)
75    (SKIP 2)
77    (CONS)
78    (UNBIND 2)
80    (SKIP&RET 3)
82    L82
82    (PUSH)
83    (GETVALUE&PUSH 3)                   ; W
85    (NIL)
86    (CONS)
87    (STORE 1)
88    (PUSH)
89    (CALLS1 171)                        ; SYSTEM::%RPLACD
91    (LOAD&JMPIFNOT 0 L55)
94    L94
94    (PUSH)
95    (GETVALUE&PUSH 4)                   ; U
97    (NIL)
98    (CONS)
99    (STORE 1)
100   (PUSH)
101   (CALLS1 171)                        ; SYSTEM::%RPLACD
103   (JMP L61)


Disassembly of function #:|(DEFUN $PSLINE (A B C ...) ...)-79|
(CONST 0) = $PSLINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSLINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSLINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSLINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSLINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSLINE
8     (SKIP&RET 1)


Disassembly of function $PSLINE
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = D
(CONST 4) = PSX
(CONST 5) = PSY
(CONST 6) = "moveto "
(CONST 7) = P
(CONST 8) = "lineto"
4 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D C B A)
22 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; A
3     (LOAD 6)
4     (BIND 1)                            ; B
6     (LOAD 8)
7     (BIND 2)                            ; C
9     (LOAD 10)
10    (BIND 3)                            ; D
12    (GETVALUE&PUSH 0)                   ; A
14    (CALL1&PUSH 4)                      ; PSX
16    (GETVALUE&PUSH 1)                   ; B
18    (CALL1&PUSH 5)                      ; PSY
20    (CONST&PUSH 6)                      ; "moveto "
21    (CALL 3 7)                          ; P
24    (GETVALUE&PUSH 2)                   ; C
26    (CALL1&PUSH 4)                      ; PSX
28    (GETVALUE&PUSH 3)                   ; D
30    (CALL1&PUSH 5)                      ; PSY
32    (CONST&PUSH 8)                      ; "lineto"
33    (CALL 3 7)                          ; P
36    (UNBIND 4)
38    (SKIP&RET 5)


Disassembly of function #:|(DEFUN SETUP-FOR-PS-RANGE (XRANGE YRANGE DO-PROLOG) ...)-80|
(CONST 0) = SETUP-FOR-PS-RANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SETUP-FOR-PS-RANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SETUP-FOR-PS-RANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SETUP-FOR-PS-RANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SETUP-FOR-PS-RANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SETUP-FOR-PS-RANGE
8     (SKIP&RET 1)


Disassembly of function SETUP-FOR-PS-RANGE
(CONST 0) = 0.5
(CONST 1) = 1
(CONST 2) = 0
(CONST 3) = 2
(CONST 4) = $WINDOW_SIZE
(CONST 5) = 1.2
(CONST 6) = (MLIST)
(CONST 7) = $PS_SCALE
(CONST 8) = (MLIST)
(CONST 9) = $PS_TRANSLATE
(CONST 10) = ASSUREPS
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($WINDOW_SIZE)
64 byte-code instructions:
0     (CONST&PUSH 0)                      ; 0.5
1     (CONST&PUSH 1)                      ; 1
2     (LOAD&PUSH 4)
3     (CALLS1&PUSH 148)                   ; NTH
5     (CONST&PUSH 2)                      ; 0
6     (LOAD&PUSH 5)
7     (CALLS1&PUSH 148)                   ; NTH
9     (CALLSR&PUSH 2 53)                  ; +
12    (CALLSR&PUSH 2 55)                  ; *
15    (CONST&PUSH 0)                      ; 0.5
16    (CONST&PUSH 1)                      ; 1
17    (LOAD&PUSH 6)
18    (CALLS1&PUSH 148)                   ; NTH
20    (CONST&PUSH 2)                      ; 0
21    (LOAD&PUSH 7)
22    (CALLS1&PUSH 148)                   ; NTH
24    (CALLSR&PUSH 2 53)                  ; +
27    (CALLSR&PUSH 2 55)                  ; *
30    (CONST&PUSH 3)                      ; 2
31    (GETVALUE&PUSH 4)                   ; $WINDOW_SIZE
33    (CALLS1&PUSH 148)                   ; NTH
35    (CONST&PUSH 5)                      ; 1.2
36    (CONST&PUSH 1)                      ; 1
37    (LOAD&PUSH 7)
38    (CALLS1&PUSH 148)                   ; NTH
40    (CONST&PUSH 2)                      ; 0
41    (LOAD&PUSH 8)
42    (CALLS1&PUSH 148)                   ; NTH
44    (CALLSR&PUSH 1 54)                  ; -
47    (CALLSR&PUSH 2 55)                  ; *
50    (CALLSR&PUSH 1 56)                  ; /
53    (CONST&PUSH 1)                      ; 1
54    (GETVALUE&PUSH 4)                   ; $WINDOW_SIZE
56    (CALLS1&PUSH 148)                   ; NTH
58    (CONST&PUSH 5)                      ; 1.2
59    (CONST&PUSH 1)                      ; 1
60    (LOAD&PUSH 9)
61    (CALLS1&PUSH 148)                   ; NTH
63    (CONST&PUSH 2)                      ; 0
64    (LOAD&PUSH 10)
65    (CALLS1&PUSH 148)                   ; NTH
67    (CALLSR&PUSH 1 54)                  ; -
70    (CALLSR&PUSH 2 55)                  ; *
73    (CALLSR&PUSH 1 56)                  ; /
76    (LOAD&PUSH 0)
77    (LOAD&PUSH 2)
78    (CALLSR&JMPIFNOT 1 47 L84)          ; <
82    (LOAD 0)
83    (STORE 1)
84    L84
84    (CONST&PUSH 6)                      ; (MLIST)
85    (LOAD&PUSH 2)
86    (LOAD&PUSH 3)
87    (LIST 3)
89    (BIND 7)                            ; $PS_SCALE
91    (CONST&PUSH 8)                      ; (MLIST)
92    (LOAD&PUSH 6)
93    (LOAD&PUSH 8)
94    (LIST 3)
96    (BIND 9)                            ; $PS_TRANSLATE
98    (LOAD&PUSH 11)
99    (CALL1 10)                          ; ASSUREPS
101   (UNBIND 2)
103   (SKIP&RET 8)


Disassembly of function #:|(DEFUN ASSUREPS (&OPTIONAL DO-PROLOG) ...)-81|
(CONST 0) = ASSUREPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASSUREPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASSUREPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASSUREPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASSUREPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASSUREPS
8     (SKIP&RET 1)


Disassembly of function ASSUREPS
(CONST 0) = $PSTREAM
(CONST 1) = "maxout.ps"
(CONST 2) = :OUTPUT
(CONST 3) = "%!"
(CONST 4) = P
(CONST 5) = 0.5
(CONST 6) = 1
(CONST 7) = $WINDOW_SIZE
(CONST 8) = 2
(CONST 9) = "translate"
(CONST 10) = "scale"
(CONST 11) = $PS_SCALE
(CONST 12) = PSAPPLY
(CONST 13) = $PS_TRANSLATE
(CONST 14) = "translate"
(CONST 15) = " 1.5 "
(CONST 16) = 
"div setlinewidth
/Helvetica findfont 14 "
(CONST 17) = 
" div scalefont setfont
/dotradius .05 def
/drawdot {
 /yy exch def
 /xx exch def
  gsave
  xx yy dotradius 0 360 arc
  fill
  grestore
}def

/ticklength  .03 def
/axiswidth  .01 def
/drawtick {
 /yy exch def
 /xx exch def
  gsave
  xx ticklength sub yy moveto
  xx ticklength add yy lineto
  stroke	
  xx yy  ticklength sub  moveto
  xx yy  ticklength add  lineto
  stroke
  grestore
} def
"
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: ($PS_TRANSLATE $PS_SCALE $WINDOW_SIZE $PSTREAM)
writes special variable : ($PSTREAM)
60 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (GETVALUE&PUSH 0)                   ; $PSTREAM
4     (CALLS2&JMPIFNOT 22 L17)            ; STREAMP
7     (GETVALUE 0)                        ; $PSTREAM
9     (JMPIFNOT L23)
11    L11
11    (LOAD&JMPIF 1 L34)
14    L14
14    (NIL)
15    (SKIP&RET 2)
17    L17
17    (T&STORE 1)
19    (GETVALUE 0)                        ; $PSTREAM
21    (JMPIF L11)
23    L23
23    (CONST&PUSH 1)                      ; "maxout.ps"
24    (CONST&PUSH 2)                      ; :OUTPUT
25    (PUSH-UNBOUND 5)
27    (CALLS1 249)                        ; OPEN
29    (SETVALUE 0)                        ; $PSTREAM
31    (LOAD&JMPIFNOT 1 L14)
34    L34
34    (CONST&PUSH 3)                      ; "%!"
35    (CALL1 4)                           ; P
37    (CONST&PUSH 5)                      ; 0.5
38    (CONST&PUSH 6)                      ; 1
39    (GETVALUE&PUSH 7)                   ; $WINDOW_SIZE
41    (CALLS1&PUSH 148)                   ; NTH
43    (CALLSR&PUSH 2 55)                  ; *
46    (CONST&PUSH 5)                      ; 0.5
47    (CONST&PUSH 8)                      ; 2
48    (GETVALUE&PUSH 7)                   ; $WINDOW_SIZE
50    (CALLS1&PUSH 148)                   ; NTH
52    (CALLSR&PUSH 2 55)                  ; *
55    (CONST&PUSH 9)                      ; "translate"
56    (CALL 3 4)                          ; P
59    (CONST&PUSH 10)                     ; "scale"
60    (GETVALUE&PUSH 11)                  ; $PS_SCALE
62    (CALL2 12)                          ; PSAPPLY
64    (CONST&PUSH 6)                      ; 1
65    (GETVALUE&PUSH 13)                  ; $PS_TRANSLATE
67    (CALLS1&PUSH 148)                   ; NTH
69    (CALLSR&PUSH 0 54)                  ; -
72    (CONST&PUSH 8)                      ; 2
73    (GETVALUE&PUSH 13)                  ; $PS_TRANSLATE
75    (CALLS1&PUSH 148)                   ; NTH
77    (CALLSR&PUSH 0 54)                  ; -
80    (CONST&PUSH 14)                     ; "translate"
81    (CALL 3 4)                          ; P
84    (CONST&PUSH 15)                     ; " 1.5 "
85    (GETVALUE 11)                       ; $PS_SCALE
87    (CDR)
88    (CAR&PUSH)
89    (CONST&PUSH 16)                     ; "div setlinewidth
/Helvetica findfont 14 "
90    (GETVALUE 11)                       ; $PS_SCALE
92    (CDR)
93    (CAR&PUSH)
94    (CONST&PUSH 17)                     ; " div scalefont setfont
/dotradius .05 def
/drawdot {
 /yy exch def
 /xx exch def
  gsave
  xx yy dotradius 0 360 arc
  fill
  grestore
}def

/ticklength  .03 def
/axiswidth  .01 def
/drawtick {
 /yy exch def
 /xx exch def
  gsave
  xx ticklength sub yy moveto
  xx ticklength add yy lineto
  stroke	
  xx yy  ticklength sub  moveto
  xx yy  ticklength add  lineto
  stroke
  grestore
} def
"
95    (CALL 5 4)                          ; P
98    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $CLOSEPS NIL ...)-82|
(CONST 0) = $CLOSEPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CLOSEPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CLOSEPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CLOSEPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CLOSEPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CLOSEPS
8     (SKIP&RET 1)


Disassembly of function $CLOSEPS
(CONST 0) = $PSTREAM
(CONST 1) = "showpage"
(CONST 2) = P
(CONST 3) = CLOSE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($PSTREAM)
writes special variable : ($PSTREAM)
12 byte-code instructions:
0     (GETVALUE&PUSH 0)                   ; $PSTREAM
2     (CALLS2&JMPIFNOT 22 L12)            ; STREAMP
5     (CONST&PUSH 1)                      ; "showpage"
6     (CALL1 2)                           ; P
8     (GETVALUE&PUSH 0)                   ; $PSTREAM
10    (CALL1 3)                           ; CLOSE
12    L12
12    (PUSH)
13    (NIL)
14    (SETVALUE 0)                        ; $PSTREAM
16    (POP)
17    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PS-FIXUP-POINTS (LIS) ...)-83|
(CONST 0) = PS-FIXUP-POINTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PS-FIXUP-POINTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PS-FIXUP-POINTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PS-FIXUP-POINTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PS-FIXUP-POINTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PS-FIXUP-POINTS
8     (SKIP&RET 1)


Disassembly of function PS-FIXUP-POINTS
(CONST 0) = $LISTP
(CONST 1) = #(NIL)
(CONST 2) = :NAME
(CONST 3) = COMMON-LISP:CONTINUE
(CONST 4) = :INVOKE-FUNCTION
(CONST 5) = #<COMPILED-CLOSURE PS-FIXUP-POINTS-1>
(CONST 6) = :REPORT
(CONST 7) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 8) = :INTERACTIVE
(CONST 9) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 10) = SYSTEM::MAKE-RESTART
(CONST 11) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 12) = SYSTEM::*CONDITION-RESTARTS*
(CONST 13) = (#(CONDITION 3) 1 . 1)
(CONST 14) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 15) = SIGNAL
(CONST 16) = "~A"
(CONST 17) = ($LISTP LIS)
(CONST 18) = SYSTEM::ASSERT-ERROR-STRING
(CONST 19) = 1
(CONST 20) = W
(CONST 21) = 2
(CONST 22) = "pscurve:Neither [x0,y0,x1,y1,...] nor [[x0,y0],[x1,y1],...]"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
writes special variable : (W)
117 byte-code instructions:
0     (JMP L105)
3     L3
3     (HANDLER-BEGIN&PUSH)
4     (LOAD&PUSH 0)
5     (LOADI&PUSH 0 0 6)
9     (CALL2 14)                          ; SYSTEM::ADD-CONDITION-RESTARTS
11    (LOAD&PUSH 0)
12    (CALL1 15)                          ; SIGNAL
14    (SKIPSP 2 1)
17    (SKIP&RET 2)
19    L19
19    (NIL)
20    (MAKE-VECTOR1&PUSH 1)
22    (NIL)
23    (STOREC 0 0)
26    (TAGBODY-OPEN 1 L96)                ; #(NIL)
30    (CONST&PUSH 2)                      ; :NAME
31    (CONST&PUSH 3)                      ; COMMON-LISP:CONTINUE
32    (CONST&PUSH 4)                      ; :INVOKE-FUNCTION
33    (LOAD&PUSH 7)
34    (LOAD&PUSH 6)
35    (COPY-CLOSURE&PUSH 5 2)             ; #<COMPILED-CLOSURE PS-FIXUP-POINTS-1>
38    (CONST&PUSH 6)                      ; :REPORT
39    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; SYSTEM::REPORT-NO-NEW-VALUE
41    (CONST&PUSH 8)                      ; :INTERACTIVE
42    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
44    (CALL&PUSH 8 10)                    ; SYSTEM::MAKE-RESTART
47    (LIST&PUSH 1)
49    (LOAD&PUSH 0)
50    (GETVALUE&PUSH 11)                  ; SYSTEM::*ACTIVE-RESTARTS*
52    (CALLSR 2 34)                       ; APPEND
55    (BIND 11)                           ; SYSTEM::*ACTIVE-RESTARTS*
57    (GETVALUE 12)                       ; SYSTEM::*CONDITION-RESTARTS*
59    (BIND 12)                           ; SYSTEM::*CONDITION-RESTARTS*
61    (HANDLER-OPEN 13 L3)                ; (#(CONDITION 3) 1 . 1)
63    (CONST&PUSH 16)                     ; "~A"
64    (CONST&PUSH 17)                     ; ($LISTP LIS)
65    (CALL1&PUSH 18)                     ; SYSTEM::ASSERT-ERROR-STRING
67    (CALLSR 1 29)                       ; ERROR
70    L70
70    (PUSH)
71    (LOAD&PUSH 2)
72    (NIL)
73    (CONS)
74    (STORE 3)
75    (PUSH)
76    (CALLS1 171)                        ; SYSTEM::%RPLACD
78    (JMP L161)
81    L81
81    (PUSH)
82    (LOAD&PUSH 1)
83    (NIL)
84    (CONS)
85    (STORE 3)
86    (PUSH)
87    (CALLS1 171)                        ; SYSTEM::%RPLACD
89    (JMP L176)
92    L92
92    (CONST&PUSH 22)                     ; "pscurve:Neither [x0,y0,x1,y1,...] nor [[x0,y0],[x1,y1],...]"
93    (CALLSR 0 29)                       ; ERROR
96    L96
96    (LOADC 4 0)
99    (UNLIST 0 0)
102   (TAGBODY-CLOSE)
103   (SKIP 1)
105   L105
105   (LOAD&PUSH 1)
106   (CALL1&JMPIFNOT 0 L19)              ; $LISTP
110   (LOAD&CDR&STORE 1)
112   (CAR&PUSH)
113   (CALLS2&JMPIF 8 L186)               ; NUMBERP
117   (LOAD&CAR&PUSH 1)
119   (CALL1&JMPIFNOT 0 L92)              ; $LISTP
122   (CONST&PUSH 19)                     ; 1
123   (LOAD&CAR&PUSH 2)
125   (CALLS1&PUSH 148)                   ; NTH
127   (CALLS2&JMPIFNOT 8 L92)             ; NUMBERP
130   (NIL)
131   (BIND 20)                           ; W
133   (LOAD&PUSH 4)
134   (PUSH-NIL 4)
136   (LOAD&JMPIFNOT 4 L181)
139   L139
139   (LOAD&CAR&PUSH 4)
141   (LOAD 0)
142   (SETVALUE 20)                       ; W
144   (SKIP 1)
146   (CONST&PUSH 19)                     ; 1
147   (GETVALUE&PUSH 20)                  ; W
149   (CALLS1&STORE 148 1)                ; NTH
152   (LOAD&JMPIF 2 L70)
156   (LOAD&PUSH 1)
157   (NIL)
158   (CONS)
159   (STORE 2)
160   (STORE 3)
161   L161
161   (CONST&PUSH 21)                     ; 2
162   (GETVALUE&PUSH 20)                  ; W
164   (CALLS1&STORE 148 0)                ; NTH
167   (LOAD&JMPIF 2 L81)
171   (LOAD&PUSH 0)
172   (NIL)
173   (CONS)
174   (STORE 2)
175   (STORE 3)
176   L176
176   (LOAD&CDR&STORE 4)
178   (LOAD&JMPIF 4 L139)
181   L181
181   (LOAD 3)
182   (SKIP 5)
184   (UNBIND1)
185   (STORE 1)
186   L186
186   (LOAD 1)
187   (SKIP&RET 2)


Disassembly of function PS-FIXUP-POINTS-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN $PSDRAW_CURVE (LIS &AUX #) ...)-84|
(CONST 0) = $PSDRAW_CURVE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSDRAW_CURVE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSDRAW_CURVE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSDRAW_CURVE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSDRAW_CURVE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSDRAW_CURVE
8     (SKIP&RET 1)


Disassembly of function $PSDRAW_CURVE
(CONST 0) = 0
(CONST 1) = N
(CONST 2) = PS-FIXUP-POINTS
(CONST 3) = "newpath"
(CONST 4) = 1
(CONST 5) = "moveto"
(CONST 6) = P
(CONST 7) = MOVETO
(CONST 8) = "stroke"
(CONST 9) = "odd length list of points"
(CONST 10) = "moveto"
(CONST 11) = "lineto"
(CONST 12) = 20
(CONST 13) = "stroke"
(CONST 14) = "stroke"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (N)
writes special variable : (N)
82 byte-code instructions:
0     (CONST 0)                           ; 0
1     (BIND 1)                            ; N
3     (LOAD&PUSH 4)
4     (CALL1 2)                           ; PS-FIXUP-POINTS
6     (STORE 4)
7     (CONST&PUSH 3)                      ; "newpath"
8     (CONST&PUSH 0)                      ; 0
9     (LOAD&PUSH 6)
10    (CALLS1&PUSH 148)                   ; NTH
12    (CONST&PUSH 4)                      ; 1
13    (LOAD&PUSH 7)
14    (CALLS1&PUSH 148)                   ; NTH
16    (CONST&PUSH 5)                      ; "moveto"
17    (CALL 4 6)                          ; P
20    (NIL&PUSH)
21    (LOAD&JMPIFNOT 5 L105)
25    (JMP L46)
27    L27
27    (CONST&PUSH 9)                      ; "odd length list of points"
28    (CALLSR 0 29)                       ; ERROR
31    L31
31    (LOAD&CAR&PUSH 5)
33    (LOAD&PUSH 1)
34    (CONST 10)                          ; "moveto"
35    (JMP L81)
37    L37
37    (CONST&PUSH 13)                     ; "stroke"
38    (CALL1 6)                           ; P
40    (CONST 0)                           ; 0
41    (SETVALUE 1)                        ; N
43    (LOAD&JMPIFNOT 5 L105)
46    L46
46    (LOAD&CAR&PUSH 5)
48    (JMPIFNOTEQTO 7 L66)                ; MOVETO
51    (GETVALUE&PUSH 1)                   ; N
53    (JMPIFEQTO 0 L59)                   ; 0
56    (CONST&PUSH 8)                      ; "stroke"
57    (CALL1 6)                           ; P
59    L59
59    (CONST 0)                           ; 0
60    (SETVALUE 1)                        ; N
62    (LOAD 5)
63    (CDR)
64    (CDR)
65    (STORE 5)
66    L66
66    (LOAD 5)
67    (CDR)
68    (CAR)
69    (STORE 0)
70    (JMPIFNOT L27)
72    (GETVALUE&PUSH 1)                   ; N
74    (JMPIFEQTO 0 L31)                   ; 0
77    (LOAD&CAR&PUSH 5)
79    (LOAD&PUSH 1)
80    (CONST 11)                          ; "lineto"
81    L81
81    (PUSH)
82    (CALL 3 6)                          ; P
85    (GETVALUE&PUSH 1)                   ; N
87    (CALLS2 150)                        ; 1+
89    (SETVALUE 1)                        ; N
91    (PUSH)
92    (CONST&PUSH 12)                     ; 20
93    (CALLS2&PUSH 183)                   ; MOD
95    (JMPIFEQTO 0 L37)                   ; 0
98    (LOAD 5)
99    (CDR)
100   (CDR)
101   (STORE 5)
102   (LOAD&JMPIF 5 L46)
105   L105
105   (SKIP 1)
107   (GETVALUE&PUSH 1)                   ; N
109   (CONST 0)                           ; 0
110   (EQ)
111   (JMPIF1 L116)
113   (CONST&PUSH 14)                     ; "stroke"
114   (CALL1 6)                           ; P
116   L116
116   (UNBIND1)
117   (SKIP&RET 2)


Disassembly of function #:|(DEFVAR $VIEWPS_COMMAND "(ghostview  ~a)")-85|
(CONST 0) = (SPECIAL $VIEWPS_COMMAND)
(CONST 1) = $VIEWPS_COMMAND
(CONST 2) = "(ghostview  ~a)"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $VIEWPS_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
8     (CONST&PUSH 2)                      ; "(ghostview  ~a)"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $VIEWPS_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $VIEWPS_COMMAND "(gs -I. -Q  ~a)")-86|
(CONST 0) = (SPECIAL $VIEWPS_COMMAND)
(CONST 1) = $VIEWPS_COMMAND
(CONST 2) = "(gs -I. -Q  ~a)"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $VIEWPS_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
8     (CONST&PUSH 2)                      ; "(gs -I. -Q  ~a)"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $VIEWPS_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $VIEWPS_COMMAND "echo /def /show {pop} def \|  cat - ~a \| x11ps")-87|
(CONST 0) = (SPECIAL $VIEWPS_COMMAND)
(CONST 1) = $VIEWPS_COMMAND
(CONST 2) = "echo /def /show {pop} def |  cat - ~a | x11ps"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $VIEWPS_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
8     (CONST&PUSH 2)                      ; "echo /def /show {pop} def |  cat - ~a | x11ps"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $VIEWPS_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFVAR $VIEWPS_COMMAND "echo '/showpage { .copypage readmouseclick /ke exch def ke 1 eq { erasepage initgraphics} {ke 5 ne {quit} if} ifelse} def  {(~a) run } loop' \| gs  -title 'Maxima  (click left to exit,middle to redraw)' > /dev/null 2>/dev/null &")-88|
(CONST 0) = (SPECIAL $VIEWPS_COMMAND)
(CONST 1) = $VIEWPS_COMMAND
(CONST 2) = "echo '/showpage { .copypage readmouseclick /ke exch def ke 1 eq { erasepage initgraphics} {ke 5 ne {quit} if} ifelse} def  {(~a) run } loop' | gs  -title 'Maxima  (click left to exit,middle to redraw)' > /dev/null 2>/dev/null &"
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $VIEWPS_COMMAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $VIEWPS_COMMAND
8     (CONST&PUSH 2)                      ; "echo '/showpage { .copypage readmouseclick /ke exch def ke 1 eq { erasepage initgraphics} {ke 5 ne {quit} if} ifelse} def  {(~a) run } loop' | gs  -title 'Maxima  (click left to exit,middle to redraw)' > /dev/null 2>/dev/null &"
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $VIEWPS_COMMAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $VIEWPS (&OPTIONAL FILE) ...)-89|
(CONST 0) = $VIEWPS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $VIEWPS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VIEWPS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $VIEWPS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $VIEWPS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $VIEWPS
8     (SKIP&RET 1)


Disassembly of function $VIEWPS
(CONST 0) = $PSTREAM
(CONST 1) = "showpage"
(CONST 2) = $PSCOM
(CONST 3) = MAXIMA-STRING
(CONST 4) = "maxout.ps"
(CONST 5) = $VIEWPS_COMMAND
(CONST 6) = "(gs -I. -Q  ~a)"
(CONST 7) = #<COMPILED-CLOSURE $VIEWPS-1>
(CONST 8) = *STANDARD-OUTPUT*
(CONST 9) = FORMAT
(CONST 10) = $SYSTEM
0 required arguments
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (*STANDARD-OUTPUT* $VIEWPS_COMMAND $PSTREAM)
36 byte-code instructions:
0     (UNBOUND->NIL 1)
2     (GETVALUE&PUSH 0)                   ; $PSTREAM
4     (CALLS2&JMPIF 22 L44)               ; STREAMP
7     (LOAD&JMPIF 1 L54)
10    L10
10    (CONST 4)                           ; "maxout.ps"
11    (STORE 1)
12    (GETVALUE&PUSH 0)                   ; $PSTREAM
14    (CALLS2&JMPIFNOT 22 L21)            ; STREAMP
17    (GETVALUE&PUSH 0)                   ; $PSTREAM
19    (CALLS1 142)                        ; FORCE-OUTPUT
21    L21
21    (GETVALUE&PUSH 5)                   ; $VIEWPS_COMMAND
23    (CONST&PUSH 6)                      ; "(gs -I. -Q  ~a)"
24    (CALLS2&JMPIFNOT 2 L33)             ; EQUAL
27    (CONST&PUSH 7)                      ; #<COMPILED-CLOSURE $VIEWPS-1>
28    (GETVALUE&PUSH 8)                   ; *STANDARD-OUTPUT*
30    (CALLSR 1 21)                       ; FUNCALL
33    L33
33    (NIL&PUSH)
34    (GETVALUE&PUSH 5)                   ; $VIEWPS_COMMAND
36    (LOAD&PUSH 3)
37    (CALL&PUSH 3 9)                     ; FORMAT
40    (CALL1 10)                          ; $SYSTEM
42    (SKIP&RET 2)
44    L44
44    (CONST&PUSH 1)                      ; "showpage"
45    (CALL1 2)                           ; $PSCOM
47    (GETVALUE&PUSH 0)                   ; $PSTREAM
49    (CALLS1 142)                        ; FORCE-OUTPUT
51    (LOAD&JMPIFNOT 1 L10)
54    L54
54    (PUSH)
55    (CALL1 3)                           ; MAXIMA-STRING
57    (STORE 1)
58    (JMP L21)


Disassembly of function $VIEWPS-1
(CONST 0) = 
"
type `quit' to exit back to affine or maxima
  To reprint a page do
  GS>showpage
  GS>(maxout.ps)run
  GS> -150 -150 translate 1.2 1.2 scale (maxout.ps)run
  would print it moved 150/72 inches to left, and down, and scaled by 1.2 times
  showpage clears scaling."
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
type `quit' to exit back to affine or maxima
  To reprint a page do
  GS>showpage
  GS>(maxout.ps)run
  GS> -150 -150 translate 1.2 1.2 scale (maxout.ps)run
  would print it moved 150/72 inches to left, and down, and scaled by 1.2 times
  showpage clears scaling."
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function #:|(DEFUN $CHKPT (A) ...)-90|
(CONST 0) = $CHKPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $CHKPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $CHKPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $CHKPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $CHKPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $CHKPT
8     (SKIP&RET 1)


Disassembly of function $CHKPT
(CONST 0) = A
(CONST 1) = $LISTP
(CONST 2) = 1
(CONST 3) = 2
(CONST 4) = "illegal pt ~a"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (A)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; A
3     (GETVALUE&PUSH 0)                   ; A
5     (CALL1&JMPIFNOT 1 L28)              ; $LISTP
8     (CONST&PUSH 2)                      ; 1
9     (GETVALUE&PUSH 0)                   ; A
11    (CALLS1&PUSH 148)                   ; NTH
13    (CALLS2&JMPIFNOT 8 L28)             ; NUMBERP
16    (CONST&PUSH 3)                      ; 2
17    (GETVALUE&PUSH 0)                   ; A
19    (CALLS1&PUSH 148)                   ; NTH
21    (CALLS2&JMPIFNOT 8 L28)             ; NUMBERP
24    (T)
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (CONST&PUSH 4)                      ; "illegal pt ~a"
29    (GETVALUE&PUSH 0)                   ; A
31    (CALLSR 1 29)                       ; ERROR


Disassembly of function #:|(DEFVAR $PSLINENO NIL)-91|
(CONST 0) = (SPECIAL $PSLINENO)
(CONST 1) = $PSLINENO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $PSLINENO)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $PSLINENO
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $PSLINENO
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $PSLINENO
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN $PSDRAWLINE (A &OPTIONAL B ...) ...)-92|
(CONST 0) = $PSDRAWLINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSDRAWLINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSDRAWLINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSDRAWLINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSDRAWLINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSDRAWLINE
8     (SKIP&RET 1)


Disassembly of function $PSDRAWLINE
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = D
(CONST 4) = $LISTP
(CONST 5) = 1
(CONST 6) = $CHKPT
(CONST 7) = #(NIL)
(CONST 8) = :NAME
(CONST 9) = COMMON-LISP:CONTINUE
(CONST 10) = :INVOKE-FUNCTION
(CONST 11) = #<COMPILED-CLOSURE $PSDRAWLINE-1>
(CONST 12) = :REPORT
(CONST 13) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 14) = :INTERACTIVE
(CONST 15) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 16) = SYSTEM::MAKE-RESTART
(CONST 17) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 18) = SYSTEM::*CONDITION-RESTARTS*
(CONST 19) = (#(CONDITION 106) 1 . 1)
(CONST 20) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 21) = SIGNAL
(CONST 22) = "~A"
(CONST 23) = (AND ($LISTP A) ($CHKPT (NTH 1 A)))
(CONST 24) = SYSTEM::ASSERT-ERROR-STRING
(CONST 25) = 2
(CONST 26) = $PSLINENO
(CONST 27) = $PSLABELLINE
(CONST 28) = "moveto"
(CONST 29) = P
(CONST 30) = "lineto"
(CONST 31) = "stroke"
1 required argument
3 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS* D $PSLINENO A C B)
writes special variables : (A B $PSLINENO D C)
144 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; A
3     (JMPIFBOUNDP 6 L7)
6     (NIL)
7     L7
7     (BIND 1)                            ; B
9     (JMPIFBOUNDP 8 L13)
12    (NIL)
13    L13
13    (BIND 2)                            ; C
15    (JMPIFBOUNDP 10 L19)
18    (NIL)
19    L19
19    (BIND 3)                            ; D
21    (GETVALUE 1)                        ; B
23    (JMPIFNOT L181)
26    (GETVALUE 2)                        ; C
28    (JMPIF L48)
30    L30
30    (GETVALUE&PUSH 1)                   ; B
32    (CALL1 6)                           ; $CHKPT
34    (CONST&PUSH 5)                      ; 1
35    (GETVALUE&PUSH 1)                   ; B
37    (CALLS1 148)                        ; NTH
39    (SETVALUE 2)                        ; C
41    (CONST&PUSH 25)                     ; 2
42    (GETVALUE&PUSH 1)                   ; B
44    (CALLS1 148)                        ; NTH
46    (SETVALUE 3)                        ; D
48    L48
48    (GETVALUE&PUSH 0)                   ; A
50    (CALL1&JMPIF 4 L217)                ; $LISTP
54    (GETVALUE 2)                        ; C
56    (JMPIFNOT L236)
59    L59
59    (GETVALUE 26)                       ; $PSLINENO
61    (JMPIFNOT L81)
63    L63
63    (PUSH)
64    (CALLS2 150)                        ; 1+
66    (SETVALUE 26)                       ; $PSLINENO
68    (GETVALUE&PUSH 0)                   ; A
70    (GETVALUE&PUSH 1)                   ; B
72    (GETVALUE&PUSH 2)                   ; C
74    (GETVALUE&PUSH 3)                   ; D
76    (GETVALUE&PUSH 26)                  ; $PSLINENO
78    (CALL 5 27)                         ; $PSLABELLINE
81    L81
81    (GETVALUE&PUSH 0)                   ; A
83    (GETVALUE&PUSH 1)                   ; B
85    (CONST&PUSH 28)                     ; "moveto"
86    (CALL 3 29)                         ; P
89    (GETVALUE&PUSH 2)                   ; C
91    (GETVALUE&PUSH 3)                   ; D
93    (CONST&PUSH 30)                     ; "lineto"
95    (CALL 3 29)                         ; P
98    (CONST&PUSH 31)                     ; "stroke"
100   (CALL1 29)                          ; P
102   (UNBIND 4)
104   (SKIP&RET 5)
106   L106
106   (HANDLER-BEGIN&PUSH)
107   (LOAD&PUSH 0)
108   (LOADI&PUSH 0 0 6)
112   (CALL2 20)                          ; SYSTEM::ADD-CONDITION-RESTARTS
114   (LOAD&PUSH 0)
115   (CALL1 21)                          ; SIGNAL
117   (SKIPSP 2 1)
120   (SKIP&RET 2)
122   L122
122   (NIL)
123   (MAKE-VECTOR1&PUSH 1)
125   (NIL)
126   (STOREC 0 0)
129   (TAGBODY-OPEN 7 L172)               ; #(NIL)
132   (CONST&PUSH 8)                      ; :NAME
133   (CONST&PUSH 9)                      ; COMMON-LISP:CONTINUE
134   (CONST&PUSH 10)                     ; :INVOKE-FUNCTION
135   (LOAD&PUSH 7)
136   (LOAD&PUSH 6)
137   (COPY-CLOSURE&PUSH 11 2)            ; #<COMPILED-CLOSURE $PSDRAWLINE-1>
140   (CONST&PUSH 12)                     ; :REPORT
141   (CONST&SYMBOL-FUNCTION&PUSH 13)     ; SYSTEM::REPORT-NO-NEW-VALUE
143   (CONST&PUSH 14)                     ; :INTERACTIVE
144   (CONST&SYMBOL-FUNCTION&PUSH 15)     ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
146   (CALL&PUSH 8 16)                    ; SYSTEM::MAKE-RESTART
149   (LIST&PUSH 1)
151   (LOAD&PUSH 0)
152   (GETVALUE&PUSH 17)                  ; SYSTEM::*ACTIVE-RESTARTS*
154   (CALLSR 2 34)                       ; APPEND
157   (BIND 17)                           ; SYSTEM::*ACTIVE-RESTARTS*
159   (GETVALUE 18)                       ; SYSTEM::*CONDITION-RESTARTS*
161   (BIND 18)                           ; SYSTEM::*CONDITION-RESTARTS*
163   (HANDLER-OPEN 19 L106)              ; (#(CONDITION 106) 1 . 1)
165   (CONST&PUSH 22)                     ; "~A"
166   (CONST&PUSH 23)                     ; (AND ($LISTP A) ($CHKPT (NTH 1 A)))
167   (CALL1&PUSH 24)                     ; SYSTEM::ASSERT-ERROR-STRING
169   (CALLSR 1 29)                       ; ERROR
172   L172
172   (LOADC 4 0)
175   (UNLIST 0 0)
178   (TAGBODY-CLOSE)
179   (SKIP 1)
181   L181
181   (GETVALUE&PUSH 0)                   ; A
183   (CALL1&JMPIFNOT 4 L122)             ; $LISTP
186   (CONST&PUSH 5)                      ; 1
187   (GETVALUE&PUSH 0)                   ; A
189   (CALLS1&PUSH 148)                   ; NTH
191   (CALL1&JMPIFNOT 6 L122)             ; $CHKPT
195   (CONST&PUSH 25)                     ; 2
196   (GETVALUE&PUSH 0)                   ; A
198   (CALLS1 148)                        ; NTH
200   (SETVALUE 1)                        ; B
202   (CONST&PUSH 5)                      ; 1
203   (GETVALUE&PUSH 0)                   ; A
205   (CALLS1 148)                        ; NTH
207   (SETVALUE 0)                        ; A
209   (GETVALUE 2)                        ; C
211   (JMPIFNOT L30)
214   (JMP L48)
217   L217
217   (CONST&PUSH 25)                     ; 2
218   (GETVALUE&PUSH 0)                   ; A
220   (CALLS1 148)                        ; NTH
222   (SETVALUE 1)                        ; B
224   (CONST&PUSH 5)                      ; 1
225   (GETVALUE&PUSH 0)                   ; A
227   (CALLS1 148)                        ; NTH
229   (SETVALUE 0)                        ; A
231   (GETVALUE 2)                        ; C
233   (JMPIF L59)
236   L236
236   (CONST&PUSH 5)                      ; 1
237   (GETVALUE&PUSH 1)                   ; B
239   (CALLS1 148)                        ; NTH
241   (SETVALUE 2)                        ; C
243   (CONST&PUSH 25)                     ; 2
244   (GETVALUE&PUSH 1)                   ; B
246   (CALLS1 148)                        ; NTH
248   (SETVALUE 2)                        ; C
250   (GETVALUE 26)                       ; $PSLINENO
252   (JMPIFNOT L81)
255   (JMP L63)


Disassembly of function $PSDRAWLINE-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN $PSLABELLINE (A B C ...) ...)-93|
(CONST 0) = $PSLABELLINE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSLABELLINE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSLABELLINE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSLABELLINE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSLABELLINE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSLABELLINE
8     (SKIP&RET 1)


Disassembly of function $PSLABELLINE
(CONST 0) = A
(CONST 1) = B
(CONST 2) = C
(CONST 3) = D
(CONST 4) = $PSLINENO
(CONST 5) = 1/2
(CONST 6) = "moveto"
(CONST 7) = "(<--L"
(CONST 8) = ")show"
(CONST 9) = P
5 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($PSLINENO D B C A)
41 byte-code instructions:
0     (LOAD 5)
1     (BIND 0)                            ; A
3     (LOAD 7)
4     (BIND 1)                            ; B
6     (LOAD 9)
7     (BIND 2)                            ; C
9     (LOAD 11)
10    (BIND 3)                            ; D
12    (LOAD 13)
13    (BIND 4)                            ; $PSLINENO
15    (CONST&PUSH 5)                      ; 1/2
16    (GETVALUE&PUSH 0)                   ; A
18    (GETVALUE&PUSH 2)                   ; C
20    (CALLSR&PUSH 2 53)                  ; +
23    (CALLSR&PUSH 2 55)                  ; *
26    (CONST&PUSH 5)                      ; 1/2
27    (GETVALUE&PUSH 1)                   ; B
29    (GETVALUE&PUSH 3)                   ; D
31    (CALLSR&PUSH 2 53)                  ; +
34    (CALLSR&PUSH 2 55)                  ; *
37    (CONST&PUSH 6)                      ; "moveto"
38    (PUSH-UNBOUND 2)
40    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
42    (GETVALUE&PUSH 4)                   ; $PSLINENO
44    (CONST&PUSH 7)                      ; "(<--L"
45    (LOAD&PUSH 2)
46    (PUSH-UNBOUND 2)
48    (CALLS1 137)                        ; WRITE-STRING
50    (LOAD&PUSH 0)
51    (LOAD&PUSH 2)
52    (CALLS1 132)                        ; PRINC
54    (CONST&PUSH 8)                      ; ")show"
55    (LOAD&PUSH 2)
56    (PUSH-UNBOUND 2)
58    (CALLS1 137)                        ; WRITE-STRING
60    (SKIP 1)
62    (LOAD&PUSH 0)
63    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
66    (CALL 4 9)                          ; P
69    (UNBIND 5)
71    (SKIP&RET 6)


Disassembly of function #:|(DEFUN $SORT_POLYS (LIS) ...)-94|
(CONST 0) = $SORT_POLYS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SORT_POLYS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SORT_POLYS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SORT_POLYS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SORT_POLYS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SORT_POLYS
8     (SKIP&RET 1)


Disassembly of function $SORT_POLYS
(CONST 0) = V
(CONST 1) = W
(CONST 2) = 3
(CONST 3) = NEXT
(CONST 4) = (MLIST)
(CONST 5) = CDR
(CONST 6) = <
(CONST 7) = SORTCAR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W V)
writes special variables : (W V)
81 byte-code instructions:
0     (NIL&PUSH)
1     (LOAD&CDR&PUSH 2)
3     (LOAD 1)
4     (BIND 0)                            ; V
6     (PUSH-NIL 3)
8     (LOAD&JMPIFNOT 6 L79)
12    L12
12    (LOAD&CAR&PUSH 6)
14    (LOAD 0)
15    (SETVALUE 0)                        ; V
17    (SKIP 1)
19    (NIL&PUSH)
20    (GETVALUE 0)                        ; V
22    (CDR&PUSH)
23    (LOAD 1)
24    (BIND 1)                            ; W
26    (PUSH-NIL 2)
28    (LOAD&JMPIFNOT 5 L54)
31    L31
31    (LOAD&CAR&PUSH 5)
33    (LOAD 0)
34    (SETVALUE 1)                        ; W
36    (SKIP 1)
38    (CONST&PUSH 2)                      ; 3
39    (GETVALUE&PUSH 1)                   ; W
41    (CALLS1&STORE 148 0)                ; NTH
44    (LOAD&JMPIF 1 L103)
47    (LOAD 0)
48    (STORE 1)
49    L49
49    (LOAD&CDR&STORE 5)
51    (LOAD&JMPIF 5 L31)
54    L54
54    (LOAD 1)
55    (SKIP 2)
57    (UNBIND1)
58    (SKIP 1)
60    (STORE 0)
61    (GETVALUE 0)                        ; V
63    (CONS)
64    (STORE 0)
65    (LOAD&JMPIF 1 L111)
68    (LOAD&PUSH 0)
69    (NIL)
70    (CONS)
71    (STORE 1)
72    (STORE 2)
73    L73
73    (LOAD&CDR&STORE 6)
75    (LOAD&JMPIF 6 L12)
79    L79
79    (LOAD 2)
80    (SKIP 3)
82    (UNBIND1)
83    (SKIP 1)
85    (STORE 0)
86    (CONST&PUSH 3)                      ; NEXT
87    (PUSH-UNBOUND 1)
89    (CALLS1 130)                        ; PRINT
91    (CONST&PUSH 4)                      ; (MLIST)
92    (CONST&PUSH 5)                      ; CDR
93    (LOAD&PUSH 2)
94    (CONST&PUSH 6)                      ; <
95    (CALL2&PUSH 7)                      ; SORTCAR
97    (CALLSR 0 22)                       ; MAPCAR
100   (CONS)
101   (SKIP&RET 3)
103   L103
103   (PUSH)
104   (LOAD&PUSH 1)
105   (CALLSR&STORE 1 51 1)               ; MAX
109   (JMP L49)
111   L111
111   (PUSH)
112   (LOAD&PUSH 1)
113   (NIL)
114   (CONS)
115   (STORE 2)
116   (PUSH)
117   (CALLS1 171)                        ; SYSTEM::%RPLACD
119   (JMP L73)


Disassembly of function #:|(DEFUN $DRAWPOLY (X) ...)-95|
(CONST 0) = $DRAWPOLY
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $DRAWPOLY>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $DRAWPOLY
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $DRAWPOLY
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $DRAWPOLY>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $DRAWPOLY
8     (SKIP&RET 1)


Disassembly of function $DRAWPOLY
(CONST 0) = X
(CONST 1) = "gsave"
(CONST 2) = P
(CONST 3) = "moveto"
(CONST 4) = "lineto"
(CONST 5) = "1 setgray fill"
(CONST 6) = $PSDRAWLINE
(CONST 7) = "grestore"
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
writes special variable : (X)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; "gsave"
4     (CALL1 2)                           ; P
6     (GETVALUE 0)                        ; X
8     (CDR)
9     (CAR)
10    (CDR&PUSH)
11    (CONST&PUSH 3)                      ; "moveto"
12    (CALL2 2)                           ; P
14    (GETVALUE 0)                        ; X
16    (CDR)
17    (CDR)
18    (SETVALUE 0)                        ; X
20    (NIL&PUSH)
21    (GETVALUE&PUSH 0)                   ; X
23    (LOAD&JMPIFNOT 0 L41)
26    L26
26    (LOAD&CAR&PUSH 0)
28    (LOAD 0)
29    (STORE 2)
30    (SKIP 1)
32    (CDR&PUSH)
33    (CONST&PUSH 4)                      ; "lineto"
34    (CALL2 2)                           ; P
36    (LOAD&CDR&STORE 0)
38    (LOAD&JMPIF 0 L26)
41    L41
41    (CONST&PUSH 5)                      ; "1 setgray fill"
42    (CALL1 2)                           ; P
44    (SKIP 2)
46    (GETVALUE&PUSH 0)                   ; X
48    (CALL1 6)                           ; $PSDRAWLINE
50    (CONST&PUSH 7)                      ; "grestore"
51    (CALL1 2)                           ; P
53    (UNBIND1)
54    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $PSDRAWPOLYS (POLYS) ...)-96|
(CONST 0) = $PSDRAWPOLYS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSDRAWPOLYS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSDRAWPOLYS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSDRAWPOLYS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSDRAWPOLYS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSDRAWPOLYS
8     (SKIP&RET 1)


Disassembly of function $PSDRAWPOLYS
(CONST 0) = V
(CONST 1) = $DRAWPOLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (V)
17 byte-code instructions:
0     (LOAD&CDR&PUSH 1)
2     (NIL)
3     (BIND 0)                            ; V
5     (JMP L16)
7     L7
7     (LOAD 3)
8     (CAR)
9     (SETVALUE 0)                        ; V
11    (PUSH)
12    (CALL1 1)                           ; $DRAWPOLY
14    (LOAD&CDR&STORE 3)
16    L16
16    (LOAD&PUSH 3)
17    (CALLS1&JMPIFNOT 146 L7)            ; ENDP
20    (NIL)
21    (UNBIND1)
22    (SKIP&RET 3)


Disassembly of function #:|(DEFUN $PSAXES (LENG &OPTIONAL #) ...)-97|
(CONST 0) = $PSAXES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSAXES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSAXES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSAXES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSAXES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSAXES
8     (SKIP&RET 1)


Disassembly of function $PSAXES
(CONST 0) = "gsave axiswidth setlinewidth"
(CONST 1) = P
(CONST 2) = 1
(CONST 3) = 2
(CONST 4) = SLOOP::SLOOP-TYPE-ERROR
(CONST 5) = 0
(CONST 6) = $PSDRAWLINE
(CONST 7) = "drawtick"
(CONST 8) = "drawtick"
(CONST 9) = "drawtick"
(CONST 10) = "drawtick"
(CONST 11) = "grestore"
1 required argument
1 optional argument
No rest parameter
No keyword parameters
108 byte-code instructions:
0     (JMPIFBOUNDP 1 L5)
3     (LOAD 2)
4     (STORE 1)
5     L5
5     (CONST&PUSH 0)                      ; "gsave axiswidth setlinewidth"
6     (CALL1 1)                           ; P
8     (PUSH-NIL 4)
10    (LOAD&PUSH 6)
11    (CALLS2&JMPIF 8 L62)                ; NUMBERP
14    (CONST&PUSH 2)                      ; 1
15    (LOAD&PUSH 7)
16    (CALLS1&STORE 148 3)                ; NTH
19    (CONST&PUSH 3)                      ; 2
20    (LOAD&PUSH 7)
21    (CALLS1&STORE 148 1)                ; NTH
24    L24
24    (LOAD&PUSH 5)
25    (CALLS2&JMPIF 8 L71)                ; NUMBERP
28    (CONST&PUSH 2)                      ; 1
29    (LOAD&PUSH 6)
30    (CALLS1&STORE 148 2)                ; NTH
33    (CONST&PUSH 3)                      ; 2
34    (LOAD&PUSH 6)
35    (CALLS1&STORE 148 0)                ; NTH
38    L38
38    (LOAD&PUSH 3)
39    (PUSH-UNBOUND 1)
41    (CALLS2&PUSH 179)                   ; FLOOR
43    (LOAD&PUSH 0)
44    (CALLS2&JMPIF 13 L49)               ; SYSTEM::FIXNUMP
47    (CALL0 4)                           ; SLOOP::SLOOP-TYPE-ERROR
49    L49
49    (LOAD&PUSH 2)
50    (PUSH-UNBOUND 1)
52    (CALLS2&PUSH 180)                   ; CEILING
54    (LOAD&PUSH 0)
55    (CALLS2&JMPIF 13 L103)              ; SYSTEM::FIXNUMP
58    (CALL0 4)                           ; SLOOP::SLOOP-TYPE-ERROR
60    (JMP L103)
62    L62
62    (LOAD&PUSH 6)
63    (CALLSR&STORE 0 54 3)               ; -
67    (LOAD 6)
68    (STORE 1)
69    (JMP L24)
71    L71
71    (LOAD&PUSH 5)
72    (CALLSR&STORE 0 54 2)               ; -
76    (LOAD 5)
77    (STORE 0)
78    (JMP L38)
80    L80
80    (LOAD&PUSH 1)
81    (CONST&PUSH 5)                      ; 0
82    (LOAD&INC&PUSH 3)
84    (CONST&PUSH 5)                      ; 0
85    (CALL 4 6)                          ; $PSDRAWLINE
88    (LOAD&PUSH 1)
89    (CONST&PUSH 5)                      ; 0
90    (CONST&PUSH 7)                      ; "drawtick"
91    (CALL 3 1)                          ; P
94    (LOAD&INC&PUSH 1)
96    (CONST&PUSH 5)                      ; 0
97    (CONST&PUSH 8)                      ; "drawtick"
98    (CALL 3 1)                          ; P
101   (LOAD&INC&STORE 1)
103   L103
103   (LOAD&PUSH 1)
104   (LOAD&PUSH 1)
105   (CALLSR&JMPIFNOT 1 50 L80)          ; >=
109   (SKIP 2)
111   (LOAD&PUSH 2)
112   (PUSH-UNBOUND 1)
114   (CALLS2&PUSH 179)                   ; FLOOR
116   (LOAD&PUSH 0)
117   (CALLS2&JMPIF 13 L122)              ; SYSTEM::FIXNUMP
120   (CALL0 4)                           ; SLOOP::SLOOP-TYPE-ERROR
122   L122
122   (LOAD&PUSH 1)
123   (PUSH-UNBOUND 1)
125   (CALLS2&PUSH 180)                   ; CEILING
127   (LOAD&PUSH 0)
128   (CALLS2&JMPIF 13 L158)              ; SYSTEM::FIXNUMP
131   (CALL0 4)                           ; SLOOP::SLOOP-TYPE-ERROR
133   (JMP L158)
135   L135
135   (CONST&PUSH 5)                      ; 0
136   (LOAD&PUSH 2)
137   (CONST&PUSH 5)                      ; 0
138   (LOAD&INC&PUSH 4)
140   (CALL 4 6)                          ; $PSDRAWLINE
143   (CONST&PUSH 5)                      ; 0
144   (LOAD&PUSH 2)
145   (CONST&PUSH 9)                      ; "drawtick"
146   (CALL 3 1)                          ; P
149   (CONST&PUSH 5)                      ; 0
150   (LOAD&INC&PUSH 2)
152   (CONST&PUSH 10)                     ; "drawtick"
153   (CALL 3 1)                          ; P
156   (LOAD&INC&STORE 1)
158   L158
158   (LOAD&PUSH 1)
159   (LOAD&PUSH 1)
160   (CALLSR&JMPIFNOT 1 50 L135)         ; >=
164   (SKIP 2)
166   (CONST&PUSH 11)                     ; "grestore"
167   (CALL1 1)                           ; P
169   (SKIP&RET 7)


Disassembly of function #:|(DEFUN $PSDRAW_POINTS (LIS) ...)-98|
(CONST 0) = $PSDRAW_POINTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PSDRAW_POINTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PSDRAW_POINTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PSDRAW_POINTS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PSDRAW_POINTS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PSDRAW_POINTS
8     (SKIP&RET 1)


Disassembly of function $PSDRAW_POINTS
(CONST 0) = $LISTP
(CONST 1) = #(NIL)
(CONST 2) = :NAME
(CONST 3) = COMMON-LISP:CONTINUE
(CONST 4) = :INVOKE-FUNCTION
(CONST 5) = #<COMPILED-CLOSURE $PSDRAW_POINTS-1>
(CONST 6) = :REPORT
(CONST 7) = SYSTEM::REPORT-NO-NEW-VALUE
(CONST 8) = :INTERACTIVE
(CONST 9) = SYSTEM::ASSERT-RESTART-NO-PROMPTS
(CONST 10) = SYSTEM::MAKE-RESTART
(CONST 11) = SYSTEM::*ACTIVE-RESTARTS*
(CONST 12) = SYSTEM::*CONDITION-RESTARTS*
(CONST 13) = (#(CONDITION 3) 1 . 1)
(CONST 14) = SYSTEM::ADD-CONDITION-RESTARTS
(CONST 15) = SIGNAL
(CONST 16) = "~A"
(CONST 17) = (AND ($LISTP LIS) ($LISTP (CADR LIS)))
(CONST 18) = SYSTEM::ASSERT-ERROR-STRING
(CONST 19) = W
(CONST 20) = 1
(CONST 21) = 2
(CONST 22) = "drawdot"
(CONST 23) = P
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (W SYSTEM::*CONDITION-RESTARTS* SYSTEM::*ACTIVE-RESTARTS*)
writes special variable : (W)
75 byte-code instructions:
0     (JMP L78)
3     L3
3     (HANDLER-BEGIN&PUSH)
4     (LOAD&PUSH 0)
5     (LOADI&PUSH 0 0 6)
9     (CALL2 14)                          ; SYSTEM::ADD-CONDITION-RESTARTS
11    (LOAD&PUSH 0)
12    (CALL1 15)                          ; SIGNAL
14    (SKIPSP 2 1)
17    (SKIP&RET 2)
19    L19
19    (NIL)
20    (MAKE-VECTOR1&PUSH 1)
22    (NIL)
23    (STOREC 0 0)
26    (TAGBODY-OPEN 1 L69)                ; #(NIL)
29    (CONST&PUSH 2)                      ; :NAME
30    (CONST&PUSH 3)                      ; COMMON-LISP:CONTINUE
31    (CONST&PUSH 4)                      ; :INVOKE-FUNCTION
32    (LOAD&PUSH 7)
33    (LOAD&PUSH 6)
34    (COPY-CLOSURE&PUSH 5 2)             ; #<COMPILED-CLOSURE $PSDRAW_POINTS-1>
37    (CONST&PUSH 6)                      ; :REPORT
38    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; SYSTEM::REPORT-NO-NEW-VALUE
40    (CONST&PUSH 8)                      ; :INTERACTIVE
41    (CONST&SYMBOL-FUNCTION&PUSH 9)      ; SYSTEM::ASSERT-RESTART-NO-PROMPTS
43    (CALL&PUSH 8 10)                    ; SYSTEM::MAKE-RESTART
46    (LIST&PUSH 1)
48    (LOAD&PUSH 0)
49    (GETVALUE&PUSH 11)                  ; SYSTEM::*ACTIVE-RESTARTS*
51    (CALLSR 2 34)                       ; APPEND
54    (BIND 11)                           ; SYSTEM::*ACTIVE-RESTARTS*
56    (GETVALUE 12)                       ; SYSTEM::*CONDITION-RESTARTS*
58    (BIND 12)                           ; SYSTEM::*CONDITION-RESTARTS*
60    (HANDLER-OPEN 13 L3)                ; (#(CONDITION 3) 1 . 1)
62    (CONST&PUSH 16)                     ; "~A"
63    (CONST&PUSH 17)                     ; (AND ($LISTP LIS) ($LISTP #))
64    (CALL1&PUSH 18)                     ; SYSTEM::ASSERT-ERROR-STRING
66    (CALLSR 1 29)                       ; ERROR
69    L69
69    (LOADC 4 0)
72    (UNLIST 0 0)
75    (TAGBODY-CLOSE)
76    (SKIP 1)
78    L78
78    (LOAD&PUSH 1)
79    (CALL1&JMPIFNOT 0 L19)              ; $LISTP
82    (LOAD 1)
83    (CDR)
84    (CAR&PUSH)
85    (CALL1&JMPIFNOT 0 L19)              ; $LISTP
89    (NIL&PUSH)
90    (LOAD&CDR&PUSH 2)
92    (LOAD 1)
93    (BIND 19)                           ; W
95    (LOAD&JMPIFNOT 3 L124)
98    L98
98    (LOAD&CAR&PUSH 3)
100   (LOAD 0)
101   (SETVALUE 19)                       ; W
103   (SKIP 1)
105   (CONST&PUSH 20)                     ; 1
106   (GETVALUE&PUSH 19)                  ; W
108   (CALLS1&PUSH 148)                   ; NTH
110   (CONST&PUSH 21)                     ; 2
111   (GETVALUE&PUSH 19)                  ; W
113   (CALLS1&PUSH 148)                   ; NTH
115   (CONST&PUSH 22)                     ; "drawdot"
116   (CALL 3 23)                         ; P
119   (LOAD&CDR&STORE 3)
121   (LOAD&JMPIF 3 L98)
124   L124
124   (NIL)
125   (UNBIND1)
126   (SKIP&RET 4)


Disassembly of function $PSDRAW_POINTS-1
(CONST 0) = NIL
(CONST 1) = NIL
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
3 byte-code instructions:
0     (LOAD 1)
1     (STOREV 0 1)
4     (GO 1 0)


Disassembly of function #:|(DEFUN $VIEW_ZIC NIL ...)-99|
(CONST 0) = $VIEW_ZIC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $VIEW_ZIC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $VIEW_ZIC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $VIEW_ZIC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $VIEW_ZIC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $VIEW_ZIC
8     (SKIP&RET 1)


Disassembly of function $VIEW_ZIC
(CONST 0) = "IZICDIR"
(CONST 1) = GETENV
(CONST 2) = "/tcl-files/maxima.tcl"
(CONST 3) = "could not find file ~a :  Set environment variable IZICDIR"
(CONST 4) = "izic -interface ${IZICDIR}/tcl-files/maxima.tcl  1> /dev/null &"
(CONST 5) = $SYSTEM
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
21 byte-code instructions:
0     (CONST&PUSH 0)                      ; "IZICDIR"
1     (CALL1&PUSH 1)                      ; GETENV
3     (PUSH-UNBOUND 2)
5     (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
7     (LOAD&PUSH 1)
8     (LOAD&PUSH 1)
9     (CALLS1 132)                        ; PRINC
11    (CONST&PUSH 2)                      ; "/tcl-files/maxima.tcl"
12    (LOAD&PUSH 1)
13    (PUSH-UNBOUND 2)
15    (CALLS1 137)                        ; WRITE-STRING
17    (LOAD&PUSH 0)
18    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
21    (CALLS1&JMPIFNOT 246 L29)           ; PROBE-FILE
24    (CONST&PUSH 4)                      ; "izic -interface ${IZICDIR}/tcl-files/maxima.tcl  1> /dev/null &"
25    (CALL1 5)                           ; $SYSTEM
27    (SKIP&RET 2)
29    L29
29    (CONST&PUSH 3)                      ; "could not find file ~a :  Set environment variable IZICDIR"
30    (LOAD&PUSH 1)
31    (CALLSR 1 29)                       ; ERROR


Disassembly of function #:|(DEFUN $ISEND (X) ...)-100|
(CONST 0) = $ISEND
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ISEND>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ISEND
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ISEND
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ISEND>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ISEND
8     (SKIP&RET 1)


Disassembly of function $ISEND
(CONST 0) = X
(CONST 1) = (#\&)
(CONST 2) = STRING-TRIM
(CONST 3) = " izic -app izic -cmd '{"
(CONST 4) = "}'"
(CONST 5) = $SYSTEM
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (PUSH-UNBOUND 2)
5     (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
7     (CONST&PUSH 1)                      ; (#\&)
8     (GETVALUE&PUSH 0)                   ; X
10    (CALLS1&PUSH 75)                    ; STRING
12    (CALL2&PUSH 2)                      ; STRING-TRIM
14    (CONST&PUSH 3)                      ; " izic -app izic -cmd '{"
15    (LOAD&PUSH 2)
16    (PUSH-UNBOUND 2)
18    (CALLS1 137)                        ; WRITE-STRING
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 2)
22    (CALLS1 132)                        ; PRINC
24    (CONST&PUSH 4)                      ; "}'"
25    (LOAD&PUSH 2)
26    (PUSH-UNBOUND 2)
28    (CALLS1 137)                        ; WRITE-STRING
30    (SKIP 1)
32    (LOAD&PUSH 0)
33    (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
36    (CALL1 5)                           ; $SYSTEM
38    (UNBIND1)
39    (SKIP&RET 2)


Disassembly of function #:|(DEFVAR *SOME-COLOURS* '(135 206 250 ...))-101|
(CONST 0) = (SPECIAL *SOME-COLOURS*)
(CONST 1) = *SOME-COLOURS*
(CONST 2) = 
(135 206 250 LIGHTSKYBLUE 70 130 180 STEELBLUE 205 92 92 INDIANRED 178 34 34
 FIREBRICK 176 48 96 MAROON 221 160 221 PLUM 238 130 238 VIOLET)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL *SOME-COLOURS*)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; *SOME-COLOURS*
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; *SOME-COLOURS*
8     (CONST&PUSH 2)                      ; (135 206 250 LIGHTSKYBLUE 70 ...)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; *SOME-COLOURS*
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN PLOT-ZIC-COLORS (&AUX #) ...)-102|
(CONST 0) = PLOT-ZIC-COLORS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PLOT-ZIC-COLORS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PLOT-ZIC-COLORS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PLOT-ZIC-COLORS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PLOT-ZIC-COLORS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PLOT-ZIC-COLORS
8     (SKIP&RET 1)


Disassembly of function PLOT-ZIC-COLORS
(CONST 0) = 1/4
(CONST 1) = *SOME-COLOURS*
(CONST 2) = $PSTREAM
(CONST 3) = #<COMPILED-CLOSURE PLOT-ZIC-COLORS-1>
(CONST 4) = FORMAT
(CONST 5) = V
(CONST 6) = -1
(CONST 7) = IND
(CONST 8) = #<COMPILED-CLOSURE PLOT-ZIC-COLORS-2>
(CONST 9) = 0.00390625
(CONST 10) = PRINT-PT1
(CONST 11) = #<COMPILED-CLOSURE PLOT-ZIC-COLORS-3>
(CONST 12) = #<COMPILED-CLOSURE PLOT-ZIC-COLORS-4>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (V IND $PSTREAM *SOME-COLOURS*)
writes special variables : (IND V)
56 byte-code instructions:
0     (CONST&PUSH 0)                      ; 1/4
1     (GETVALUE&PUSH 1)                   ; *SOME-COLOURS*
3     (CALLS2&PUSH 71)                    ; LENGTH
5     (CALLSR&PUSH 2 55)                  ; *
8     (GETVALUE&PUSH 2)                   ; $PSTREAM
10    (CONST&PUSH 3)                      ; #<COMPILED-CLOSURE PLOT-ZIC-COLORS-1>
11    (LOAD&PUSH 2)
12    (CALL 3 4)                          ; FORMAT
15    (NIL)
16    (BIND 5)                            ; V
18    (GETVALUE&PUSH 1)                   ; *SOME-COLOURS*
20    (T&PUSH)
21    (CONST 6)                           ; -1
22    (BIND 7)                            ; IND
24    (LOAD&JMPIFNOT 4 L72)
27    L27
27    (LOAD&CAR&PUSH 4)
29    (LOAD 0)
30    (SETVALUE 5)                        ; V
32    (SKIP 1)
34    (LOAD&JMPIFNOT 3 L52)
37    (GETVALUE&PUSH 2)                   ; $PSTREAM
39    (CONST&PUSH 8)                      ; #<COMPILED-CLOSURE PLOT-ZIC-COLORS-2>
40    (GETVALUE&PUSH 7)                   ; IND
42    (CALLS2 150)                        ; 1+
44    (SETVALUE 7)                        ; IND
46    (PUSH)
47    (CALL 3 4)                          ; FORMAT
50    (NIL&STORE 3)
52    L52
52    (GETVALUE&PUSH 5)                   ; V
54    (CALLS2&JMPIF 8 L85)                ; NUMBERP
57    (T&STORE 3)
59    (GETVALUE&PUSH 2)                   ; $PSTREAM
61    (CONST&PUSH 11)                     ; #<COMPILED-CLOSURE PLOT-ZIC-COLORS-3>
62    (GETVALUE&PUSH 5)                   ; V
64    (CALL 3 4)                          ; FORMAT
67    L67
67    (LOAD&CDR&STORE 4)
69    (LOAD&JMPIF 4 L27)
72    L72
72    (UNBIND1)
73    (SKIP 2)
75    (UNBIND1)
76    (GETVALUE&PUSH 2)                   ; $PSTREAM
78    (CONST&PUSH 12)                     ; #<COMPILED-CLOSURE PLOT-ZIC-COLORS-4>
79    (LOAD&PUSH 2)
80    (CALL 3 4)                          ; FORMAT
83    (SKIP&RET 2)
85    L85
85    (CONST&PUSH 9)                      ; 0.00390625
86    (GETVALUE&PUSH 5)                   ; V
88    (CALLSR&PUSH 2 55)                  ; *
91    (GETVALUE&PUSH 2)                   ; $PSTREAM
93    (CALL2 10)                          ; PRINT-PT1
95    (JMP L67)


Disassembly of function PLOT-ZIC-COLORS-1
(CONST 0) = 
"couleurs 
 "
(CONST 1) = 
" 
 "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; "couleurs 
 "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " 
 "
11    (LOAD&PUSH 4)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD 1)
17    (SKIP&RET 4)


Disassembly of function PLOT-ZIC-COLORS-2
(CONST 0) = #\Space
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
8 byte-code instructions:
0     (LOAD&PUSH 2)
1     (LOAD&PUSH 4)
2     (CALLS1 132)                        ; PRINC
4     (CONST&PUSH 0)                      ; #\Space
5     (LOAD&PUSH 4)
6     (CALLS1 136)                        ; WRITE-CHAR
8     (LOAD 1)
9     (SKIP&RET 4)


Disassembly of function PLOT-ZIC-COLORS-3
(CONST 0) = 
"
# "
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
23 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
# "
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (PUSH-UNBOUND 1)
8     (LOAD&PUSH 4)
9     (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
11    (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
13    (LOAD&PUSH 3)
14    (LOAD&PUSH 1)
15    (CALLS1 132)                        ; PRINC
17    (LOAD&PUSH 0)
18    (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
20    (PUSH-UNBOUND 2)
22    (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
24    (LOAD&PUSH 5)
25    (PUSH-UNBOUND 2)
27    (CALLS1 137)                        ; WRITE-STRING
29    (SKIP 1)
31    (LOAD&PUSH 3)
32    (CALLS1 139)                        ; TERPRI
34    (LOAD 1)
35    (SKIP&RET 4)


Disassembly of function PLOT-ZIC-COLORS-4
(CONST 0) = 
" 1
0
"
(CONST 1) = 
" 0.801 0.359 0.359 
128 .8 1 0
"
2 required arguments
0 optional arguments
Rest parameter
No keyword parameters
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; " 1
0
"
1     (LOAD&PUSH 4)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 2)
7     (LOAD&PUSH 4)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; " 0.801 0.359 0.359 
128 .8 1 0
"
11    (LOAD&PUSH 4)
12    (PUSH-UNBOUND 2)
14    (CALLS1 137)                        ; WRITE-STRING
16    (LOAD 1)
17    (SKIP&RET 4)


Disassembly of function #:|(DEFUN CHECK-RANGE (RANGE &AUX # ...) ...)-103|
(CONST 0) = CHECK-RANGE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CHECK-RANGE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CHECK-RANGE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CHECK-RANGE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CHECK-RANGE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CHECK-RANGE
8     (SKIP&RET 1)


Disassembly of function CHECK-RANGE
(CONST 0) = $NUMER
(CONST 1) = A
(CONST 2) = B
(CONST 3) = $LISTP
(CONST 4) = MEVAL*
(CONST 5) = "Bad Range ~%~M must be of the form [variable,min,max]"
(CONST 6) = MERROR
(CONST 7) = (MLIST)
(CONST 8) = 1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (B A)
writes special variables : (B A)
51 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $NUMER
3     (NIL&PUSH)
4     (NIL)
5     (BIND 1)                            ; A
7     (NIL)
8     (BIND 2)                            ; B
10    (LOAD&PUSH 11)
11    (CALL1&JMPIFNOT 3 L54)              ; $LISTP
14    (LOAD 11)
15    (CDR)
16    (STORE 6)
17    (JMPIFNOT L54)
19    (CAR&PUSH)
20    (CALLS2&JMPIFNOT 6 L54)             ; SYMBOLP
23    (LOAD 6)
24    (CDR)
25    (CAR&PUSH)
26    (CALL1 4)                           ; MEVAL*
28    (SETVALUE 1)                        ; A
30    (PUSH)
31    (CALLS2&JMPIFNOT 8 L54)             ; NUMBERP
34    (LOAD 6)
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (CALL1 4)                           ; MEVAL*
40    (SETVALUE 2)                        ; B
42    (PUSH)
43    (CALLS2&JMPIFNOT 8 L54)             ; NUMBERP
46    (GETVALUE&PUSH 1)                   ; A
48    (GETVALUE&PUSH 2)                   ; B
50    (CALLSR&JMPIF 1 47 L58)             ; <
54    L54
54    (CONST&PUSH 5)                      ; "Bad Range ~%~M must be of the form [variable,min,max]"
55    (LOAD&PUSH 12)
56    (CALL2 6)                           ; MERROR
58    L58
58    (CONST&PUSH 7)                      ; (MLIST)
59    (LOAD&CAR&PUSH 7)
61    (GETVALUE&PUSH 1)                   ; A
63    (CONST&PUSH 8)                      ; 1.0
64    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
66    (GETVALUE&PUSH 2)                   ; B
68    (CONST&PUSH 8)                      ; 1.0
69    (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
71    (LIST 4)
73    (UNBIND 2)
75    (SKIP 1)
77    (UNBIND1)
78    (SKIP&RET 2)


Disassembly of function #:|(DEFUN $ZERO_FUN (X Y) ...)-104|
(CONST 0) = $ZERO_FUN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $ZERO_FUN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $ZERO_FUN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $ZERO_FUN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $ZERO_FUN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $ZERO_FUN
8     (SKIP&RET 1)


Disassembly of function $ZERO_FUN
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 0.0
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (CONST 2)                           ; 0.0
7     (UNBIND 2)
9     (SKIP&RET 3)


Disassembly of function #:|(DEFUN OUTPUT-POINTS (PL &OPTIONAL M) ...)-105|
(CONST 0) = OUTPUT-POINTS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = FUNCTION
(CONST 3) = "If m is supplied print blank line every m lines"
(CONST 4) = SYSTEM::%SET-DOCUMENTATION
(CONST 5) = #<COMPILED-CLOSURE OUTPUT-POINTS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
11 byte-code instructions:
0     (CONST&PUSH 0)                      ; OUTPUT-POINTS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; OUTPUT-POINTS
4     (CONST&PUSH 2)                      ; FUNCTION
5     (CONST&PUSH 3)                      ; "If m is supplied print blank line every m lines"
6     (CALL 3 4)                          ; SYSTEM::%SET-DOCUMENTATION
9     (CONST&PUSH 0)                      ; OUTPUT-POINTS
10    (CONST&PUSH 5)                      ; #<COMPILED-CLOSURE OUTPUT-POINTS>
11    (CALLS2 130)                        ; SYSTEM::%PUTD
13    (CONST 0)                           ; OUTPUT-POINTS
14    (SKIP&RET 1)


Disassembly of function OUTPUT-POINTS
(CONST 0) = M
(CONST 1) = -1
(CONST 2) = J
(CONST 3) = 0
(CONST 4) = 1
(CONST 5) = SLOOP::SLOOP-TYPE-ERROR
(CONST 6) = $PSTREAM
(CONST 7) = PRINT-PT1
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (J M $PSTREAM)
writes special variable : (J)
61 byte-code instructions:
0     (JMPIFBOUNDP 1 L4)
3     (NIL)
4     L4
4     (BIND 0)                            ; M
6     (CONST 1)                           ; -1
7     (BIND 2)                            ; J
9     (CONST&PUSH 3)                      ; 0
10    (CONST&PUSH 4)                      ; 1
11    (LOAD&PUSH 10)
12    (CALLS1&PUSH 148)                   ; NTH
14    (CALLS2&PUSH 71)                    ; LENGTH
16    (LOAD&PUSH 0)
17    (CALLS2&JMPIF 13 L22)               ; SYSTEM::FIXNUMP
20    (CALL0 5)                           ; SLOOP::SLOOP-TYPE-ERROR
22    L22
22    (CONST&PUSH 4)                      ; 1
23    (LOAD&PUSH 11)
24    (CALLS1&PUSH 148)                   ; NTH
26    (JMP L88)
28    L28
28    (LOAD&PUSH 0)
29    (LOAD&PUSH 3)
30    (CALLSR&PUSH 1 1)                   ; AREF
33    (GETVALUE&PUSH 6)                   ; $PSTREAM
35    (CALL2 7)                           ; PRINT-PT1
37    (LOAD&INC&STORE 2)
39    (LOAD&PUSH 0)
40    (LOAD&PUSH 3)
41    (CALLSR&PUSH 1 1)                   ; AREF
44    (GETVALUE&PUSH 6)                   ; $PSTREAM
46    (CALL2 7)                           ; PRINT-PT1
48    (LOAD&INC&STORE 2)
50    (LOAD&PUSH 0)
51    (LOAD&PUSH 3)
52    (CALLSR&PUSH 1 1)                   ; AREF
55    (GETVALUE&PUSH 6)                   ; $PSTREAM
57    (CALL2 7)                           ; PRINT-PT1
59    (GETVALUE&PUSH 6)                   ; $PSTREAM
61    (CALLS1 139)                        ; TERPRI
63    (GETVALUE 0)                        ; M
65    (JMPIFNOT L86)
67    (GETVALUE&PUSH 2)                   ; J
69    (CALLS2 150)                        ; 1+
71    (SETVALUE 2)                        ; J
73    (PUSH)
74    (GETVALUE&PUSH 0)                   ; M
76    (CALLS2&JMPIFNOT 1 L86)             ; EQL
79    (GETVALUE&PUSH 6)                   ; $PSTREAM
81    (CALLS1 139)                        ; TERPRI
83    (CONST 1)                           ; -1
84    (SETVALUE 2)                        ; J
86    L86
86    (LOAD&INC&STORE 2)
88    L88
88    (LOAD&PUSH 2)
89    (LOAD&PUSH 2)
90    (CALLSR&JMPIFNOT 1 50 L28)          ; >=
95    (NIL)
96    (SKIP 3)
98    (UNBIND 2)
100   (SKIP&RET 3)


Disassembly of function #:|(DEFVAR $SHOW_OPENPLOT T)-106|
(CONST 0) = (SPECIAL $SHOW_OPENPLOT)
(CONST 1) = $SHOW_OPENPLOT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $SHOW_OPENPLOT)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $SHOW_OPENPLOT
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $SHOW_OPENPLOT
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $SHOW_OPENPLOT
12    (SKIP&RET 1)

WARNING in SHOW-OPEN-PLOT in lines 1330..1335 :
*MAXIMA-PLOTDIR* is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN SHOW-OPEN-PLOT (ANS) ...)-107|
(CONST 0) = SHOW-OPEN-PLOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SHOW-OPEN-PLOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SHOW-OPEN-PLOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SHOW-OPEN-PLOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SHOW-OPEN-PLOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SHOW-OPEN-PLOT
8     (SKIP&RET 1)


Disassembly of function SHOW-OPEN-PLOT
(CONST 0) = ANS
(CONST 1) = $SHOW_OPENPLOT
(CONST 2) = "maxout.openmath"
(CONST 3) = :OUTPUT
(CONST 4) = ST1
(CONST 5) = CLOSE
(CONST 6) = :ABORT
(CONST 7) = STRING
(CONST 8) = *MAXIMA-PLOTDIR*
(CONST 9) = "/"
(CONST 10) = $OPENMATH_PLOT_COMMAND
(CONST 11) = " maxout.openmath"
(CONST 12) = $SYSTEM
(CONST 13) = ""
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($OPENMATH_PLOT_COMMAND *MAXIMA-PLOTDIR* ST1 ANS $SHOW_OPENPLOT)
50 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ANS
3     (GETVALUE 1)                        ; $SHOW_OPENPLOT
5     (JMPIF L17)
7     (GETVALUE&PUSH 0)                   ; ANS
9     (PUSH-UNBOUND 1)
11    (CALLS1 132)                        ; PRINC
13    (CONST 13)                          ; ""
14    L14
14    (UNBIND1)
15    (SKIP&RET 2)
17    L17
17    (CONST&PUSH 2)                      ; "maxout.openmath"
18    (CONST&PUSH 3)                      ; :OUTPUT
19    (PUSH-UNBOUND 5)
21    (CALLS1 249)                        ; OPEN
23    (BIND 4)                            ; ST1
25    (UNWIND-PROTECT-OPEN L48)
27    (GETVALUE&PUSH 0)                   ; ANS
29    (GETVALUE&PUSH 4)                   ; ST1
31    (CALLS1 132)                        ; PRINC
33    (GETVALUE 4)                        ; ST1
35    (JMPIFNOT L40)
37    (PUSH)
38    (CALL1 5)                           ; CLOSE
40    L40
40    (VALUES0)
41    (UNWIND-PROTECT-NORMAL-EXIT)
42    (GETVALUE 4)                        ; ST1
44    (JMPIFNOT L58)
46    (JMP L52)
48    L48
48    (GETVALUE 4)                        ; ST1
50    (JMPIFNOT L58)
52    L52
52    (PUSH)
53    (CONST&PUSH 6)                      ; :ABORT
54    (T&PUSH)
55    (CALL 3 5)                          ; CLOSE
58    L58
58    (UNWIND-PROTECT-CLOSE)
59    (UNBIND1)
60    (CONST&PUSH 7)                      ; STRING
61    (GETVALUE&PUSH 8)                   ; *MAXIMA-PLOTDIR*
63    (CONST&PUSH 9)                      ; "/"
64    (GETVALUE&PUSH 10)                  ; $OPENMATH_PLOT_COMMAND
66    (CALLSR&PUSH 3 37)                  ; CONCATENATE
69    (CONST&PUSH 11)                     ; " maxout.openmath"
70    (CALL2 12)                          ; $SYSTEM
72    (JMP L14)

WARNING in $PLOT3D in lines 1337..1494 :
*MAXIMA-PLOTDIR* is neither declared nor bound,
it will be treated as if it were declared SPECIAL.
WARNING in $PLOT3D in lines 1337..1494 :
*MAXIMA-PLOTDIR* is neither declared nor bound,
it will be treated as if it were declared SPECIAL.

Disassembly of function #:|(DEFUN $PLOT3D (FUN &OPTIONAL # ...) ...)-108|
(CONST 0) = $PLOT3D
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PLOT3D>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PLOT3D
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PLOT3D
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PLOT3D>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PLOT3D
8     (SKIP&RET 1)


Disassembly of function $PLOT3D
(CONST 0) = FUN
(CONST 1) = $X
(CONST 2) = $GET_PLOT_OPTION
(CONST 3) = |$y|
(CONST 4) = OPTIONS
(CONST 5) = TRANS
(CONST 6) = *ORIGINAL-POINTS*
(CONST 7) = $PLOT_OPTIONS
(CONST 8) = $IN_NETMATH
(CONST 9) = V
(CONST 10) = $SET_PLOT_OPTION
(CONST 11) = $PLOT_FORMAT
(CONST 12) = 2
(CONST 13) = $OPENMATH
(CONST 14) = CHECK-RANGE
(CONST 15) = $LISTOFVARS
(CONST 16) = $SORT
(CONST 17) = VARS
(CONST 18) = $LENGTH
(CONST 19) = "Please supply the range for variables eg [x,-3,3],[y,-3,4]"
(CONST 20) = MERROR
(CONST 21) = 1
(CONST 22) = $REST
(CONST 23) = $CONS
(CONST 24) = $GRID
(CONST 25) = $COLOUR_Z
(CONST 26) = (MLIST)
(CONST 27) = $LISTP
(CONST 28) = 3
(CONST 29) = "List ~M is not of length 3"
(CONST 30) = ((MLIST) $Z)
(CONST 31) = $APPEND
(CONST 32) = $MAKE_TRANSFORM
(CONST 33) = $ZERO_FUN
(CONST 34) = COERCE-FLOAT-FUN
(CONST 35) = DRAW3D
(CONST 36) = MFUNCALL
(CONST 37) = $TRANSFORM_XY
(CONST 38) = *STANDARD-OUTPUT*
(CONST 39) = STRIPDOLLAR
(CONST 40) = "maxout."
(CONST 41) = :OUTPUT
(CONST 42) = $PSTREAM
(CONST 43) = 
#S(HASH-TABLE EQ ($PS . 236) ($GEOMVIEW . 209) ($OPENMATH . 87) ($GNUPLOT . 79)
   ($ZIC . 2))
(CONST 44) = 0
(CONST 45) = $GET_RANGE
(CONST 46) = PLOT-ZIC-COLORS
(CONST 47) = #<COMPILED-CLOSURE $PLOT3D-1>
(CONST 48) = FORMAT
(CONST 49) = #<COMPILED-CLOSURE $PLOT3D-2>
(CONST 50) = OUTPUT-POINTS
(CONST 51) = #<COMPILED-CLOSURE $PLOT3D-3>
(CONST 52) = #<COMPILED-CLOSURE $PLOT3D-4>
(CONST 53) = #<COMPILED-CLOSURE $PLOT3D-5>
(CONST 54) = SLOOP::SLOOP-TYPE-ERROR
(CONST 55) = J
(CONST 56) = PRINT-PT1
(CONST 57) = #<COMPILED-CLOSURE $PLOT3D-6>
(CONST 58) = #<COMPILED-CLOSURE $PLOT3D-7>
(CONST 59) = #<COMPILED-CLOSURE $PLOT3D-8>
(CONST 60) = #<COMPILED-CLOSURE $PLOT3D-9>
(CONST 61) = $VIEW_DIRECTION
(CONST 62) = $GET_ROTATION
(CONST 63) = *Z-RANGE*
(CONST 64) = $ROTATE_PTS
(CONST 65) = SETUP-FOR-PS-RANGE
(CONST 66) = 4
(CONST 67) = SORT-NGONS
(CONST 68) = $PS_AXES
(CONST 69) = $DRAW_NGONS
(CONST 70) = "[.1] 0 setdash"
(CONST 71) = P
(CONST 72) = "[] 0 setdash"
(CONST 73) = " showpage "
(CONST 74) = ""
(CONST 75) = CLOSE
(CONST 76) = $RUN_VIEWER
(CONST 77) = 
#S(HASH-TABLE EQ ($GNUPLOT . 31) ($GEOMVIEW . 25) ($OPENMATH . 10) ($PS . 6)
   ($ZIC . 1))
(CONST 78) = $VIEW_ZIC
(CONST 79) = $VIEWPS
(CONST 80) = STRING
(CONST 81) = *MAXIMA-PLOTDIR*
(CONST 82) = "/"
(CONST 83) = $OPENMATH_PLOT_COMMAND
(CONST 84) = " maxout.openmath"
(CONST 85) = $SYSTEM
(CONST 86) = $GEOMVIEW_COMMAND
(CONST 87) = "/"
(CONST 88) = $GNUPLOT_COMMAND
(CONST 89) = " -parametric3d maxout.gnuplot"
1 required argument
2 optional arguments
Rest parameter
No keyword parameters
reads special variables: 
($GNUPLOT_COMMAND $GEOMVIEW_COMMAND $OPENMATH_PLOT_COMMAND *MAXIMA-PLOTDIR* J
 $PSTREAM TRANS VARS *STANDARD-OUTPUT* FUN OPTIONS $IN_NETMATH $PLOT_OPTIONS)
writes special variables : ($PSTREAM *Z-RANGE* *ORIGINAL-POINTS* J $IN_NETMATH V FUN TRANS)
485 byte-code instructions:
0     (LOAD 4)
1     (BIND 0)                            ; FUN
3     (JMPIFBOUNDP 6 L10)
6     (CONST&PUSH 1)                      ; $X
7     (CALL1 2)                           ; $GET_PLOT_OPTION
9     (STORE 6)
10    L10
10    (BOUNDP 5)
12    (PUSH)
13    (JMPIFBOUNDP 6 L20)
16    (CONST&PUSH 3)                      ; |$y|
17    (CALL1 2)                           ; $GET_PLOT_OPTION
19    (STORE 6)
20    L20
20    (LOAD 5)
21    (BIND 4)                            ; OPTIONS
23    (NIL&PUSH)
24    (NIL)
25    (BIND 5)                            ; TRANS
27    (NIL)
28    (BIND 6)                            ; *ORIGINAL-POINTS*
30    (GETVALUE 7)                        ; $PLOT_OPTIONS
32    (BIND 7)                            ; $PLOT_OPTIONS
34    (GETVALUE 8)                        ; $IN_NETMATH
36    (BIND 8)                            ; $IN_NETMATH
38    (PUSH-NIL 3)
40    (GETVALUE 4)                        ; OPTIONS
42    (JMPIFNOT L126)
45    (PUSH)
46    (NIL)
47    (BIND 9)                            ; V
49    (JMP L119)
52    L52
52    (GETVALUE&PUSH 0)                   ; FUN
54    (CALL1&PUSH 18)                     ; $LENGTH
56    (JMPIFEQTO 28 L64)                  ; 3
59    (CONST&PUSH 29)                     ; "List ~M is not of length 3"
60    (GETVALUE&PUSH 0)                   ; FUN
62    (CALL2 20)                          ; MERROR
64    L64
64    (LOAD&PUSH 15)
65    (CONST&PUSH 30)                     ; ((MLIST) $Z)
67    (CALL2&PUSH 31)                     ; $APPEND
69    (CONST&PUSH 21)                     ; 1
70    (GETVALUE&PUSH 0)                   ; FUN
72    (CALLS1&PUSH 148)                   ; NTH
74    (CONST&PUSH 12)                     ; 2
75    (GETVALUE&PUSH 0)                   ; FUN
77    (CALLS1&PUSH 148)                   ; NTH
79    (CONST&PUSH 28)                     ; 3
80    (GETVALUE&PUSH 0)                   ; FUN
82    (CALLS1&PUSH 148)                   ; NTH
84    (CALL 4 32)                         ; $MAKE_TRANSFORM
87    (SETVALUE 5)                        ; TRANS
89    (CONST 33)                          ; $ZERO_FUN
91    (SETVALUE 0)                        ; FUN
93    (JMP L237)
96    L96
96    (PUSH)
97    (LOAD&PUSH 2)
98    (CALL2 36)                          ; MFUNCALL
100   (GETVALUE 8)                        ; $IN_NETMATH
102   (JMPIFNOT L297)
105   L105
105   (GETVALUE 38)                       ; *STANDARD-OUTPUT*
107   (JMP L346)
110   L110
110   (LOAD 3)
111   (CAR)
112   (SETVALUE 9)                        ; V
114   (PUSH)
115   (CALL1 10)                          ; $SET_PLOT_OPTION
117   (LOAD&CDR&STORE 3)
119   L119
119   (LOAD&PUSH 3)
120   (CALLS1&JMPIFNOT 146 L110)          ; ENDP
123   (UNBIND1)
124   (SKIP 1)
126   L126
126   (CONST&PUSH 11)                     ; $PLOT_FORMAT
127   (CONST&PUSH 12)                     ; 2
128   (CALL2 2)                           ; $GET_PLOT_OPTION
130   (STORE 0)
131   (GETVALUE 8)                        ; $IN_NETMATH
133   (JMPIFNOT L140)
135   (LOAD&PUSH 0)
136   (CONST 13)                          ; $OPENMATH
137   (EQ)
138   (SETVALUE 8)                        ; $IN_NETMATH
140   L140
140   (LOAD&PUSH 26)
142   (CALL1 14)                          ; CHECK-RANGE
144   (STORE 26)
146   (LOAD&PUSH 25)
148   (CALL1 14)                          ; CHECK-RANGE
150   (STORE 25)
152   (LOAD&JMPIF 19 L200)
155   (GETVALUE&PUSH 0)                   ; FUN
157   (CALL1&PUSH 15)                     ; $LISTOFVARS
159   (CALL1 16)                          ; $SORT
161   (BIND 17)                           ; VARS
163   (GETVALUE&PUSH 17)                  ; VARS
165   (CALL1&PUSH 18)                     ; $LENGTH
167   (JMPIFEQTO 12 L173)                 ; 2
170   (CONST&PUSH 19)                     ; "Please supply the range for variables eg [x,-3,3],[y,-3,4]"
171   (CALL1 20)                          ; MERROR
173   L173
173   (CONST&PUSH 21)                     ; 1
174   (GETVALUE&PUSH 17)                  ; VARS
176   (CALLS1&PUSH 148)                   ; NTH
178   (LOAD&PUSH 30)
180   (CALL1&PUSH 22)                     ; $REST
182   (CALL2 23)                          ; $CONS
184   (STORE 29)
186   (CONST&PUSH 12)                     ; 2
187   (GETVALUE&PUSH 17)                  ; VARS
189   (CALLS1&PUSH 148)                   ; NTH
191   (LOAD&PUSH 29)
193   (CALL1&PUSH 22)                     ; $REST
195   (CALL2 23)                          ; $CONS
197   (STORE 28)
199   (UNBIND1)
200   L200
200   (CONST&PUSH 24)                     ; $GRID
201   (CALL1 2)                           ; $GET_PLOT_OPTION
203   (STORE 1)
204   (CONST&PUSH 25)                     ; $COLOUR_Z
205   (CONST&PUSH 12)                     ; 2
206   (CALL2 2)                           ; $GET_PLOT_OPTION
208   (STORE 2)
209   (CONST&PUSH 26)                     ; (MLIST)
210   (CONST&PUSH 21)                     ; 1
211   (LOAD&PUSH 28)
213   (CALLS1&PUSH 148)                   ; NTH
215   (CONST&PUSH 21)                     ; 1
216   (LOAD&PUSH 28)
218   (CALLS1&PUSH 148)                   ; NTH
220   (LIST 3)
222   (STORE 15)
224   (GETVALUE&PUSH 0)                   ; FUN
226   (CALL1&JMPIF 27 L52)                ; $LISTP
230   (GETVALUE&PUSH 0)                   ; FUN
232   (LOAD&PUSH 16)
233   (CALL2 34)                          ; COERCE-FLOAT-FUN
235   (SETVALUE 0)                        ; FUN
237   L237
237   (GETVALUE&PUSH 0)                   ; FUN
239   (CONST&PUSH 12)                     ; 2
240   (LOAD&PUSH 28)
242   (CALLS1&PUSH 148)                   ; NTH
244   (CONST&PUSH 28)                     ; 3
245   (LOAD&PUSH 29)
247   (CALLS1&PUSH 148)                   ; NTH
249   (CONST&PUSH 12)                     ; 2
250   (LOAD&PUSH 29)
252   (CALLS1&PUSH 148)                   ; NTH
254   (CONST&PUSH 28)                     ; 3
255   (LOAD&PUSH 30)
257   (CALLS1&PUSH 148)                   ; NTH
259   (CONST&PUSH 12)                     ; 2
260   (LOAD&PUSH 7)
261   (CALLS1&PUSH 148)                   ; NTH
263   (CONST&PUSH 28)                     ; 3
264   (LOAD&PUSH 8)
265   (CALLS1&PUSH 148)                   ; NTH
267   (CALL&PUSH 7 35)                    ; DRAW3D
270   (CONST&PUSH 21)                     ; 1
271   (LOAD&PUSH 1)
272   (CALLS1&PUSH 148)                   ; NTH
274   (NIL&PUSH)
275   (GETVALUE 5)                        ; TRANS
277   (JMPIFNOT L283)
279   (PUSH)
280   (LOAD&PUSH 2)
281   (CALL2 36)                          ; MFUNCALL
283   L283
283   (CONST&PUSH 37)                     ; $TRANSFORM_XY
285   (CONST&PUSH 12)                     ; 2
286   (CALL2 2)                           ; $GET_PLOT_OPTION
288   (STORE 0)
289   (JMPIF L96)
292   (GETVALUE 8)                        ; $IN_NETMATH
294   (JMPIF L105)
297   L297
297   (PUSH-UNBOUND 2)
299   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
301   (LOAD&PUSH 4)
302   (CALL1&PUSH 39)                     ; STRIPDOLLAR
304   (CONST&PUSH 40)                     ; "maxout."
306   (LOAD&PUSH 2)
307   (PUSH-UNBOUND 2)
309   (CALLS1 137)                        ; WRITE-STRING
311   (PUSH-UNBOUND 1)
313   (LOAD&PUSH 2)
314   (CALLS1&PUSH 144)                   ; SYSTEM::LINE-POSITION
316   (CALLS2&PUSH 117)                   ; MAKE-STRING-OUTPUT-STREAM
318   (LOAD&PUSH 1)
319   (LOAD&PUSH 1)
320   (CALLS1 132)                        ; PRINC
322   (LOAD&PUSH 0)
323   (CALLS2&PUSH 118)                   ; GET-OUTPUT-STREAM-STRING
325   (PUSH-UNBOUND 2)
327   (CALLS1&PUSH 71)                    ; NSTRING-DOWNCASE
329   (LOAD&PUSH 3)
330   (PUSH-UNBOUND 2)
332   (CALLS1 137)                        ; WRITE-STRING
334   (SKIP 2)
336   (LOAD&PUSH 0)
337   (CALLS2&STORE 118 0)                ; GET-OUTPUT-STREAM-STRING
340   (CONST&PUSH 41)                     ; :OUTPUT
342   (PUSH-UNBOUND 5)
344   (CALLS1 249)                        ; OPEN
346   L346
346   (BIND 42)                           ; $PSTREAM
348   (UNWIND-PROTECT-OPEN L755)
351   (LOAD 8)
352   (JMPHASH 43 L678 L356 L433 L441 L563 L590)
356   L356
356   (LOAD&PUSH 6)
357   (CONST&PUSH 44)                     ; 0
359   (CALL2&PUSH 45)                     ; $GET_RANGE
361   (LOAD&PUSH 7)
362   (CONST&PUSH 21)                     ; 1
363   (CALL2&PUSH 45)                     ; $GET_RANGE
365   (LOAD&PUSH 8)
366   (CONST&PUSH 12)                     ; 2
367   (CALL2&PUSH 45)                     ; $GET_RANGE
369   (CALL0 46)                          ; PLOT-ZIC-COLORS
371   (GETVALUE&PUSH 42)                  ; $PSTREAM
373   (CONST&PUSH 47)                     ; #<COMPILED-CLOSURE $PLOT3D-1>
375   (CONST&PUSH 44)                     ; 0
377   (LOAD&PUSH 5)
378   (CALLS1&PUSH 148)                   ; NTH
380   (CONST&PUSH 21)                     ; 1
381   (LOAD&PUSH 6)
382   (CALLS1&PUSH 148)                   ; NTH
384   (CONST&PUSH 44)                     ; 0
386   (LOAD&PUSH 6)
387   (CALLS1&PUSH 148)                   ; NTH
389   (CONST&PUSH 21)                     ; 1
390   (LOAD&PUSH 7)
391   (CALLS1&PUSH 148)                   ; NTH
393   (CONST&PUSH 44)                     ; 0
395   (LOAD&PUSH 7)
396   (CALLS1&PUSH 148)                   ; NTH
398   (CONST&PUSH 21)                     ; 1
399   (LOAD&PUSH 8)
400   (CALLS1&PUSH 148)                   ; NTH
402   (CALL 8 48)                         ; FORMAT
405   (GETVALUE&PUSH 42)                  ; $PSTREAM
407   (CONST&PUSH 49)                     ; #<COMPILED-CLOSURE $PLOT3D-2>
409   (CONST&PUSH 28)                     ; 3
410   (LOAD&PUSH 15)
411   (CALLS1&PUSH 148)                   ; NTH
413   (CALLS2&PUSH 150)                   ; 1+
415   (CONST&PUSH 12)                     ; 2
416   (LOAD&PUSH 16)
417   (CALLS1&PUSH 148)                   ; NTH
419   (CALLS2&PUSH 150)                   ; 1+
421   (CALL 4 48)                         ; FORMAT
424   (LOAD&PUSH 10)
425   (NIL&PUSH)
426   (CALL2 50)                          ; OUTPUT-POINTS
428   (SKIP 3)
430   (JMP L678)
433   L433
433   (LOAD&PUSH 7)
434   (CONST&PUSH 12)                     ; 2
435   (LOAD&PUSH 11)
436   (CALLS1 148)                        ; NTH
438   (JMP L584)
441   L441
441   (GETVALUE&PUSH 42)                  ; $PSTREAM
443   (CONST&PUSH 51)                     ; #<COMPILED-CLOSURE $PLOT3D-3>
445   (CALL2 48)                          ; FORMAT
447   (CONST&PUSH 44)                     ; 0
449   (CONST&PUSH 21)                     ; 1
450   (LOAD&PUSH 9)
451   (CALLS1&PUSH 148)                   ; NTH
453   (CONST&PUSH 44)                     ; 0
455   (JMP L545)
458   L458
458   (LOAD 2)
459   (STORE 0)
460   (GETVALUE&PUSH 42)                  ; $PSTREAM
462   (CONST 52)                          ; #<COMPILED-CLOSURE $PLOT3D-4>
464   (JMP L525)
466   L466
466   (GETVALUE&PUSH 42)                  ; $PSTREAM
468   (CONST&PUSH 53)                     ; #<COMPILED-CLOSURE $PLOT3D-5>
470   (CALL2 48)                          ; FORMAT
472   (CONST&PUSH 44)                     ; 0
474   (CONST&PUSH 12)                     ; 2
475   (LOAD&PUSH 14)
476   (CALLS1&PUSH 148)                   ; NTH
478   (LOAD&INC&PUSH 0)
480   (CALLS2&JMPIF 13 L485)              ; SYSTEM::FIXNUMP
483   (CALL0 54)                          ; SLOOP::SLOOP-TYPE-ERROR
485   L485
485   (LOAD 1)
486   (BIND 55)                           ; J
488   (JMP L511)
490   L490
490   (LOAD&PUSH 6)
491   (LOAD&PUSH 6)
492   (CALLSR&PUSH 1 1)                   ; AREF
495   (GETVALUE&PUSH 42)                  ; $PSTREAM
497   (CALL2 56)                          ; PRINT-PT1
499   (CONST&PUSH 28)                     ; 3
500   (LOAD&PUSH 6)
501   (CALLSR&STORE 2 53 5)               ; +
505   (GETVALUE&PUSH 55)                  ; J
507   (CALLS2 150)                        ; 1+
509   (SETVALUE 55)                       ; J
511   L511
511   (GETVALUE&PUSH 55)                  ; J
513   (LOAD&PUSH 4)
514   (CALLSR&JMPIFNOT 1 48 L490)         ; >
518   (UNBIND1)
519   (SKIP 2)
521   (GETVALUE&PUSH 42)                  ; $PSTREAM
523   (CONST 57)                          ; #<COMPILED-CLOSURE $PLOT3D-6>
525   L525
525   (PUSH)
526   (CALL2 48)                          ; FORMAT
528   (LOAD&PUSH 0)
529   (LOAD&PUSH 2)
530   (CALLS2&PUSH 71)                    ; LENGTH
532   (CALLSR&JMPIF 1 47 L466)            ; <
537   (GETVALUE&PUSH 42)                  ; $PSTREAM
539   (CONST&PUSH 58)                     ; #<COMPILED-CLOSURE $PLOT3D-7>
541   (CALL2 48)                          ; FORMAT
543   (LOAD&INC&STORE 2)
545   L545
545   (LOAD&PUSH 2)
546   (CONST&PUSH 12)                     ; 2
547   (CALLSR&JMPIFNOT 1 48 L458)         ; >
552   (SKIP 3)
554   (GETVALUE&PUSH 42)                  ; $PSTREAM
556   (CONST&PUSH 59)                     ; #<COMPILED-CLOSURE $PLOT3D-8>
558   (CALL2 48)                          ; FORMAT
560   (JMP L678)
563   L563
563   (GETVALUE&PUSH 42)                  ; $PSTREAM
565   (CONST&PUSH 60)                     ; #<COMPILED-CLOSURE $PLOT3D-9>
567   (CONST&PUSH 12)                     ; 2
568   (LOAD&PUSH 12)
569   (CALLS1&PUSH 148)                   ; NTH
571   (CALLS2&PUSH 150)                   ; 1+
573   (CONST&PUSH 28)                     ; 3
574   (LOAD&PUSH 13)
575   (CALLS1&PUSH 148)                   ; NTH
577   (CALLS2&PUSH 150)                   ; 1+
579   (CALL 4 48)                         ; FORMAT
582   (LOAD&PUSH 7)
583   (NIL)
584   L584
584   (PUSH)
585   (CALL2 50)                          ; OUTPUT-POINTS
587   (JMP L678)
590   L590
590   (CONST&PUSH 61)                     ; $VIEW_DIRECTION
592   (CALL1&PUSH 2)                      ; $GET_PLOT_OPTION
594   (CALL1&PUSH 22)                     ; $REST
596   (CALL1&PUSH 62)                     ; $GET_ROTATION
598   (LOAD&JMPIFNOT 11 L615)
601   (CONST&PUSH 21)                     ; 1
602   (LOAD&PUSH 9)
603   (CALLS1&PUSH 148)                   ; NTH
605   (CALLS2 70)                         ; COPY-SEQ
607   (SETVALUE 6)                        ; *ORIGINAL-POINTS*
609   (LOAD&PUSH 7)
610   (CONST&PUSH 12)                     ; 2
611   (CALL2 45)                          ; $GET_RANGE
613   (SETVALUE 63)                       ; *Z-RANGE*
615   L615
615   (LOAD&PUSH 7)
616   (LOAD&PUSH 1)
617   (CALL2 64)                          ; $ROTATE_PTS
619   (LOAD&PUSH 7)
620   (CONST&PUSH 44)                     ; 0
622   (CALL2&PUSH 45)                     ; $GET_RANGE
624   (LOAD&PUSH 8)
625   (CONST&PUSH 21)                     ; 1
626   (CALL2&PUSH 45)                     ; $GET_RANGE
628   (T&PUSH)
629   (CALL 3 65)                         ; SETUP-FOR-PS-RANGE
632   (CONST&PUSH 21)                     ; 1
633   (LOAD&PUSH 9)
634   (CALLS1&PUSH 148)                   ; NTH
636   (CONST&PUSH 12)                     ; 2
637   (LOAD&PUSH 10)
638   (CALLS1&PUSH 148)                   ; NTH
640   (CONST&PUSH 66)                     ; 4
642   (CALL 3 67)                         ; SORT-NGONS
645   (LOAD&PUSH 0)
646   (CALL1 68)                          ; $PS_AXES
648   (CONST&PUSH 21)                     ; 1
649   (LOAD&PUSH 9)
650   (CALLS1&PUSH 148)                   ; NTH
652   (CONST&PUSH 12)                     ; 2
653   (LOAD&PUSH 10)
654   (CALLS1&PUSH 148)                   ; NTH
656   (CONST&PUSH 66)                     ; 4
658   (CALL 3 69)                         ; $DRAW_NGONS
661   (CONST&PUSH 70)                     ; "[.1] 0 setdash"
663   (CALL1 71)                          ; P
665   (LOAD&PUSH 0)
666   (CALL1 68)                          ; $PS_AXES
668   (CONST&PUSH 72)                     ; "[] 0 setdash"
670   (CALL1 71)                          ; P
672   (CONST&PUSH 73)                     ; " showpage "
674   (CALL1 71)                          ; P
676   (SKIP 1)
678   L678
678   (VALUES0)
679   (UNWIND-PROTECT-NORMAL-EXIT)
680   (GETVALUE 8)                        ; $IN_NETMATH
682   (JMPIFNOT L760)
685   L685
685   (CONST 74)                          ; ""
687   (SKIPI 0 0 0)
691   (SKIPSP 2 0)
694   (UNBIND1)
695   (SKIP 3)
697   (JMP L779)
700   L700
700   (LOAD 6)
701   (JMPHASH 77 L752 L704 L709 L713 L728 L734)
704   L704
704   (CALL0 78)                          ; $VIEW_ZIC
706   (JMP L776)
709   L709
709   (CALL0 79)                          ; $VIEWPS
711   (JMP L776)
713   L713
713   (CONST&PUSH 80)                     ; STRING
715   (GETVALUE&PUSH 81)                  ; *MAXIMA-PLOTDIR*
717   (CONST&PUSH 82)                     ; "/"
719   (GETVALUE&PUSH 83)                  ; $OPENMATH_PLOT_COMMAND
721   (CALLSR&PUSH 3 37)                  ; CONCATENATE
724   (CONST 84)                          ; " maxout.openmath"
726   (JMP L747)
728   L728
728   (GETVALUE&PUSH 86)                  ; $GEOMVIEW_COMMAND
730   (CALL1 85)                          ; $SYSTEM
732   (JMP L776)
734   L734
734   (CONST&PUSH 80)                     ; STRING
736   (GETVALUE&PUSH 81)                  ; *MAXIMA-PLOTDIR*
738   (CONST&PUSH 87)                     ; "/"
740   (GETVALUE&PUSH 88)                  ; $GNUPLOT_COMMAND
742   (CALLSR&PUSH 3 37)                  ; CONCATENATE
745   (CONST 89)                          ; " -parametric3d maxout.gnuplot"
747   L747
747   (PUSH)
748   (CALL2 85)                          ; $SYSTEM
750   (JMP L776)
752   L752
752   (NIL)
753   (JMP L776)
755   L755
755   (GETVALUE 8)                        ; $IN_NETMATH
757   (JMPIF L685)
760   L760
760   (GETVALUE&PUSH 42)                  ; $PSTREAM
762   (CALL1 75)                          ; CLOSE
764   (NIL)
765   (SETVALUE 42)                       ; $PSTREAM
767   (UNWIND-PROTECT-CLOSE)
768   (CONST&PUSH 76)                     ; $RUN_VIEWER
770   (CONST&PUSH 12)                     ; 2
771   (CALL2&JMPIF 2 L700)                ; $GET_PLOT_OPTION
775   (NIL)
776   L776
776   (UNBIND1)
777   (SKIP 3)
779   L779
779   (SKIP 3)
781   (UNBIND 4)
783   (SKIP 1)
785   (UNBIND1)
786   (SKIP 1)
788   (UNBIND1)
789   (SKIP&RET 5)


Disassembly of function $PLOT3D-1
(CONST 0) = "domaine "
(CONST 1) = #\Space
(CONST 2) = 
" 
"
7 required arguments
0 optional arguments
Rest parameter
No keyword parameters
43 byte-code instructions:
0     (CONST&PUSH 0)                      ; "domaine "
1     (LOAD&PUSH 9)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 7)
7     (LOAD&PUSH 9)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 9)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 6)
15    (LOAD&PUSH 9)
16    (CALLS1 132)                        ; PRINC
18    (CONST&PUSH 1)                      ; #\Space
19    (LOAD&PUSH 9)
20    (CALLS1 136)                        ; WRITE-CHAR
22    (LOAD&PUSH 5)
23    (LOAD&PUSH 9)
24    (CALLS1 132)                        ; PRINC
26    (CONST&PUSH 1)                      ; #\Space
27    (LOAD&PUSH 9)
28    (CALLS1 136)                        ; WRITE-CHAR
30    (LOAD&PUSH 4)
31    (LOAD&PUSH 9)
32    (CALLS1 132)                        ; PRINC
34    (CONST&PUSH 1)                      ; #\Space
35    (LOAD&PUSH 9)
36    (CALLS1 136)                        ; WRITE-CHAR
38    (LOAD&PUSH 3)
39    (LOAD&PUSH 9)
40    (CALLS1 132)                        ; PRINC
42    (CONST&PUSH 1)                      ; #\Space
43    (LOAD&PUSH 9)
44    (CALLS1 136)                        ; WRITE-CHAR
46    (LOAD&PUSH 2)
47    (LOAD&PUSH 9)
48    (CALLS1 132)                        ; PRINC
50    (CONST&PUSH 2)                      ; " 
"
51    (LOAD&PUSH 9)
52    (PUSH-UNBOUND 2)
54    (CALLS1 137)                        ; WRITE-STRING
56    (LOAD 1)
57    (SKIP&RET 9)


Disassembly of function $PLOT3D-2
(CONST 0) = "surface "
(CONST 1) = #\Space
(CONST 2) = 
" 
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; "surface "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 5)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 5)
16    (CALLS1 132)                        ; PRINC
18    (CONST&PUSH 2)                      ; " 
"
19    (LOAD&PUSH 5)
20    (PUSH-UNBOUND 2)
22    (CALLS1 137)                        ; WRITE-STRING
24    (LOAD 1)
25    (SKIP&RET 5)


Disassembly of function $PLOT3D-3
(CONST 0) = 
"{plot3d {matrix_mesh 
"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "{plot3d {matrix_mesh 
"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-4
(CONST 0) = 
"
{"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
{"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-5
(CONST 0) = 
"
 {"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "
 {"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-6
(CONST 0) = "} "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "} "
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-7
(CONST 0) = "} "
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "} "
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-8
(CONST 0) = "}}"
1 required argument
0 optional arguments
Rest parameter
No keyword parameters
6 byte-code instructions:
0     (CONST&PUSH 0)                      ; "}}"
1     (LOAD&PUSH 3)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD 1)
7     (SKIP&RET 3)


Disassembly of function $PLOT3D-9
(CONST 0) = " MESH "
(CONST 1) = #\Space
(CONST 2) = 
" 
"
3 required arguments
0 optional arguments
Rest parameter
No keyword parameters
19 byte-code instructions:
0     (CONST&PUSH 0)                      ; " MESH "
1     (LOAD&PUSH 5)
2     (PUSH-UNBOUND 2)
4     (CALLS1 137)                        ; WRITE-STRING
6     (LOAD&PUSH 3)
7     (LOAD&PUSH 5)
8     (CALLS1 132)                        ; PRINC
10    (CONST&PUSH 1)                      ; #\Space
11    (LOAD&PUSH 5)
12    (CALLS1 136)                        ; WRITE-CHAR
14    (LOAD&PUSH 2)
15    (LOAD&PUSH 5)
16    (CALLS1 132)                        ; PRINC
18    (CONST&PUSH 2)                      ; " 
"
19    (LOAD&PUSH 5)
20    (PUSH-UNBOUND 2)
22    (CALLS1 137)                        ; WRITE-STRING
24    (LOAD 1)
25    (SKIP&RET 5)


Disassembly of function #:|(SETF (SYMBOL-FUNCTION '*$) (SYMBOL-FUNCTION '*))-109|
(CONST 0) = *$
(CONST 1) = *
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; *$
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; *
3     (CALLS2 130)                        ; SYSTEM::%PUTD
5     (SKIP&RET 1)


Disassembly of function #:|(SETF (SYMBOL-FUNCTION '+$) (SYMBOL-FUNCTION '+))-110|
(CONST 0) = +$
(CONST 1) = +
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; +$
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; +
3     (CALLS2 130)                        ; SYSTEM::%PUTD
5     (SKIP&RET 1)


Disassembly of function #:|(SETF (SYMBOL-FUNCTION '-$) (SYMBOL-FUNCTION '-))-111|
(CONST 0) = -$
(CONST 1) = -
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; -$
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; -
3     (CALLS2 130)                        ; SYSTEM::%PUTD
5     (SKIP&RET 1)


Disassembly of function #:|(SETF (SYMBOL-FUNCTION '/$) (SYMBOL-FUNCTION '/))-112|
(CONST 0) = /$
(CONST 1) = /
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; /$
1     (CONST&SYMBOL-FUNCTION&PUSH 1)      ; /
3     (CALLS2 130)                        ; SYSTEM::%PUTD
5     (SKIP&RET 1)


Wrote file binary-clisp/plot.fas
Wrote file /cygdrive/e/temp/maxima/src/plot.lis