Listing of compilation of file /cygdrive/e/temp/maxima/src/newdet.lisp
on 2002-12-17 13:35:16 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/newdet.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE NEWDET)-2|
(CONST 0) = NEWDET
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWDET
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL VLIST VARLIST ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL *INPUT* *BINOM* ...))-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $NEWDET N ...)-5|
(CONST 0) = $NEWDET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NEWDET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NEWDET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NEWDET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NEWDET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NEWDET
8     (SKIP&RET 1)


Disassembly of function $NEWDET
(CONST 0) = N
(CONST 1) = A
(CONST 2) = 2
(CONST 3) = NARG1
(CONST 4) = "Wrong arg to NEWDET: ~M"
(CONST 5) = MERROR
(CONST 6) = 1
(CONST 7) = $MATRIXP
(CONST 8) = "Wrong number of args to NEWDET"
(CONST 9) = NEWDET
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (A N)
writes special variables : (N A)
55 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (NIL)
6     (BIND 1)                            ; A
8     (GETVALUE&PUSH 0)                   ; N
10    (CONST&PUSH 2)                      ; 2
11    (CALLSR&JMPIF 1 45 L47)             ; =
15    (GETVALUE&PUSH 0)                   ; N
17    (CONST&PUSH 6)                      ; 1
18    (CALLSR&JMPIFNOT 1 45 L32)          ; =
22    (CONST&PUSH 6)                      ; 1
23    (LOAD&PUSH 8)
24    (CALL2 3)                           ; NARG1
26    (SETVALUE 1)                        ; A
28    (PUSH)
29    (CALL1&JMPIF 7 L75)                 ; $MATRIXP
32    L32
32    (CONST&PUSH 8)                      ; "Wrong number of args to NEWDET"
33    (CALL1 5)                           ; MERROR
35    L35
35    (GETVALUE&PUSH 1)                   ; A
37    (GETVALUE&PUSH 0)                   ; N
39    (NIL&PUSH)
40    (CALL 3 9)                          ; NEWDET
43    (UNBIND 2)
45    (SKIP&RET 2)
47    L47
47    (CONST&PUSH 2)                      ; 2
48    (LOAD&PUSH 8)
49    (CALL2&PUSH 3)                      ; NARG1
51    (CALLS2&JMPIF 12 L61)               ; INTEGERP
54    (CONST&PUSH 4)                      ; "Wrong arg to NEWDET: ~M"
55    (CONST&PUSH 2)                      ; 2
56    (LOAD&PUSH 9)
57    (CALL2&PUSH 3)                      ; NARG1
59    (CALL2 5)                           ; MERROR
61    L61
61    (CONST&PUSH 6)                      ; 1
62    (LOAD&PUSH 8)
63    (CALL2 3)                           ; NARG1
65    (SETVALUE 1)                        ; A
67    (CONST&PUSH 2)                      ; 2
68    (LOAD&PUSH 8)
69    (CALL2 3)                           ; NARG1
71    (SETVALUE 0)                        ; N
73    (JMP L35)
75    L75
75    (CONST&PUSH 6)                      ; 1
76    (LOAD&PUSH 8)
77    (CALL2 3)                           ; NARG1
79    (CDR&PUSH)
80    (CALLS2 71)                         ; LENGTH
82    (SETVALUE 0)                        ; N
84    (JMP L35)


Disassembly of function #:|(DEFMFUN $PERMANENT N ...)-6|
(CONST 0) = $PERMANENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $PERMANENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $PERMANENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $PERMANENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $PERMANENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $PERMANENT
8     (SKIP&RET 1)


Disassembly of function $PERMANENT
(CONST 0) = N
(CONST 1) = A
(CONST 2) = 2
(CONST 3) = NARG1
(CONST 4) = "Wrong arg to PERM: ~M"
(CONST 5) = MERROR
(CONST 6) = 1
(CONST 7) = $MATRIXP
(CONST 8) = "Wrong number of args to PERM"
(CONST 9) = NEWDET
0 required arguments
0 optional arguments
Rest parameter
No keyword parameters
reads special variables: (A N)
writes special variables : (N A)
55 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CALLS2 71)                         ; LENGTH
3     (BIND 0)                            ; N
5     (NIL)
6     (BIND 1)                            ; A
8     (GETVALUE&PUSH 0)                   ; N
10    (CONST&PUSH 2)                      ; 2
11    (CALLSR&JMPIF 1 45 L47)             ; =
15    (GETVALUE&PUSH 0)                   ; N
17    (CONST&PUSH 6)                      ; 1
18    (CALLSR&JMPIFNOT 1 45 L32)          ; =
22    (CONST&PUSH 6)                      ; 1
23    (LOAD&PUSH 8)
24    (CALL2 3)                           ; NARG1
26    (SETVALUE 1)                        ; A
28    (PUSH)
29    (CALL1&JMPIF 7 L75)                 ; $MATRIXP
32    L32
32    (CONST&PUSH 8)                      ; "Wrong number of args to PERM"
33    (CALL1 5)                           ; MERROR
35    L35
35    (GETVALUE&PUSH 1)                   ; A
37    (GETVALUE&PUSH 0)                   ; N
39    (T&PUSH)
40    (CALL 3 9)                          ; NEWDET
43    (UNBIND 2)
45    (SKIP&RET 2)
47    L47
47    (CONST&PUSH 2)                      ; 2
48    (LOAD&PUSH 8)
49    (CALL2&PUSH 3)                      ; NARG1
51    (CALLS2&JMPIF 12 L61)               ; INTEGERP
54    (CONST&PUSH 4)                      ; "Wrong arg to PERM: ~M"
55    (CONST&PUSH 2)                      ; 2
56    (LOAD&PUSH 9)
57    (CALL2&PUSH 3)                      ; NARG1
59    (CALL2 5)                           ; MERROR
61    L61
61    (CONST&PUSH 6)                      ; 1
62    (LOAD&PUSH 8)
63    (CALL2 3)                           ; NARG1
65    (SETVALUE 1)                        ; A
67    (CONST&PUSH 2)                      ; 2
68    (LOAD&PUSH 8)
69    (CALL2 3)                           ; NARG1
71    (SETVALUE 0)                        ; N
73    (JMP L35)
75    L75
75    (CONST&PUSH 6)                      ; 1
76    (LOAD&PUSH 8)
77    (CALL2 3)                           ; NARG1
79    (CDR&PUSH)
80    (CALLS2 71)                         ; LENGTH
82    (SETVALUE 0)                        ; N
84    (JMP L35)


Disassembly of function #:|(DEFUN NEWDET (A N PERM) ...)-7|
(CONST 0) = NEWDET
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE NEWDET>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; NEWDET
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; NEWDET
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE NEWDET>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; NEWDET
8     (SKIP&RET 1)


Disassembly of function NEWDET
(CONST 0) = A
(CONST 1) = N
(CONST 2) = R
(CONST 3) = K
(CONST 4) = J
(CONST 5) = VLIST
(CONST 6) = M
(CONST 7) = SIGN
(CONST 8) = 50
(CONST 9) = "Array too big - NEWDET: ~M"
(CONST 10) = MERROR
(CONST 11) = *ARRAY
(CONST 12) = *BINOM*
(CONST 13) = 2
(CONST 14) = PASCAL
(CONST 15) = *MINOR1*
(CONST 16) = *I*
(CONST 17) = 0
(CONST 18) = 1
(CONST 19) = (0 . 1)
(CONST 20) = -1
(CONST 21) = *INPUT*
(CONST 22) = ARYP
(CONST 23) = MAREF1
(CONST 24) = NEWVAR1
(CONST 25) = (MTIMES)
(CONST 26) = NEWVAR
(CONST 27) = RATREP*
(CONST 28) = (0 . 1)
(CONST 29) = RATMINUS
(CONST 30) = RATTIMES
(CONST 31) = RATPLUS
(CONST 32) = (0 . 1)
(CONST 33) = *REARRAY
(CONST 34) = MRAT
(CONST 35) = SIMP
(CONST 36) = VARLIST
(CONST 37) = GENVAR
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (R GENVAR VARLIST SIGN *BINOM* M VLIST A *INPUT* *I* J K *MINOR1* N)
writes special variables : (R SIGN M *INPUT* K J *I* *MINOR1* *BINOM*)
438 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; A
3     (LOAD 5)
4     (BIND 1)                            ; N
6     (NIL&PUSH)
7     (NIL)
8     (BIND 2)                            ; R
10    (NIL)
11    (BIND 3)                            ; K
13    (NIL)
14    (BIND 4)                            ; J
16    (PUSH-NIL 2)
18    (NIL)
19    (BIND 5)                            ; VLIST
21    (NIL)
22    (BIND 6)                            ; M
24    (PUSH-NIL 2)
26    (NIL)
27    (BIND 7)                            ; SIGN
29    (GETVALUE&PUSH 1)                   ; N
31    (CONST&PUSH 8)                      ; 50
32    (CALLSR&JMPIFNOT 1 48 L41)          ; >
36    (CONST&PUSH 9)                      ; "Array too big - NEWDET: ~M"
37    (GETVALUE&PUSH 1)                   ; N
39    (CALL2 10)                          ; MERROR
41    L41
41    (NIL&PUSH)
42    (T&PUSH)
43    (GETVALUE&PUSH 1)                   ; N
45    (CALLS2&PUSH 150)                   ; 1+
47    (GETVALUE&PUSH 1)                   ; N
49    (CALLS2&PUSH 150)                   ; 1+
51    (CALL 4 11)                         ; *ARRAY
54    (SETVALUE 12)                       ; *BINOM*
56    (NIL&PUSH)
57    (T&PUSH)
58    (CONST&PUSH 13)                     ; 2
59    (GETVALUE&PUSH 1)                   ; N
61    (CALL1 14)                          ; PASCAL
63    (STORE 25)
65    (PUSH)
66    (CALLS2&PUSH 150)                   ; 1+
68    (CALL 4 11)                         ; *ARRAY
71    (SETVALUE 15)                       ; *MINOR1*
73    (NIL&PUSH)
74    (T&PUSH)
75    (CONST&PUSH 13)                     ; 2
76    (GETVALUE&PUSH 1)                   ; N
78    (CALLSR&PUSH 2 53)                  ; +
81    (CALL 3 11)                         ; *ARRAY
84    (SETVALUE 16)                       ; *I*
86    (CONST 17)                          ; 0
87    (BIND 3)                            ; K
89    (JMP L132)
91    L91
91    (CONST 17)                          ; 0
92    (BIND 4)                            ; J
94    (JMP L117)
96    L96
96    (GETVALUE&PUSH 15)                  ; *MINOR1*
98    (GETVALUE&PUSH 3)                   ; K
100   (GETVALUE&PUSH 4)                   ; J
102   (LOAD&PUSH 2)
103   (LOAD&PUSH 2)
104   (LOAD&PUSH 2)
105   (CONST&PUSH 19)                     ; (0 . 1)
106   (CALLSR 2 2)                        ; SYSTEM::STORE
109   (SKIP 3)
111   (GETVALUE&PUSH 4)                   ; J
113   (CALLS2 150)                        ; 1+
115   (SETVALUE 4)                        ; J
117   L117
117   (GETVALUE&PUSH 4)                   ; J
119   (LOAD&PUSH 29)
121   (CALLSR&JMPIFNOT 1 48 L96)          ; >
125   (UNBIND1)
126   (GETVALUE&PUSH 3)                   ; K
128   (CALLS2 150)                        ; 1+
130   (SETVALUE 3)                        ; K
132   L132
132   (GETVALUE&PUSH 3)                   ; K
134   (CONST&PUSH 18)                     ; 1
135   (CALLSR&JMPIFNOT 1 48 L91)          ; >
139   (UNBIND1)
140   (CONST 17)                          ; 0
141   (BIND 3)                            ; K
143   (JMP L163)
145   L145
145   (GETVALUE&PUSH 16)                  ; *I*
147   (GETVALUE&PUSH 3)                   ; K
149   (LOAD&PUSH 1)
150   (LOAD&PUSH 1)
151   (CONST&PUSH 20)                     ; -1
152   (CALLSR 1 2)                        ; SYSTEM::STORE
155   (SKIP 2)
157   (GETVALUE&PUSH 3)                   ; K
159   (CALLS2 150)                        ; 1+
161   (SETVALUE 3)                        ; K
163   L163
163   (GETVALUE&PUSH 3)                   ; K
165   (GETVALUE&PUSH 1)                   ; N
167   (CALLS2&PUSH 150)                   ; 1+
169   (CALLSR&JMPIFNOT 1 48 L145)         ; >
173   (UNBIND1)
174   (NIL&PUSH)
175   (T&PUSH)
176   (GETVALUE&PUSH 1)                   ; N
178   (CALLS2&PUSH 150)                   ; 1+
180   (GETVALUE&PUSH 1)                   ; N
182   (CALLS2&PUSH 150)                   ; 1+
184   (CALL 4 11)                         ; *ARRAY
187   (SETVALUE 21)                       ; *INPUT*
189   (CONST 18)                          ; 1
190   (BIND 3)                            ; K
192   (JMP L252)
194   L194
194   (CONST 18)                          ; 1
195   (BIND 4)                            ; J
197   (JMP L237)
199   L199
199   (GETVALUE&PUSH 21)                  ; *INPUT*
201   (GETVALUE&PUSH 3)                   ; K
203   (GETVALUE&PUSH 4)                   ; J
205   (T)
206   (BIND 22)                           ; ARYP
208   (GETVALUE&PUSH 0)                   ; A
210   (GETVALUE&PUSH 3)                   ; K
212   (GETVALUE&PUSH 4)                   ; J
214   (CALL 3 23)                         ; MAREF1
217   (UNBIND1)
218   (PUSH)
219   (LOAD&PUSH 3)
220   (LOAD&PUSH 3)
221   (LOAD&PUSH 3)
222   (LOAD&PUSH 3)
223   (CALLSR 2 2)                        ; SYSTEM::STORE
226   (SKIP 3)
228   (STORE 0)
229   (CALL1 24)                          ; NEWVAR1
231   (GETVALUE&PUSH 4)                   ; J
233   (CALLS2 150)                        ; 1+
235   (SETVALUE 4)                        ; J
237   L237
237   (GETVALUE&PUSH 4)                   ; J
239   (GETVALUE&PUSH 1)                   ; N
241   (CALLSR&JMPIFNOT 1 48 L199)         ; >
245   (UNBIND1)
246   (GETVALUE&PUSH 3)                   ; K
248   (CALLS2 150)                        ; 1+
250   (SETVALUE 3)                        ; K
252   L252
252   (GETVALUE&PUSH 3)                   ; K
254   (GETVALUE&PUSH 1)                   ; N
256   (CALLSR&JMPIFNOT 1 48 L194)         ; >
261   (UNBIND1)
262   (CONST&PUSH 25)                     ; (MTIMES)
263   (GETVALUE 5)                        ; VLIST
265   (CONS&PUSH)
266   (CALL1 26)                          ; NEWVAR
268   (CONST 18)                          ; 1
269   (BIND 3)                            ; K
271   (JMP L326)
273   L273
273   (CONST 18)                          ; 1
274   (BIND 4)                            ; J
276   (JMP L311)
278   L278
278   (GETVALUE&PUSH 21)                  ; *INPUT*
280   (GETVALUE&PUSH 3)                   ; K
282   (GETVALUE&PUSH 4)                   ; J
284   (GETVALUE&PUSH 21)                  ; *INPUT*
286   (GETVALUE&PUSH 3)                   ; K
288   (GETVALUE&PUSH 4)                   ; J
290   (CALLSR&PUSH 2 1)                   ; AREF
293   (CALL1 27)                          ; RATREP*
295   (CDR&PUSH)
296   (LOAD&PUSH 3)
297   (LOAD&PUSH 3)
298   (LOAD&PUSH 3)
299   (LOAD&PUSH 3)
300   (CALLSR 2 2)                        ; SYSTEM::STORE
303   (SKIP 4)
305   (GETVALUE&PUSH 4)                   ; J
307   (CALLS2 150)                        ; 1+
309   (SETVALUE 4)                        ; J
311   L311
311   (GETVALUE&PUSH 4)                   ; J
313   (GETVALUE&PUSH 1)                   ; N
315   (CALLSR&JMPIFNOT 1 48 L278)         ; >
319   (UNBIND1)
320   (GETVALUE&PUSH 3)                   ; K
322   (CALLS2 150)                        ; 1+
324   (SETVALUE 3)                        ; K
326   L326
326   (GETVALUE&PUSH 3)                   ; K
328   (GETVALUE&PUSH 1)                   ; N
330   (CALLSR&JMPIFNOT 1 48 L273)         ; >
334   (UNBIND1)
335   (CONST 18)                          ; 1
336   (STORE 11)
338   (CONST 17)                          ; 0
339   (STORE 12)
341   (GETVALUE&PUSH 16)                  ; *I*
343   (GETVALUE&PUSH 1)                   ; N
345   (LOAD&PUSH 1)
346   (CONST&PUSH 17)                     ; 0
347   (LOAD&PUSH 2)
348   (CALLSR 1 2)                        ; SYSTEM::STORE
351   (SKIP 2)
353   (CONST&PUSH 18)                     ; 1
354   (JMP L378)
356   L356
356   (GETVALUE&PUSH 15)                  ; *MINOR1*
358   (LOAD&DEC&PUSH 1)
360   (GETVALUE&PUSH 21)                  ; *INPUT*
362   (CONST&PUSH 18)                     ; 1
363   (LOAD&PUSH 4)
364   (CALLSR&PUSH 2 1)                   ; AREF
367   (LOAD&PUSH 2)
368   (LOAD&PUSH 17)
369   (LOAD&PUSH 3)
370   (LOAD&PUSH 3)
371   (CALLSR 2 2)                        ; SYSTEM::STORE
374   (SKIP 3)
376   (LOAD&INC&STORE 0)
378   L378
378   (LOAD&PUSH 0)
379   (GETVALUE&PUSH 1)                   ; N
381   (CALLSR&JMPIFNOT 1 48 L356)         ; >
385   (SKIP 1)
387   (CONST 18)                          ; 1
388   (SETVALUE 6)                        ; M
390   (JMP L728)
393   L393
393   (CONST 17)                          ; 0
394   (STORE 4)
395   (CONST 18)                          ; 1
396   (SETVALUE 4)                        ; J
398   (JMP L427)
400   L400
400   (GETVALUE&PUSH 16)                  ; *I*
402   (GETVALUE&PUSH 4)                   ; J
404   (GETVALUE&PUSH 6)                   ; M
406   (GETVALUE&PUSH 4)                   ; J
408   (CALLSR&PUSH 1 54)                  ; -
411   (LOAD&PUSH 2)
412   (LOAD&PUSH 2)
413   (LOAD&PUSH 2)
414   (CALLSR 1 2)                        ; SYSTEM::STORE
417   (SKIP 3)
419   (GETVALUE&PUSH 4)                   ; J
421   (CONST&PUSH 18)                     ; 1
422   (CALLSR 2 53)                       ; +
425   (SETVALUE 4)                        ; J
427   L427
427   (GETVALUE&PUSH 4)                   ; J
429   (GETVALUE&PUSH 6)                   ; M
431   (CALLSR&JMPIFNOT 1 48 L400)         ; >
435   L435
435   (GETVALUE&PUSH 15)                  ; *MINOR1*
437   (LOAD&PUSH 13)
438   (LOAD&PUSH 6)
439   (CALLSR&PUSH 2 1)                   ; AREF
442   (CONST&PUSH 28)                     ; (0 . 1)
443   (CALLS2&JMPIF 2 L626)               ; EQUAL
447   (GETVALUE&PUSH 1)                   ; N
449   (CALLS2 151)                        ; 1-
451   (SETVALUE 3)                        ; K
453   (CONST 17)                          ; 0
454   (SETVALUE 4)                        ; J
456   (LOAD&PUSH 4)
457   (GETVALUE&PUSH 12)                  ; *BINOM*
459   (GETVALUE&PUSH 3)                   ; K
461   (GETVALUE&PUSH 6)                   ; M
463   (CALLS2&PUSH 150)                   ; 1+
465   (CALLSR&PUSH 2 1)                   ; AREF
468   (CALLSR&STORE 2 53 3)               ; +
472   (CONST 18)                          ; 1
473   (SETVALUE 7)                        ; SIGN
475   (JMP L534)
477   L477
477   (GETVALUE&PUSH 4)                   ; J
479   (CALLS2 150)                        ; 1+
481   (SETVALUE 4)                        ; J
483   (GETVALUE&PUSH 7)                   ; SIGN
485   (CALLSR 0 54)                       ; -
488   (SETVALUE 7)                        ; SIGN
490   (JMP L606)
493   L493
493   (GETVALUE&PUSH 21)                  ; *INPUT*
495   (GETVALUE&PUSH 6)                   ; M
497   (CALLS2&PUSH 150)                   ; 1+
499   (GETVALUE&PUSH 3)                   ; K
501   (CALLS2&PUSH 150)                   ; 1+
503   (CALLSR 2 1)                        ; AREF
506   (JMP L590)
509   L509
509   (GETVALUE&PUSH 3)                   ; K
511   (CALLS2 151)                        ; 1-
513   (SETVALUE 3)                        ; K
515   (LOAD&PUSH 3)
516   (GETVALUE&PUSH 12)                  ; *BINOM*
518   (GETVALUE&PUSH 3)                   ; K
520   (GETVALUE&PUSH 6)                   ; M
522   (GETVALUE&PUSH 4)                   ; J
524   (CALLSR&PUSH 1 54)                  ; -
527   (CALLSR&PUSH 2 1)                   ; AREF
530   (CALLSR&STORE 1 54 3)               ; -
534   L534
534   (GETVALUE&PUSH 3)                   ; K
536   (GETVALUE&PUSH 16)                  ; *I*
538   (GETVALUE&PUSH 4)                   ; J
540   (CALLS2&PUSH 150)                   ; 1+
542   (CALLSR&PUSH 1 1)                   ; AREF
545   (CALLS2&JMPIF 2 L477)               ; EQUAL
549   (GETVALUE&PUSH 15)                  ; *MINOR1*
551   (GETVALUE&PUSH 15)                  ; *MINOR1*
553   (LOAD&PUSH 13)
554   (LOAD&PUSH 6)
555   (CALLSR&PUSH 2 1)                   ; AREF
558   (GETVALUE&PUSH 15)                  ; *MINOR1*
560   (LOAD&PUSH 15)
561   (LOAD&PUSH 8)
562   (CALLSR&PUSH 2 1)                   ; AREF
565   (GETVALUE&PUSH 7)                   ; SIGN
567   (JMPIFEQTO 18 L493)                 ; 1
571   (LOAD&JMPIF 33 L493)
575   (GETVALUE&PUSH 21)                  ; *INPUT*
577   (GETVALUE&PUSH 6)                   ; M
579   (CALLS2&PUSH 150)                   ; 1+
581   (GETVALUE&PUSH 3)                   ; K
583   (CALLS2&PUSH 150)                   ; 1+
585   (CALLSR&PUSH 2 1)                   ; AREF
588   (CALL1 29)                          ; RATMINUS
590   L590
590   (PUSH)
591   (T&PUSH)
592   (CALL&PUSH 3 30)                    ; RATTIMES
595   (CALL2&PUSH 31)                     ; RATPLUS
597   (LOAD&PUSH 1)
598   (LOAD&PUSH 14)
599   (LOAD&PUSH 7)
600   (LOAD&PUSH 3)
601   (CALLSR 2 2)                        ; SYSTEM::STORE
604   (SKIP 2)
606   L606
606   (GETVALUE&PUSH 3)                   ; K
608   (CONST&PUSH 17)                     ; 0
609   (CALLSR&JMPIF 1 48 L509)            ; >
614   (GETVALUE&PUSH 15)                  ; *MINOR1*
616   (LOAD&PUSH 0)
617   (LOAD&PUSH 14)
618   (LOAD&PUSH 7)
619   (CONST&PUSH 32)                     ; (0 . 1)
621   (CALLSR 2 2)                        ; SYSTEM::STORE
624   (SKIP 1)
626   L626
626   (LOAD&INC&STORE 4)
628   (GETVALUE 6)                        ; M
630   (SETVALUE 4)                        ; J
632   (JMP L702)
635   L635
635   (GETVALUE&PUSH 16)                  ; *I*
637   (GETVALUE&PUSH 4)                   ; J
639   (GETVALUE&PUSH 16)                  ; *I*
641   (GETVALUE&PUSH 4)                   ; J
643   (CALLSR&PUSH 1 1)                   ; AREF
646   (CALLS2&PUSH 150)                   ; 1+
648   (LOAD&PUSH 2)
649   (LOAD&PUSH 2)
650   (LOAD&PUSH 2)
651   (CALLSR 1 2)                        ; SYSTEM::STORE
654   (SKIP 3)
656   (GETVALUE&PUSH 16)                  ; *I*
658   (GETVALUE&PUSH 4)                   ; J
660   (CALLS2&PUSH 151)                   ; 1-
662   (CALLSR&PUSH 1 1)                   ; AREF
665   (GETVALUE&PUSH 16)                  ; *I*
667   (GETVALUE&PUSH 4)                   ; J
669   (CALLSR&PUSH 1 1)                   ; AREF
672   (CALLSR&JMPIF 1 48 L435)            ; >
677   (GETVALUE&PUSH 16)                  ; *I*
679   (GETVALUE&PUSH 4)                   ; J
681   (GETVALUE&PUSH 6)                   ; M
683   (GETVALUE&PUSH 4)                   ; J
685   (CALLSR&PUSH 1 54)                  ; -
688   (LOAD&PUSH 2)
689   (LOAD&PUSH 2)
690   (LOAD&PUSH 2)
691   (CALLSR 1 2)                        ; SYSTEM::STORE
694   (SKIP 3)
696   (GETVALUE&PUSH 4)                   ; J
698   (CALLS2 151)                        ; 1-
700   (SETVALUE 4)                        ; J
702   L702
702   (CONST&PUSH 18)                     ; 1
703   (GETVALUE&PUSH 4)                   ; J
705   (CALLSR&JMPIFNOT 1 48 L635)         ; >
710   (GETVALUE&PUSH 6)                   ; M
712   (CALLS2 150)                        ; 1+
714   (SETVALUE 6)                        ; M
716   (CONST&PUSH 18)                     ; 1
717   (LOAD&PUSH 13)
718   (CALLSR&STORE 1 54 12)              ; -
722   (CONST&PUSH 18)                     ; 1
723   (LOAD&PUSH 12)
724   (CALLSR&STORE 1 54 11)              ; -
728   L728
728   (GETVALUE&PUSH 6)                   ; M
730   (GETVALUE&PUSH 1)                   ; N
732   (CALLS2&PUSH 151)                   ; 1-
734   (CALLSR&JMPIFNOT 1 48 L393)         ; >
739   (CONST&PUSH 12)                     ; *BINOM*
740   (CALL1 33)                          ; *REARRAY
742   (CONST&PUSH 21)                     ; *INPUT*
743   (CALL1 33)                          ; *REARRAY
745   (CONST&PUSH 34)                     ; MRAT
747   (CONST&PUSH 35)                     ; SIMP
749   (GETVALUE&PUSH 36)                  ; VARLIST
751   (GETVALUE&PUSH 37)                  ; GENVAR
753   (LIST&PUSH 4)
755   (GETVALUE&PUSH 15)                  ; *MINOR1*
757   (LOAD&PUSH 14)
758   (CONST&PUSH 17)                     ; 0
759   (CALLSR 2 1)                        ; AREF
762   (CONS)
763   (SETVALUE 2)                        ; R
765   (CONST&PUSH 15)                     ; *MINOR1*
766   (CALL1 33)                          ; *REARRAY
768   (GETVALUE 2)                        ; R
770   (UNBIND1)
771   (SKIP 2)
773   (UNBIND 2)
775   (SKIP 2)
777   (UNBIND 3)
779   (SKIP 1)
781   (UNBIND 2)
783   (SKIP&RET 4)


Disassembly of function #:|(DEFUN PASCAL (N) ...)-8|
(CONST 0) = PASCAL
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE PASCAL>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; PASCAL
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; PASCAL
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE PASCAL>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; PASCAL
8     (SKIP&RET 1)


Disassembly of function PASCAL
(CONST 0) = N
(CONST 1) = *BINOM*
(CONST 2) = 0
(CONST 3) = 1
(CONST 4) = J
(CONST 5) = -1
(CONST 6) = LSH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (N J *BINOM*)
writes special variable : (J)
72 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; N
3     (GETVALUE&PUSH 1)                   ; *BINOM*
5     (LOAD&PUSH 0)
6     (CONST&PUSH 2)                      ; 0
7     (CONST&PUSH 2)                      ; 0
8     (CONST&PUSH 3)                      ; 1
9     (CALLSR 2 2)                        ; SYSTEM::STORE
12    (SKIP 1)
14    (CONST&PUSH 3)                      ; 1
15    (JMP L99)
18    L18
18    (GETVALUE&PUSH 1)                   ; *BINOM*
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 2)
22    (CONST&PUSH 2)                      ; 0
23    (CONST&PUSH 3)                      ; 1
24    (CALLSR 2 2)                        ; SYSTEM::STORE
27    (SKIP 1)
29    (GETVALUE&PUSH 1)                   ; *BINOM*
31    (LOAD&DEC&PUSH 1)
33    (LOAD&PUSH 1)
34    (LOAD&PUSH 1)
35    (LOAD&PUSH 4)
36    (CONST&PUSH 2)                      ; 0
37    (CALLSR 2 2)                        ; SYSTEM::STORE
40    (SKIP 2)
42    (CONST 3)                           ; 1
43    (BIND 4)                            ; J
45    (JMP L89)
47    L47
47    (GETVALUE&PUSH 1)                   ; *BINOM*
49    (GETVALUE&PUSH 4)                   ; J
51    (GETVALUE&PUSH 1)                   ; *BINOM*
53    (LOAD&DEC&PUSH 6)
55    (GETVALUE&PUSH 4)                   ; J
57    (CALLS2&PUSH 151)                   ; 1-
59    (CALLSR&PUSH 2 1)                   ; AREF
62    (GETVALUE&PUSH 1)                   ; *BINOM*
64    (LOAD&DEC&PUSH 7)
66    (GETVALUE&PUSH 4)                   ; J
68    (CALLSR&PUSH 2 1)                   ; AREF
71    (CALLSR&PUSH 2 53)                  ; +
74    (LOAD&PUSH 2)
75    (LOAD&PUSH 7)
76    (LOAD&PUSH 3)
77    (LOAD&PUSH 3)
78    (CALLSR 2 2)                        ; SYSTEM::STORE
81    (SKIP 3)
83    (GETVALUE&PUSH 4)                   ; J
85    (CALLS2 150)                        ; 1+
87    (SETVALUE 4)                        ; J
89    L89
89    (GETVALUE&PUSH 4)                   ; J
91    (LOAD&PUSH 4)
92    (CALLSR&JMPIFNOT 1 48 L47)          ; >
96    (UNBIND1)
97    (LOAD&INC&STORE 0)
99    L99
99    (LOAD&PUSH 0)
100   (GETVALUE&PUSH 0)                   ; N
102   (CALLSR&JMPIFNOT 1 48 L18)          ; >
107   (SKIP 1)
109   (GETVALUE&PUSH 1)                   ; *BINOM*
111   (GETVALUE&PUSH 0)                   ; N
113   (GETVALUE&PUSH 0)                   ; N
115   (CONST&PUSH 5)                      ; -1
116   (CALL2&PUSH 6)                      ; LSH
118   (CALLSR&PUSH 2 1)                   ; AREF
121   (CALLS2 151)                        ; 1-
123   (UNBIND1)
124   (SKIP&RET 2)


Wrote file binary-clisp/newdet.fas
Wrote file /cygdrive/e/temp/maxima/src/newdet.lis