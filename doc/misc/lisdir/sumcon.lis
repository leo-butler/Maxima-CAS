Listing of compilation of file /cygdrive/e/temp/maxima/src/sumcon.lisp
on 2002-12-17 13:32:05 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/sumcon.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE SUMCON)-2|
(CONST 0) = SUMCON
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCON
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (SPECIAL $GENINDEX $NICEINDICESPREF ...))-3|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN $SUMCONTRACT (E) ...)-4|
(CONST 0) = $SUMCONTRACT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $SUMCONTRACT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $SUMCONTRACT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $SUMCONTRACT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $SUMCONTRACT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $SUMCONTRACT
8     (SKIP&RET 1)


Disassembly of function $SUMCONTRACT
(CONST 0) = MPLUS
(CONST 1) = SUMS
(CONST 2) = %SUM
(CONST 3) = (MPLUS)
(CONST 4) = SUBST0
(CONST 5) = SUMCONTRACT1
(CONST 6) = ADDN
(CONST 7) = $SUMCONTRACT
(CONST 8) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SUMS)
writes special variable : (SUMS)
69 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L60)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (JMPIFNOTEQTO 0 L90)                ; MPLUS
10    (LOAD&CDR&PUSH 1)
12    (NIL)
13    (BIND 1)                            ; SUMS
15    (PUSH-NIL 2)
17    (LOAD&JMPIFNOT 5 L39)
20    L20
20    (LOAD&CAR&STORE 5 0)
23    (JMPIFATOM L31)
25    (LOAD 0)
26    (CAR)
27    (CAR&PUSH)
28    (JMPIFEQTO 2 L63)                   ; %SUM
31    L31
31    (LOAD&PUSH 0)
32    (LOAD&CONS&STORE 1)
34    L34
34    (LOAD&CDR&STORE 5)
36    (LOAD&JMPIF 5 L20)
39    L39
39    (GETVALUE 1)                        ; SUMS
41    (JMPIFNOT L80)
43    (GETVALUE&PUSH 1)                   ; SUMS
45    (CALL1 5)                           ; SUMCONTRACT1
47    (SETVALUE 1)                        ; SUMS
49    (PUSH)
50    (LOAD 2)
51    (CONS&PUSH)
52    (T&PUSH)
53    (CALL2 6)                           ; ADDN
55    L55
55    (SKIP 2)
57    (UNBIND1)
58    (SKIP&RET 3)
60    L60
60    (LOAD 1)
61    (SKIP&RET 2)
63    L63
63    (LOAD 0)
64    (CDR)
65    (CAR&PUSH)
66    (JSR&PUSH L0)
69    (LOAD 1)
70    (CDR)
71    (CDR)
72    (CONS&PUSH)
73    (GETVALUE 1)                        ; SUMS
75    (CONS)
76    (SETVALUE 1)                        ; SUMS
78    (JMP L34)
80    L80
80    (CONST&PUSH 3)                      ; (MPLUS)
81    (LOAD&PUSH 2)
82    (CALLS2 73)                         ; NREVERSE
84    (CONS&PUSH)
85    (LOAD&PUSH 8)
86    (CALL2 4)                           ; SUBST0
88    (JMP L55)
90    L90
90    (CONST&SYMBOL-FUNCTION&PUSH 7)      ; $SUMCONTRACT
92    (LOAD&PUSH 2)
93    (CALL2 8)                           ; RECUR-APPLY
95    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $INTOSUM (E) ...)-5|
(CONST 0) = $INTOSUM
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $INTOSUM>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $INTOSUM
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $INTOSUM
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $INTOSUM>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $INTOSUM
8     (SKIP&RET 1)


Disassembly of function $INTOSUM
(CONST 0) = $SUMEXPAND
(CONST 1) = MTIMES
(CONST 2) = %SUM
(CONST 3) = MULN
(CONST 4) = $SUMCONTRACT
(CONST 5) = (MTIMES)
(CONST 6) = SUBST0
(CONST 7) = FREE
(CONST 8) = GET-FREE-INDEX
(CONST 9) = 1
(CONST 10) = SIMPSUM
(CONST 11) = $INTOSUM
(CONST 12) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
114 byte-code instructions:
0     (T)
1     (BIND 0)                            ; $SUMEXPAND
3     (LOAD 4)
4     (JMPIFATOM L20)
6     (LOAD 4)
7     (CAR)
8     (CAR&PUSH)
9     (JMPIFEQTO 1 L64)                   ; MTIMES
12    (CONST&SYMBOL-FUNCTION&PUSH 11)     ; $INTOSUM
14    (LOAD&PUSH 5)
15    (CALL2 12)                          ; RECUR-APPLY
17    L17
17    (UNBIND1)
18    (SKIP&RET 2)
20    L20
20    (LOAD 4)
21    (JMP L17)
23    L23
23    (LOAD 2)
24    (CAR)
25    (JMP L86)
27    L27
27    (LOAD&CAR&STORE 2 1)
30    (JMP L89)
32    L32
32    (LOAD&JMPIFNOT 1 L27)
35    (LOAD&PUSH 1)
36    (LOAD&CAR&PUSH 3)
38    (LIST&PUSH 2)
40    (T&PUSH)
41    (CALL2 3)                           ; MULN
43    (STORE 1)
44    (JMP L89)
46    L46
46    (CONST&PUSH 5)                      ; (MTIMES)
47    (LOAD&PUSH 1)
48    (CALLS2 73)                         ; NREVERSE
50    (CONS&PUSH)
51    (LOAD&PUSH 8)
52    (CALL2 6)                           ; SUBST0
54    (SKIP 3)
56    (JMP L17)
58    L58
58    (LOAD 1)
59    (CDR)
60    (CDR)
61    (CAR)
62    (JMP L114)
64    L64
64    (LOAD&CDR&PUSH 4)
66    (PUSH-NIL 2)
68    (LOAD&JMPIFNOT 2 L94)
71    L71
71    (LOAD 2)
72    (CAR)
73    (JMPIFATOM L23)
75    (LOAD 2)
76    (CAR)
77    (CAR)
78    (CAR&PUSH)
79    (JMPIFEQTO 2 L32)                   ; %SUM
82    (LOAD&CAR&PUSH 2)
84    (CALL1 4)                           ; $SUMCONTRACT
86    L86
86    (PUSH)
87    (LOAD&CONS&STORE 0)
89    L89
89    (LOAD&CDR&STORE 2)
91    (LOAD&JMPIF 2 L71)
94    L94
94    (LOAD&JMPIFNOT 1 L46)
97    (NIL&PUSH)
98    (LOAD 1)
99    (CONS&PUSH)
100   (LOAD 2)
101   (CDR)
102   (CDR)
103   (CAR&PUSH)
104   (CALL2&JMPIF 7 L58)                 ; FREE
107   (NIL&PUSH)
108   (LOAD&PUSH 2)
109   (LOAD 2)
110   (CONS)
111   (CONS&PUSH)
112   (CALL1 8)                           ; GET-FREE-INDEX
114   L114
114   (PUSH)
115   (LOAD&PUSH 0)
116   (LOAD 3)
117   (CDR)
118   (CDR)
119   (CAR&PUSH)
120   (LOAD&PUSH 4)
121   (PUSH-UNBOUND 3)
123   (CALLS1&STORE 172 2)                ; SUBST
126   (CDR&PUSH)
127   (LOAD 3)
128   (CDR)
129   (CAR&PUSH)
130   (LOAD 3)
131   (CONS&PUSH)
132   (T&PUSH)
133   (CALL2&PUSH 3)                      ; MULN
135   (CALLS1 168)                        ; RPLACA
137   (LOAD&CAR&PUSH 2)
139   (NIL&PUSH)
140   (CALLS1 170)                        ; RPLACD
142   (LOAD 2)
143   (STORE 0)
144   (CONST&PUSH 9)                      ; 1
145   (T&PUSH)
146   (CALL 3 10)                         ; SIMPSUM
149   (SKIP 3)
151   (JMP L17)


Disassembly of function #:|(DEFUN SUMCONTRACT1 (SUMS) ...)-6|
(CONST 0) = SUMCONTRACT1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCONTRACT1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCONTRACT1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCONTRACT1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCONTRACT1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCONTRACT1
8     (SKIP&RET 1)


Disassembly of function SUMCONTRACT1
(CONST 0) = SUMS
(CONST 1) = SUMCONTRACT2
(CONST 2) = ADDN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (SUMS)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; SUMS
3     (NIL&PUSH)
4     (GETVALUE&PUSH 0)                   ; SUMS
6     (CALL2&PUSH 1)                      ; SUMCONTRACT2
8     (T&PUSH)
9     (CALL2 2)                           ; ADDN
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFUN SUMCONTRACT2 (RESULT LEFT) ...)-7|
(CONST 0) = SUMCONTRACT2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCONTRACT2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCONTRACT2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCONTRACT2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCONTRACT2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCONTRACT2
8     (SKIP&RET 1)


Disassembly of function SUMCONTRACT2
(CONST 0) = SUMCOMBINE1
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
15 byte-code instructions:
0     (LOAD&JMPIF 1 L9)
3     L3
3     (LOAD 2)
4     (SKIP&RET 3)
6     L6
6     (LOAD&JMPIFNOT 1 L3)
9     L9
9     (LOAD&CAR&PUSH 1)
11    (LOAD&CDR&PUSH 2)
13    (CALL2&PUSH 0)                      ; SUMCOMBINE1
15    (LOAD&CAR&PUSH 0)
17    (LOAD&PUSH 4)
18    (CALLSR&PUSH 2 34)                  ; APPEND
21    (LOAD&CDR&PUSH 1)
23    (JMPTAIL 2 6 L6)


Disassembly of function #:|(DEFUN SUMCOMBINE1 (PATTERN LLIST) ...)-8|
(CONST 0) = SUMCOMBINE1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCOMBINE1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCOMBINE1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCOMBINE1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCOMBINE1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCOMBINE1
8     (SKIP&RET 1)


Disassembly of function SUMCOMBINE1
(CONST 0) = SUB*
(CONST 1) = SUMCOMBINE2
(CONST 2) = (%SUM)
(CONST 3) = 1
(CONST 4) = SIMPSUM
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
58 byte-code instructions:
0     (LOAD&PUSH 2)
1     (PUSH-NIL 3)
3     (LOAD&PUSH 5)
4     (LOAD&JMPIFNOT 0 L46)
7     L7
7     (LOAD&CAR&STORE 0 1)
10    (LOAD 4)
11    (CDR)
12    (CDR)
13    (CAR&PUSH)
14    (LOAD 2)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (CALL2&PUSH 0)                      ; SUB*
20    (CALLS2&JMPIFNOT 8 L38)             ; NUMBERP
23    (LOAD 4)
24    (CDR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD 2)
29    (CDR)
30    (CDR)
31    (CDR)
32    (CAR&PUSH)
33    (CALL2&PUSH 0)                      ; SUB*
35    (CALLS2&JMPIF 8 L60)                ; NUMBERP
38    L38
38    (LOAD&PUSH 1)
39    (LOAD&CONS&STORE 2)
41    L41
41    (LOAD&CDR&STORE 0)
43    (LOAD&JMPIF 0 L7)
46    L46
46    (CONST&PUSH 2)                      ; (%SUM)
47    (LOAD 5)
48    (CONS&PUSH)
49    (CONST&PUSH 3)                      ; 1
50    (T&PUSH)
51    (CALL&PUSH 3 4)                     ; SIMPSUM
54    (LOAD 4)
55    (CONS&PUSH)
56    (LOAD 3)
57    (CONS)
58    (SKIP&RET 8)
60    L60
60    (LOAD&PUSH 1)
61    (LOAD&PUSH 5)
62    (CALL2&PUSH 1)                      ; SUMCOMBINE2
64    (LOAD 0)
65    (CAR)
66    (CDR)
67    (STORE 5)
68    (LOAD&CDR&PUSH 0)
70    (LOAD&CONS&STORE 4)
72    (SKIP 1)
74    (JMP L41)


Disassembly of function #:|(DEFUN SUMCOMBINE2 (SUM1 SUM2) ...)-9|
(CONST 0) = SUMCOMBINE2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCOMBINE2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCOMBINE2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCOMBINE2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCOMBINE2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCOMBINE2
8     (SKIP&RET 1)


Disassembly of function SUMCOMBINE2
(CONST 0) = $MAX
(CONST 1) = $MIN
(CONST 2) = FREE
(CONST 3) = GET-FREE-INDEX
(CONST 4) = (%SUM)
(CONST 5) = ADD2
(CONST 6) = DOSUM
(CONST 7) = 1
(CONST 8) = SUB*
(CONST 9) = (T T T T)
(CONST 10) = ADDN
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
121 byte-code instructions:
0     (LOAD&CAR&PUSH 2)
2     (LOAD&CAR&PUSH 2)
4     (LOAD 4)
5     (CDR)
6     (CAR&PUSH)
7     (LOAD 4)
8     (CDR)
9     (CAR&PUSH)
10    (LOAD 6)
11    (CDR)
12    (CDR)
13    (CAR&PUSH)
14    (LOAD 6)
15    (CDR)
16    (CDR)
17    (CAR&PUSH)
18    (LOAD 8)
19    (CDR)
20    (CDR)
21    (CDR)
22    (CAR&PUSH)
23    (LOAD 8)
24    (CDR)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD&PUSH 3)
29    (LOAD&PUSH 3)
30    (CALL2&PUSH 0)                      ; $MAX
32    (LOAD&PUSH 2)
33    (LOAD&PUSH 2)
34    (CALL2&PUSH 1)                      ; $MIN
36    (LOAD&PUSH 7)
37    (LOAD 7)
38    (JMPIFEQ L147)
41    (LOAD&PUSH 9)
42    (LOAD&PUSH 7)
43    (CALL2&JMPIF 2 L151)                ; FREE
47    (LOAD&PUSH 8)
48    (LOAD&PUSH 8)
49    (CALL2&JMPIF 2 L155)                ; FREE
53    (NIL&PUSH)
54    (LOAD&PUSH 8)
55    (LOAD&PUSH 8)
56    (LOAD&PUSH 12)
57    (LOAD&PUSH 12)
58    (LOAD&PUSH 10)
59    (LOAD&PUSH 10)
60    (LOAD&PUSH 10)
61    (LOAD&PUSH 10)
62    (LIST&PUSH 9)
64    (CALL1 3)                           ; GET-FREE-INDEX
66    L66
66    (PUSH)
67    (PUSH-NIL 2)
69    (LOAD&PUSH 2)
70    (LOAD&PUSH 11)
71    (LOAD&PUSH 14)
72    (PUSH-UNBOUND 3)
74    (CALLS1&STORE 172 12)               ; SUBST
77    (LOAD&PUSH 2)
78    (LOAD&PUSH 10)
79    (LOAD&PUSH 13)
80    (PUSH-UNBOUND 3)
82    (CALLS1&STORE 172 11)               ; SUBST
85    (CONST&PUSH 4)                      ; (%SUM)
86    (LOAD&PUSH 13)
87    (LOAD&PUSH 13)
88    (CALL2&PUSH 5)                      ; ADD2
90    (LOAD&PUSH 4)
91    (LOAD&PUSH 7)
92    (LOAD&PUSH 7)
93    (LIST 5)
95    (STORE 0)
96    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; DOSUM
98    (LOAD&PUSH 13)
99    (LOAD&PUSH 14)
100   (LOAD&PUSH 14)
101   (LOAD&PUSH 15)
102   (LIST&PUSH 4)
104   (LOAD&PUSH 4)
105   (LOAD&PUSH 5)
106   (LOAD&PUSH 6)
107   (LOAD&PUSH 7)
108   (LIST&PUSH 4)
110   (LOAD&PUSH 11)
111   (LOAD&PUSH 7)
112   (CONST&PUSH 7)                      ; 1
113   (CALL2&PUSH 5)                      ; ADD2
115   (LOAD&PUSH 12)
116   (LOAD&PUSH 9)
117   (CONST&PUSH 7)                      ; 1
118   (CALL2&PUSH 5)                      ; ADD2
120   (LIST&PUSH 4)
122   (LOAD&PUSH 8)
123   (CONST&PUSH 7)                      ; 1
124   (CALL2&PUSH 8)                      ; SUB*
126   (LOAD&PUSH 11)
127   (LOAD&PUSH 10)
128   (CONST&PUSH 7)                      ; 1
129   (CALL2&PUSH 8)                      ; SUB*
131   (LOAD&PUSH 12)
132   (LIST&PUSH 4)
134   (CONST&PUSH 9)                      ; (T T T T)
135   (CALLSR&PUSH 4 22)                  ; MAPCAR
138   (T&PUSH)
139   (CALL2 10)                          ; ADDN
141   (STORE 1)
142   (LOAD&PUSH 0)
143   (LOAD 2)
144   (CONS)
145   (SKIP&RET 16)
147   L147
147   (LOAD 7)
148   (JMP L66)
151   L151
151   (LOAD 6)
152   (JMP L66)
155   L155
155   (LOAD 7)
156   (JMP L66)


Disassembly of function #:|(DEFMVAR $NICEINDICESPREF '(# $I $J ...))-10-1|
(CONST 0) = $NICEINDICESPREF
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MLIST SIMP) $I $J $K $L $M $N)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NICEINDICESPREF
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $NICEINDICESPREF
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MLIST SIMP) $I $J $K $L $M $N)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $NICEINDICESPREF '(# $I $J ...))-10-2|
(CONST 0) = (SPECIAL $NICEINDICESPREF)
(CONST 1) = $NICEINDICESPREF
(CONST 2) = ((MLIST SIMP) $I $J $K $L $M $N)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $NICEINDICESPREF)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $NICEINDICESPREF
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $NICEINDICESPREF
8     (CONST&PUSH 2)                      ; ((MLIST SIMP) $I $J $K $L $M $N)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $NICEINDICESPREF
12    (SKIP&RET 1)


Disassembly of function #:|(DEFUN GET-FREE-INDEX (LLIST) ...)-11|
(CONST 0) = GET-FREE-INDEX
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE GET-FREE-INDEX>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; GET-FREE-INDEX
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; GET-FREE-INDEX
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE GET-FREE-INDEX>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; GET-FREE-INDEX
8     (SKIP&RET 1)


Disassembly of function GET-FREE-INDEX
(CONST 0) = $NICEINDICESPREF
(CONST 1) = FREE
(CONST 2) = 0
(CONST 3) = CONCAT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: ($NICEINDICESPREF)
37 byte-code instructions:
0     (GETVALUE 0)                        ; $NICEINDICESPREF
2     (CDR&PUSH)
3     (LOAD&JMPIFNOT 0 L17)
6     L6
6     (LOAD&PUSH 2)
7     (LOAD&CAR&PUSH 1)
9     (CALL2&JMPIF 1 L38)                 ; FREE
12    (LOAD&CDR&STORE 0)
14    (LOAD&JMPIF 0 L6)
17    L17
17    (SKIP 1)
19    L19
19    (CONST&PUSH 2)                      ; 0
20    (NIL&PUSH)
21    L21
21    (GETVALUE 0)                        ; $NICEINDICESPREF
23    (CDR)
24    (CAR&PUSH)
25    (LOAD&PUSH 2)
26    (CALL2 3)                           ; CONCAT
28    (STORE 0)
29    (LOAD&PUSH 3)
30    (LOAD&PUSH 1)
31    (CALL2&JMPIF 1 L46)                 ; FREE
34    (LOAD&INC&STORE 1)
36    (JMP L21)
38    L38
38    (LOAD 0)
39    (CAR)
40    (SKIP 1)
42    (JMPIF1 L49)
44    (JMP L19)
46    L46
46    (POP)
47    (SKIP&RET 3)
49    L49
49    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN $BASHINDICES (E) ...)-12|
(CONST 0) = $BASHINDICES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $BASHINDICES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $BASHINDICES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $BASHINDICES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $BASHINDICES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $BASHINDICES
8     (SKIP&RET 1)


Disassembly of function $BASHINDICES
(CONST 0) = $J
(CONST 1) = $GENINDEX
(CONST 2) = (%SUM %PRODUCT)
(CONST 3) = MEMQ
(CONST 4) = GENSUMINDEX
(CONST 5) = SUMCONSIMP
(CONST 6) = $BASHINDICES
(CONST 7) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
30 byte-code instructions:
0     (CONST 0)                           ; $J
1     (BIND 1)                            ; $GENINDEX
3     (LOAD 4)
4     (JMPIFATOM L21)
6     (LOAD 4)
7     (CAR)
8     (CAR&PUSH)
9     (CONST&PUSH 2)                      ; (%SUM %PRODUCT)
10    (CALL2&JMPIF 3 L24)                 ; MEMQ
13    (CONST&SYMBOL-FUNCTION&PUSH 6)      ; $BASHINDICES
15    (LOAD&PUSH 5)
16    (CALL2 7)                           ; RECUR-APPLY
18    L18
18    (UNBIND1)
19    (SKIP&RET 2)
21    L21
21    (LOAD 4)
22    (JMP L18)
24    L24
24    (CALL0 4)                           ; GENSUMINDEX
26    (PUSH)
27    (LOAD 5)
28    (CDR)
29    (CDR)
30    (CAR&PUSH)
31    (LOAD&PUSH 6)
32    (PUSH-UNBOUND 3)
34    (CALLS1&PUSH 172)                   ; SUBST
36    (CALL1 5)                           ; SUMCONSIMP
38    (JMP L18)


Disassembly of function #:|(DEFMFUN $NICEINDICES (E) ...)-13|
(CONST 0) = $NICEINDICES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $NICEINDICES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $NICEINDICES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $NICEINDICES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $NICEINDICES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $NICEINDICES
8     (SKIP&RET 1)


Disassembly of function $NICEINDICES
(CONST 0) = $NICEINDICES
(CONST 1) = RECUR-APPLY
(CONST 2) = (%SUM %PRODUCT)
(CONST 3) = MEMQ
(CONST 4) = GET-FREE-INDEX
(CONST 5) = SUMCONSIMP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
27 byte-code instructions:
0     (LOAD 1)
1     (JMPIFATOM L18)
3     (CONST&SYMBOL-FUNCTION&PUSH 0)      ; $NICEINDICES
5     (LOAD&PUSH 2)
6     (CALL2&PUSH 1)                      ; RECUR-APPLY
8     (LOAD 0)
9     (CAR)
10    (CAR&PUSH)
11    (CONST&PUSH 2)                      ; (%SUM %PRODUCT)
12    (CALL2&JMPIF 3 L21)                 ; MEMQ
15    (POP)
16    (SKIP&RET 2)
18    L18
18    (LOAD 1)
19    (SKIP&RET 2)
21    L21
21    (LOAD&PUSH 0)
22    (CALL1&PUSH 4)                      ; GET-FREE-INDEX
24    (LOAD 1)
25    (CDR)
26    (CDR)
27    (CAR&PUSH)
28    (LOAD&PUSH 2)
29    (PUSH-UNBOUND 3)
31    (CALLS1&PUSH 172)                   ; SUBST
33    (CALL1 5)                           ; SUMCONSIMP
35    (SKIP&RET 3)


Disassembly of function #:|(DEFUN SUMCONSIMP (E) ...)-14|
(CONST 0) = SUMCONSIMP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SUMCONSIMP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SUMCONSIMP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SUMCONSIMP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SUMCONSIMP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SUMCONSIMP
8     (SKIP&RET 1)


Disassembly of function SUMCONSIMP
(CONST 0) = (%SUM %PRODUCT)
(CONST 1) = MEMQ
(CONST 2) = RESIMPLIFY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
23 byte-code instructions:
0     L0
0     (LOAD 1)
1     (JMPIFATOM L10)
3     (LOAD 1)
4     (CAR)
5     (CAR&PUSH)
6     (CONST&PUSH 0)                      ; (%SUM %PRODUCT)
7     (CALL2&JMPIF 1 L15)                 ; MEMQ
10    L10
10    (LOAD&PUSH 1)
11    (CALL1 2)                           ; RESIMPLIFY
13    (SKIP&RET 2)
15    L15
15    (LOAD&CAR&PUSH 1)
17    (LOAD 2)
18    (CDR)
19    (CAR&PUSH)
20    (JSR&PUSH L0)
22    (LOAD 3)
23    (CDR)
24    (CDR)
25    (LIST* 2)
27    (SKIP&RET 2)


Wrote file binary-clisp/sumcon.fas
Wrote file /cygdrive/e/temp/maxima/src/sumcon.lis