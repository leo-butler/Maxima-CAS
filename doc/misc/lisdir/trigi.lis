Listing of compilation of file /cygdrive/e/temp/maxima/src/trigi.lisp
on 2002-12-17 13:35:01 by CLISP, version 2.30 (released 2002-09-15) (built 3249143430) (memory 3249145291)
Compiling file /cygdrive/e/temp/maxima/src/trigi.lisp ...

Disassembly of function #:|(IN-PACKAGE "MAXIMA")-1|
(CONST 0) = "MAXIMA"
(CONST 1) = *PACKAGE*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
writes special variable : (*PACKAGE*)
4 byte-code instructions:
0     (CONST&PUSH 0)                      ; "MAXIMA"
1     (CALLS1 228)                        ; SYSTEM::%FIND-PACKAGE
3     (SETVALUE 1)                        ; *PACKAGE*
5     (SKIP&RET 1)


Disassembly of function #:|(MACSYMA-MODULE TRIGI)-2|
(CONST 0) = TRIGI
(CONST 1) = MACSYMA-MODULE
(CONST 2) = (RUNTIME)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGI
1     (CONST&PUSH 1)                      ; MACSYMA-MODULE
2     (CONST&PUSH 2)                      ; (RUNTIME)
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(LOAD-MACSYMA-MACROS MRGMAC)-3|
(CONST 0) = COMMENT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; COMMENT
1     (SKIP&RET 1)


Disassembly of function #:|(DECLARE-TOP (GENPREFIX TRI) (SPECIAL VARLIST ERRORSW ...) ...)-4|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%PIARGS T)-5-1|
(CONST 0) = $%PIARGS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%PIARGS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $%PIARGS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%PIARGS T)-5-2|
(CONST 0) = (SPECIAL $%PIARGS)
(CONST 1) = $%PIARGS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $%PIARGS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $%PIARGS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $%PIARGS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $%PIARGS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%IARGS T)-6-1|
(CONST 0) = $%IARGS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $%IARGS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $%IARGS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $%IARGS T)-6-2|
(CONST 0) = (SPECIAL $%IARGS)
(CONST 1) = $%IARGS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $%IARGS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $%IARGS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $%IARGS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $%IARGS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGINVERSES '$ALL)-7-1|
(CONST 0) = $TRIGINVERSES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = $ALL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGINVERSES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRIGINVERSES
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; $ALL
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGINVERSES '$ALL)-7-2|
(CONST 0) = (SPECIAL $TRIGINVERSES)
(CONST 1) = $TRIGINVERSES
(CONST 2) = $ALL
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRIGINVERSES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRIGINVERSES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRIGINVERSES
8     (CONST&PUSH 2)                      ; $ALL
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TRIGINVERSES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPAND NIL)-8-1|
(CONST 0) = $TRIGEXPAND
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGEXPAND
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRIGEXPAND
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPAND NIL)-8-2|
(CONST 0) = (SPECIAL $TRIGEXPAND)
(CONST 1) = $TRIGEXPAND
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRIGEXPAND)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRIGEXPAND
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRIGEXPAND
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TRIGEXPAND
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPANDPLUS T)-9-1|
(CONST 0) = $TRIGEXPANDPLUS
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGEXPANDPLUS
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRIGEXPANDPLUS
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPANDPLUS T)-9-2|
(CONST 0) = (SPECIAL $TRIGEXPANDPLUS)
(CONST 1) = $TRIGEXPANDPLUS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRIGEXPANDPLUS)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRIGEXPANDPLUS
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRIGEXPANDPLUS
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TRIGEXPANDPLUS
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPANDTIMES T)-10-1|
(CONST 0) = $TRIGEXPANDTIMES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGEXPANDTIMES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRIGEXPANDTIMES
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGEXPANDTIMES T)-10-2|
(CONST 0) = (SPECIAL $TRIGEXPANDTIMES)
(CONST 1) = $TRIGEXPANDTIMES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRIGEXPANDTIMES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRIGEXPANDTIMES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRIGEXPANDTIMES
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TRIGEXPANDTIMES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGSIGN T)-11-1|
(CONST 0) = $TRIGSIGN
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $TRIGSIGN
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $TRIGSIGN
11    (LOAD&PUSH 1)
12    (T&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $TRIGSIGN T)-11-2|
(CONST 0) = (SPECIAL $TRIGSIGN)
(CONST 1) = $TRIGSIGN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $TRIGSIGN)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $TRIGSIGN
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $TRIGSIGN
8     (T&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $TRIGSIGN
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPONENTIALIZE NIL)-12-1|
(CONST 0) = $EXPONENTIALIZE
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPONENTIALIZE
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $EXPONENTIALIZE
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $EXPONENTIALIZE NIL)-12-2|
(CONST 0) = (SPECIAL $EXPONENTIALIZE)
(CONST 1) = $EXPONENTIALIZE
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $EXPONENTIALIZE)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $EXPONENTIALIZE
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $EXPONENTIALIZE
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $EXPONENTIALIZE
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LOGARC NIL)-13-1|
(CONST 0) = $LOGARC
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $LOGARC
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $LOGARC
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $LOGARC NIL)-13-2|
(CONST 0) = (SPECIAL $LOGARC)
(CONST 1) = $LOGARC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $LOGARC)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $LOGARC
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $LOGARC
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $LOGARC
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $HALFANGLES NIL)-14-1|
(CONST 0) = $HALFANGLES
(CONST 1) = *VARIABLE-INITIAL-VALUES*
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; $HALFANGLES
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; $HALFANGLES
11    (LOAD&PUSH 1)
12    (NIL&PUSH)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR $HALFANGLES NIL)-14-2|
(CONST 0) = (SPECIAL $HALFANGLES)
(CONST 1) = $HALFANGLES
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL $HALFANGLES)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; $HALFANGLES
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; $HALFANGLES
8     (NIL&PUSH)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; $HALFANGLES
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR \|1//2\| '(# 1 2))-15-1|
(CONST 0) = |1//2|
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((RAT SIMP) 1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; |1//2|
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; |1//2|
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR \|1//2\| '(# 1 2))-15-2|
(CONST 0) = (SPECIAL |1//2|)
(CONST 1) = |1//2|
(CONST 2) = ((RAT SIMP) 1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL |1//2|)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; |1//2|
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; |1//2|
8     (CONST&PUSH 2)                      ; ((RAT SIMP) 1 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; |1//2|
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR \|-1//2\| '(# -1 2))-16-1|
(CONST 0) = |-1//2|
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((RAT SIMP) -1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; |-1//2|
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; |-1//2|
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((RAT SIMP) -1 2)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR \|-1//2\| '(# -1 2))-16-2|
(CONST 0) = (SPECIAL |-1//2|)
(CONST 1) = |-1//2|
(CONST 2) = ((RAT SIMP) -1 2)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL |-1//2|)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; |-1//2|
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; |-1//2|
8     (CONST&PUSH 2)                      ; ((RAT SIMP) -1 2)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; |-1//2|
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR %PI//4 '(# # $%PI))-17-1|
(CONST 0) = %PI//4
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 4) $%PI)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PI//4
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; %PI//4
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 4) $%PI)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR %PI//4 '(# # $%PI))-17-2|
(CONST 0) = (SPECIAL %PI//4)
(CONST 1) = %PI//4
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 4) $%PI)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL %PI//4)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; %PI//4
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; %PI//4
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 4) $%PI)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; %PI//4
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR %PI//2 '(# # $%PI))-18-1|
(CONST 0) = %PI//2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) $%PI)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PI//2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; %PI//2
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) $%PI)
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR %PI//2 '(# # $%PI))-18-2|
(CONST 0) = (SPECIAL %PI//2)
(CONST 1) = %PI//2
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) $%PI)
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL %PI//2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; %PI//2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; %PI//2
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) $%PI)
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; %PI//2
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SQRT2//2 '(# # #))-19-1|
(CONST 0) = SQRT2//2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) 2 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQRT2//2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SQRT2//2
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) (# 2 #))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SQRT2//2 '(# # #))-19-2|
(CONST 0) = (SPECIAL SQRT2//2)
(CONST 1) = SQRT2//2
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) 2 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SQRT2//2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SQRT2//2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SQRT2//2
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) (# 2 #))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; SQRT2//2
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR -SQRT2//2 '(# # #))-20-1|
(CONST 0) = -SQRT2//2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) 2 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; -SQRT2//2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; -SQRT2//2
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# -1 2) (# 2 #))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR -SQRT2//2 '(# # #))-20-2|
(CONST 0) = (SPECIAL -SQRT2//2)
(CONST 1) = -SQRT2//2
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) 2 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL -SQRT2//2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; -SQRT2//2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; -SQRT2//2
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# -1 2) (# 2 #))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; -SQRT2//2
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SQRT3//2 '(# # #))-21-1|
(CONST 0) = SQRT3//2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) 3 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQRT3//2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; SQRT3//2
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) (# 3 #))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR SQRT3//2 '(# # #))-21-2|
(CONST 0) = (SPECIAL SQRT3//2)
(CONST 1) = SQRT3//2
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) 1 2) ((MEXPT SIMP) 3 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL SQRT3//2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; SQRT3//2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; SQRT3//2
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# 1 2) (# 3 #))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; SQRT3//2
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR -SQRT3//2 '(# # #))-22-1|
(CONST 0) = -SQRT3//2
(CONST 1) = *VARIABLE-INITIAL-VALUES*
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) 3 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (*VARIABLE-INITIAL-VALUES*)
13 byte-code instructions:
0     (CONST&PUSH 0)                      ; -SQRT3//2
1     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
3     (PUSH-UNBOUND 1)
5     (CALLS1&JMPIF 99 L17)               ; GETHASH
8     (GETVALUE&PUSH 1)                   ; *VARIABLE-INITIAL-VALUES*
10    (CONST&PUSH 0)                      ; -SQRT3//2
11    (LOAD&PUSH 1)
12    (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# -1 2) (# 3 #))
13    (CALLS1 100)                        ; SYSTEM::PUTHASH
15    (SKIP 1)
17    L17
17    (VALUES0)
18    (SKIP&RET 1)


Disassembly of function #:|(DEFMVAR -SQRT3//2 '(# # #))-22-2|
(CONST 0) = (SPECIAL -SQRT3//2)
(CONST 1) = -SQRT3//2
(CONST 2) = ((MTIMES SIMP) ((RAT SIMP) -1 2) ((MEXPT SIMP) 3 ((RAT SIMP) 1 2)))
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
10 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL -SQRT3//2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; -SQRT3//2
4     (CALLS1&JMPIF 79 L11)               ; BOUNDP
7     (CONST&PUSH 1)                      ; -SQRT3//2
8     (CONST&PUSH 2)                      ; ((MTIMES SIMP) (# -1 2) (# 3 #))
9     (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
11    L11
11    (CONST 1)                           ; -SQRT3//2
12    (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SQRT1-X^2 (X) ...)-23|
(CONST 0) = SQRT1-X^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQRT1-X^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQRT1-X^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQRT1-X^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQRT1-X^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQRT1-X^2
8     (SKIP&RET 1)


Disassembly of function SQRT1-X^2
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = 2
(CONST 3) = POWER
(CONST 4) = SUB
(CONST 5) = |1//2|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; X
6     (CONST&PUSH 2)                      ; 2
7     (CALL2&PUSH 3)                      ; POWER
9     (CALL2&PUSH 4)                      ; SUB
11    (GETVALUE&PUSH 5)                   ; |1//2|
13    (CALL2 3)                           ; POWER
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SQRT1+X^2 (X) ...)-24|
(CONST 0) = SQRT1+X^2
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQRT1+X^2>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQRT1+X^2
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQRT1+X^2
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQRT1+X^2>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQRT1+X^2
8     (SKIP&RET 1)


Disassembly of function SQRT1+X^2
(CONST 0) = X
(CONST 1) = 1
(CONST 2) = 2
(CONST 3) = POWER
(CONST 4) = ADD
(CONST 5) = |1//2|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 1
4     (GETVALUE&PUSH 0)                   ; X
6     (CONST&PUSH 2)                      ; 2
7     (CALL2&PUSH 3)                      ; POWER
9     (CALL2&PUSH 4)                      ; ADD
11    (GETVALUE&PUSH 5)                   ; |1//2|
13    (CALL2 3)                           ; POWER
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SQRTX^2-1 (X) ...)-25|
(CONST 0) = SQRTX^2-1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQRTX^2-1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQRTX^2-1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQRTX^2-1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQRTX^2-1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQRTX^2-1
8     (SKIP&RET 1)


Disassembly of function SQRTX^2-1
(CONST 0) = X
(CONST 1) = 2
(CONST 2) = POWER
(CONST 3) = -1
(CONST 4) = ADD
(CONST 5) = |1//2|
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
11 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CONST&PUSH 1)                      ; 2
6     (CALL2&PUSH 2)                      ; POWER
8     (CONST&PUSH 3)                      ; -1
9     (CALL2&PUSH 4)                      ; ADD
11    (GETVALUE&PUSH 5)                   ; |1//2|
13    (CALL2 2)                           ; POWER
15    (UNBIND1)
16    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SQ-SUMSQ (X Y) ...)-26|
(CONST 0) = SQ-SUMSQ
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SQ-SUMSQ>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SQ-SUMSQ
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SQ-SUMSQ
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SQ-SUMSQ>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SQ-SUMSQ
8     (SKIP&RET 1)


Disassembly of function SQ-SUMSQ
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 2
(CONST 3) = POWER
(CONST 4) = ADD
(CONST 5) = |1//2|
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| Y X)
15 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; 2
9     (CALL2&PUSH 3)                      ; POWER
11    (GETVALUE&PUSH 1)                   ; Y
13    (CONST&PUSH 2)                      ; 2
14    (CALL2&PUSH 3)                      ; POWER
16    (CALL2&PUSH 4)                      ; ADD
18    (GETVALUE&PUSH 5)                   ; |1//2|
20    (CALL2 3)                           ; POWER
22    (UNBIND 2)
24    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN TRIGP (FUNC) ...)-27|
(CONST 0) = TRIGP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TRIGP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TRIGP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TRIGP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TRIGP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TRIGP
8     (SKIP&RET 1)


Disassembly of function TRIGP
(CONST 0) = (%SIN %COS %TAN %CSC %SEC %COT %SINH %COSH %TANH %CSCH %SECH %COTH)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (%SIN %COS %TAN %CSC %SEC %COT ...)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ARCP (FUNC) ...)-28|
(CONST 0) = ARCP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ARCP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ARCP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ARCP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ARCP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ARCP
8     (SKIP&RET 1)


Disassembly of function ARCP
(CONST 0) = (%ASIN %ACOS %ATAN %ACSC %ASEC %ACOT %ASINH %ACOSH %ATANH %ACSCH %ASECH %ACOTH)
(CONST 1) = MEMQ
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
4 byte-code instructions:
0     (LOAD&PUSH 1)
1     (CONST&PUSH 0)                      ; (%ASIN %ACOS %ATAN %ACSC %ASEC ...)
2     (CALL2 1)                           ; MEMQ
4     (SKIP&RET 2)


Disassembly of function #:|(DEFPROP %SIN SIMP-%SIN ...)-29|
(CONST 0) = %SIN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%SIN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SIN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%SIN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %COS SIMP-%COS ...)-30|
(CONST 0) = %COS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%COS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %COS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%COS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %TAN SIMP-%TAN ...)-31|
(CONST 0) = %TAN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%TAN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %TAN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%TAN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %COT SIMP-%COT ...)-32|
(CONST 0) = %COT
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%COT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %COT
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%COT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %CSC SIMP-%CSC ...)-33|
(CONST 0) = %CSC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%CSC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %CSC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%CSC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SEC SIMP-%SEC ...)-34|
(CONST 0) = %SEC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%SEC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SEC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%SEC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SINH SIMP-%SINH ...)-35|
(CONST 0) = %SINH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%SINH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SINH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%SINH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %COSH SIMP-%COSH ...)-36|
(CONST 0) = %COSH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%COSH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %COSH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%COSH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %TANH SIMP-%TANH ...)-37|
(CONST 0) = %TANH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%TANH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %TANH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%TANH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %COTH SIMP-%COTH ...)-38|
(CONST 0) = %COTH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%COTH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %COTH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%COTH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %CSCH SIMP-%CSCH ...)-39|
(CONST 0) = %CSCH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%CSCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %CSCH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%CSCH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %SECH SIMP-%SECH ...)-40|
(CONST 0) = %SECH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%SECH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %SECH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%SECH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ASIN SIMP-%ASIN ...)-41|
(CONST 0) = %ASIN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ASIN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ASIN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ASIN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACOS SIMP-%ACOS ...)-42|
(CONST 0) = %ACOS
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACOS
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACOS
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACOS
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ATAN SIMP-%ATAN ...)-43|
(CONST 0) = %ATAN
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ATAN
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ATAN
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ATAN
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACOT SIMP-%ACOT ...)-44|
(CONST 0) = %ACOT
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACOT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACOT
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACOT
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACSC SIMP-%ACSC ...)-45|
(CONST 0) = %ACSC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACSC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACSC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACSC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ASEC SIMP-%ASEC ...)-46|
(CONST 0) = %ASEC
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ASEC
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ASEC
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ASEC
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ASINH SIMP-%ASINH ...)-47|
(CONST 0) = %ASINH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ASINH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ASINH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ASINH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACOSH SIMP-%ACOSH ...)-48|
(CONST 0) = %ACOSH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACOSH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACOSH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACOSH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ATANH SIMP-%ATANH ...)-49|
(CONST 0) = %ATANH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ATANH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ATANH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ATANH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACOTH SIMP-%ACOTH ...)-50|
(CONST 0) = %ACOTH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACOTH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACOTH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACOTH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ACSCH SIMP-%ACSCH ...)-51|
(CONST 0) = %ACSCH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ACSCH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ACSCH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ACSCH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFPROP %ASECH SIMP-%ASECH ...)-52|
(CONST 0) = %ASECH
(CONST 1) = OPERATORS
(CONST 2) = SIMP-%ASECH
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
5 byte-code instructions:
0     (CONST&PUSH 0)                      ; %ASECH
1     (CONST&PUSH 1)                      ; OPERATORS
2     (CONST&PUSH 2)                      ; SIMP-%ASECH
3     (CALLS2 136)                        ; SYSTEM::%PUT
5     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN SIMP-%SIN (FORM Y Z) ...)-53|
(CONST 0) = SIMP-%SIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%SIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%SIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%SIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%SIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%SIN
8     (SKIP&RET 1)


Disassembly of function SIMP-%SIN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = 2.0
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 0
(CONST 11) = $%PI
(CONST 12) = LINEARP
(CONST 13) = %PIARGS-SINCOS
(CONST 14) = $%IARGS
(CONST 15) = $%I
(CONST 16) = MULTIPLEP
(CONST 17) = %SINH
(CONST 18) = 1
(CONST 19) = COEFF
(CONST 20) = SIMPLIFY
(CONST 21) = MUL
(CONST 22) = $TRIGINVERSES
(CONST 23) = %ASIN
(CONST 24) = %ACOS
(CONST 25) = SQRT1-X^2
(CONST 26) = %ATAN
(CONST 27) = SQRT1+X^2
(CONST 28) = DIV
(CONST 29) = %ACOT
(CONST 30) = %ASEC
(CONST 31) = SQRTX^2-1
(CONST 32) = %ACSC
(CONST 33) = $ATAN2
(CONST 34) = SQ-SUMSQ
(CONST 35) = $TRIGEXPAND
(CONST 36) = %SIN
(CONST 37) = TRIGEXPAND
(CONST 38) = $EXPONENTIALIZE
(CONST 39) = EXPONENTIALIZE
(CONST 40) = $HALFANGLES
(CONST 41) = HALFANGLE
(CONST 42) = $TRIGSIGN
(CONST 43) = MMINUSP*
(CONST 44) = NEG
(CONST 45) = (%SIN)
(CONST 46) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
189 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 4)                        ; $NUMER
25    (JMPIFNOT L128)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L128)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 5)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALLS2 161)                        ; SIN
42    (JMP L319)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 7)                           ; $BFLOAT
53    (JMP L319)
56    L56
56    (CONST 10)                          ; 0
57    (JMP L319)
60    L60
60    (CONST&PUSH 15)                     ; $%I
61    (CONST&PUSH 17)                     ; %SINH
62    (LIST&PUSH 1)
64    (GETVALUE&PUSH 1)                   ; Y
66    (CONST&PUSH 15)                     ; $%I
67    (CONST&PUSH 18)                     ; 1
68    (CALL&PUSH 3 19)                    ; COEFF
71    (LIST&PUSH 2)
73    (CALL1&PUSH 20)                     ; SIMPLIFY
75    (CALL2 21)                          ; MUL
77    (JMP L319)
80    L80
80    (GETVALUE 1)                        ; Y
82    (CDR)
83    (CAR)
84    (JMPIF1 L319)
87    (JMP L270)
90    L90
90    (GETVALUE 1)                        ; Y
92    (CDR)
93    (CAR&PUSH)
94    (CALL1 25)                          ; SQRT1-X^2
96    (JMPIF1 L319)
99    (JMP L270)
102   L102
102   (GETVALUE 1)                        ; Y
104   (CDR)
105   (CAR)
106   (JMP L109)
108   L108
108   (CONST 18)                          ; 1
109   L109
109   (PUSH)
110   (GETVALUE 1)                        ; Y
112   (CDR)
113   (CAR&PUSH)
114   (CALL1 27)                          ; SQRT1+X^2
116   (JMP L265)
119   L119
119   (GETVALUE 1)                        ; Y
121   (CDR)
122   (CAR&PUSH)
123   (CALL1 31)                          ; SQRTX^2-1
125   (JMP L213)
128   L128
128   (GETVALUE&PUSH 1)                   ; Y
130   (CALL1&JMPIF 6 L49)                 ; $BFLOATP
134   (GETVALUE 8)                        ; $%PIARGS
136   (JMPIFNOT L157)
138   (GETVALUE&PUSH 1)                   ; Y
140   (CALL1&JMPIF 9 L56)                 ; ZEROP1
144   (GETVALUE&PUSH 1)                   ; Y
146   (CONST&PUSH 11)                     ; $%PI
147   (CALL2&JMPIFNOT 12 L157)            ; LINEARP
150   (GETVALUE&PUSH 1)                   ; Y
152   (CALL1 13)                          ; %PIARGS-SINCOS
154   (JMPIF1 L319)
157   L157
157   (GETVALUE 14)                       ; $%IARGS
159   (JMPIFNOT L168)
161   (GETVALUE&PUSH 1)                   ; Y
163   (CONST&PUSH 15)                     ; $%I
164   (CALL2&JMPIF 16 L60)                ; MULTIPLEP
168   L168
168   (GETVALUE 22)                       ; $TRIGINVERSES
170   (JMPIFNOT L270)
173   (GETVALUE 1)                        ; Y
175   (JMPIFATOM L270)
178   (GETVALUE 1)                        ; Y
180   (CAR)
181   (CAR)
182   (STORE 7)
183   (PUSH)
184   (JMPIFEQTO 23 L80)                  ; %ASIN
188   (LOAD&PUSH 7)
189   (JMPIFEQTO 24 L90)                  ; %ACOS
193   (LOAD&PUSH 7)
194   (JMPIFEQTO 26 L102)                 ; %ATAN
198   (LOAD&PUSH 7)
199   (JMPIFEQTO 29 L108)                 ; %ACOT
203   (LOAD&PUSH 7)
204   (JMPIFEQTO 30 L119)                 ; %ASEC
208   (LOAD&PUSH 7)
209   (JMPIFNOTEQTO 32 L246)              ; %ACSC
212   (CONST 18)                          ; 1
213   L213
213   (PUSH)
214   (GETVALUE 1)                        ; Y
216   (CDR)
217   (CAR)
218   (JMP L265)
220   L220
220   (CONST&PUSH 36)                     ; %SIN
222   (GETVALUE&PUSH 1)                   ; Y
224   (CALL2 39)                          ; EXPONENTIALIZE
226   (JMP L319)
229   L229
229   (CONST&PUSH 36)                     ; %SIN
231   (LIST&PUSH 1)
233   (GETVALUE&PUSH 1)                   ; Y
235   (CALL1&PUSH 44)                     ; NEG
237   (LIST&PUSH 2)
239   (CALL1&PUSH 20)                     ; SIMPLIFY
241   (CALL1 44)                          ; NEG
243   (JMP L319)
246   L246
246   (LOAD&PUSH 7)
247   (JMPIFNOTEQTO 33 L270)              ; $ATAN2
250   (GETVALUE 1)                        ; Y
252   (CDR)
253   (CAR&PUSH)
254   (GETVALUE 1)                        ; Y
256   (CDR)
257   (CAR&PUSH)
258   (GETVALUE 1)                        ; Y
260   (CDR)
261   (CDR)
262   (CAR&PUSH)
263   (CALL2 34)                          ; SQ-SUMSQ
265   L265
265   (PUSH)
266   (CALL2 28)                          ; DIV
268   (JMPIF1 L319)
270   L270
270   (GETVALUE 35)                       ; $TRIGEXPAND
272   (JMPIFNOT L282)
274   (CONST&PUSH 36)                     ; %SIN
276   (GETVALUE&PUSH 1)                   ; Y
278   (CALL2 37)                          ; TRIGEXPAND
280   (JMPIF1 L319)
282   L282
282   (GETVALUE 38)                       ; $EXPONENTIALIZE
284   (JMPIF L220)
287   (GETVALUE 40)                       ; $HALFANGLES
289   (JMPIFNOT L299)
291   (CONST&PUSH 36)                     ; %SIN
293   (GETVALUE&PUSH 1)                   ; Y
295   (CALL2 41)                          ; HALFANGLE
297   (JMPIF1 L319)
299   L299
299   (GETVALUE 42)                       ; $TRIGSIGN
301   (JMPIFNOT L309)
303   (GETVALUE&PUSH 1)                   ; Y
305   (CALL1&JMPIF 43 L229)               ; MMINUSP*
309   L309
309   (CONST&PUSH 45)                     ; (%SIN)
311   (GETVALUE&PUSH 1)                   ; Y
313   (LIST&PUSH 2)
315   (GETVALUE&PUSH 0)                   ; FORM
317   (CALL2 46)                          ; EQTEST
319   L319
319   (UNBIND 2)
321   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMP-%COS (FORM Y Z) ...)-54|
(CONST 0) = SIMP-%COS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%COS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%COS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%COS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%COS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%COS
8     (SKIP&RET 1)


Disassembly of function SIMP-%COS
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = $NUMER
(CONST 5) = 2.0
(CONST 6) = $BFLOATP
(CONST 7) = $BFLOAT
(CONST 8) = $%PIARGS
(CONST 9) = ZEROP1
(CONST 10) = 1
(CONST 11) = $%PI
(CONST 12) = LINEARP
(CONST 13) = %PI//2
(CONST 14) = ADD
(CONST 15) = %PIARGS-SINCOS
(CONST 16) = $%IARGS
(CONST 17) = $%I
(CONST 18) = MULTIPLEP
(CONST 19) = %COSH
(CONST 20) = COEFF
(CONST 21) = SIMPLIFY
(CONST 22) = $TRIGINVERSES
(CONST 23) = %ACOS
(CONST 24) = %ASIN
(CONST 25) = SQRT1-X^2
(CONST 26) = %ATAN
(CONST 27) = SQRT1+X^2
(CONST 28) = DIV
(CONST 29) = %ACOT
(CONST 30) = %ASEC
(CONST 31) = %ACSC
(CONST 32) = SQRTX^2-1
(CONST 33) = $ATAN2
(CONST 34) = SQ-SUMSQ
(CONST 35) = $TRIGEXPAND
(CONST 36) = %COS
(CONST 37) = TRIGEXPAND
(CONST 38) = $EXPONENTIALIZE
(CONST 39) = EXPONENTIALIZE
(CONST 40) = $HALFANGLES
(CONST 41) = HALFANGLE
(CONST 42) = $TRIGSIGN
(CONST 43) = MMINUSP*
(CONST 44) = NEG
(CONST 45) = (%COS)
(CONST 46) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS %PI//2
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
188 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 4)                        ; $NUMER
25    (JMPIFNOT L138)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L138)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 5)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALLS2 162)                        ; COS
42    (JMP L314)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 7)                           ; $BFLOAT
53    (JMP L314)
56    L56
56    (CONST 10)                          ; 1
57    (JMP L314)
60    L60
60    (CONST&PUSH 19)                     ; %COSH
61    (LIST&PUSH 1)
63    (GETVALUE&PUSH 1)                   ; Y
65    (CONST&PUSH 17)                     ; $%I
66    (CONST&PUSH 10)                     ; 1
67    (CALL 3 20)                         ; COEFF
70    (JMP L297)
73    L73
73    (GETVALUE 1)                        ; Y
75    (CDR)
76    (CAR)
77    (JMPIF1 L314)
80    (JMP L251)
83    L83
83    (GETVALUE 1)                        ; Y
85    (CDR)
86    (CAR&PUSH)
87    (CALL1 25)                          ; SQRT1-X^2
89    (JMPIF1 L314)
92    (JMP L251)
95    L95
95    (CONST 10)                          ; 1
96    (JMP L102)
98    L98
98    (GETVALUE 1)                        ; Y
100   (CDR)
101   (CAR)
102   L102
102   (PUSH)
103   (GETVALUE 1)                        ; Y
105   (CDR)
106   (CAR&PUSH)
107   (CALL1 27)                          ; SQRT1+X^2
109   (JMP L246)
112   L112
112   (CONST 10)                          ; 1
113   (JMP L121)
115   L115
115   (GETVALUE 1)                        ; Y
117   (CDR)
118   (CAR&PUSH)
119   (CALL1 32)                          ; SQRTX^2-1
121   L121
121   (PUSH)
122   (GETVALUE 1)                        ; Y
124   (CDR)
125   (CAR)
126   (JMP L246)
129   L129
129   (CONST&PUSH 36)                     ; %COS
131   (GETVALUE&PUSH 1)                   ; Y
133   (CALL2 39)                          ; EXPONENTIALIZE
135   (JMP L314)
138   L138
138   (GETVALUE&PUSH 1)                   ; Y
140   (CALL1&JMPIF 6 L49)                 ; $BFLOATP
144   (GETVALUE 8)                        ; $%PIARGS
146   (JMPIFNOT L171)
148   (GETVALUE&PUSH 1)                   ; Y
150   (CALL1&JMPIF 9 L56)                 ; ZEROP1
154   (GETVALUE&PUSH 1)                   ; Y
156   (CONST&PUSH 11)                     ; $%PI
157   (CALL2&JMPIFNOT 12 L171)            ; LINEARP
160   (GETVALUE&PUSH 13)                  ; %PI//2
162   (GETVALUE&PUSH 1)                   ; Y
164   (CALL2&PUSH 14)                     ; ADD
166   (CALL1 15)                          ; %PIARGS-SINCOS
168   (JMPIF1 L314)
171   L171
171   (GETVALUE 16)                       ; $%IARGS
173   (JMPIFNOT L182)
175   (GETVALUE&PUSH 1)                   ; Y
177   (CONST&PUSH 17)                     ; $%I
178   (CALL2&JMPIF 18 L60)                ; MULTIPLEP
182   L182
182   (GETVALUE 22)                       ; $TRIGINVERSES
184   (JMPIFNOT L251)
187   (GETVALUE 1)                        ; Y
189   (JMPIFATOM L251)
191   (GETVALUE 1)                        ; Y
193   (CAR)
194   (CAR)
195   (STORE 7)
196   (PUSH)
197   (JMPIFEQTO 23 L73)                  ; %ACOS
201   (LOAD&PUSH 7)
202   (JMPIFEQTO 24 L83)                  ; %ASIN
206   (LOAD&PUSH 7)
207   (JMPIFEQTO 26 L95)                  ; %ATAN
211   (LOAD&PUSH 7)
212   (JMPIFEQTO 29 L98)                  ; %ACOT
216   (LOAD&PUSH 7)
217   (JMPIFEQTO 30 L112)                 ; %ASEC
221   (LOAD&PUSH 7)
222   (JMPIFEQTO 31 L115)                 ; %ACSC
226   (LOAD&PUSH 7)
227   (JMPIFNOTEQTO 33 L251)              ; $ATAN2
230   (GETVALUE 1)                        ; Y
232   (CDR)
233   (CDR)
234   (CAR&PUSH)
235   (GETVALUE 1)                        ; Y
237   (CDR)
238   (CAR&PUSH)
239   (GETVALUE 1)                        ; Y
241   (CDR)
242   (CDR)
243   (CAR&PUSH)
244   (CALL2 34)                          ; SQ-SUMSQ
246   L246
246   (PUSH)
247   (CALL2 28)                          ; DIV
249   (JMPIF1 L314)
251   L251
251   (GETVALUE 35)                       ; $TRIGEXPAND
253   (JMPIFNOT L263)
255   (CONST&PUSH 36)                     ; %COS
257   (GETVALUE&PUSH 1)                   ; Y
259   (CALL2 37)                          ; TRIGEXPAND
261   (JMPIF1 L314)
263   L263
263   (GETVALUE 38)                       ; $EXPONENTIALIZE
265   (JMPIF L129)
268   (GETVALUE 40)                       ; $HALFANGLES
270   (JMPIFNOT L280)
272   (CONST&PUSH 36)                     ; %COS
274   (GETVALUE&PUSH 1)                   ; Y
276   (CALL2 41)                          ; HALFANGLE
278   (JMPIF1 L314)
280   L280
280   (GETVALUE 42)                       ; $TRIGSIGN
282   (JMPIFNOT L304)
284   (GETVALUE&PUSH 1)                   ; Y
286   (CALL1&JMPIFNOT 43 L304)            ; MMINUSP*
289   (CONST&PUSH 36)                     ; %COS
291   (LIST&PUSH 1)
293   (GETVALUE&PUSH 1)                   ; Y
295   (CALL1 44)                          ; NEG
297   L297
297   (PUSH)
298   (LIST&PUSH 2)
300   (CALL1 21)                          ; SIMPLIFY
302   (JMP L314)
304   L304
304   (CONST&PUSH 45)                     ; (%COS)
306   (GETVALUE&PUSH 1)                   ; Y
308   (LIST&PUSH 2)
310   (GETVALUE&PUSH 0)                   ; FORM
312   (CALL2 46)                          ; EQTEST
314   L314
314   (UNBIND 2)
316   (SKIP&RET 4)


Disassembly of function #:|(DEFUN %PIARGS-SINCOS (X) ...)-55|
(CONST 0) = %PIARGS-SINCOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %PIARGS-SINCOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PIARGS-SINCOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %PIARGS-SINCOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %PIARGS-SINCOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %PIARGS-SINCOS
8     (SKIP&RET 1)


Disassembly of function %PIARGS-SINCOS
(CONST 0) = X
(CONST 1) = $FLOAT
(CONST 2) = $%PI
(CONST 3) = 1
(CONST 4) = COEFFICIENT
(CONST 5) = LINEARIZE
(CONST 6) = 0
(CONST 7) = ZEROP1
(CONST 8) = %PIARGS
(CONST 9) = MEVENP
(CONST 10) = 2
(CONST 11) = MMOD
(CONST 12) = %SIN
(CONST 13) = SIMPLIFY
(CONST 14) = NEG
(CONST 15) = |1//2|
(CONST 16) = ALIKE1
(CONST 17) = %COS
(CONST 18) = ((RAT) 3 2)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
writes special variable : (X)
74 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; $FLOAT
6     (PUSH-NIL 3)
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 2)                      ; $%PI
11    (CONST&PUSH 3)                      ; 1
12    (CALL 3 4)                          ; COEFFICIENT
15    (STORE 1)
16    (PUSH)
17    (CALL1 5)                           ; LINEARIZE
19    (STORE 2)
20    (GETVALUE&PUSH 0)                   ; X
22    (CONST&PUSH 2)                      ; $%PI
23    (CONST&PUSH 6)                      ; 0
24    (CALL 3 4)                          ; COEFFICIENT
27    (STORE 0)
28    (PUSH)
29    (CALL1&JMPIF 7 L71)                 ; ZEROP1
32    (LOAD&CAR&PUSH 2)
34    (CALL1&JMPIFNOT 9 L77)              ; MEVENP
37    (LOAD&CDR&PUSH 2)
39    (CONST&PUSH 10)                     ; 2
40    (CALL2 11)                          ; MMOD
42    (SETVALUE 0)                        ; X
44    (PUSH)
45    (JMPIFEQTO 6 L80)                   ; 0
48    (GETVALUE&PUSH 0)                   ; X
50    (JMPIFEQTO 3 L83)                   ; 1
53    (GETVALUE&PUSH 15)                  ; |1//2|
55    (GETVALUE&PUSH 0)                   ; X
57    (CALL2&JMPIFNOT 16 L86)             ; ALIKE1
60    (CONST 17)                          ; %COS
61    L61
61    (PUSH)
62    (LIST&PUSH 1)
64    (LOAD&PUSH 1)
65    (LIST&PUSH 2)
67    (CALL1 13)                          ; SIMPLIFY
69    (JMP L106)
71    L71
71    (LOAD&PUSH 2)
72    (LOAD&PUSH 2)
73    (CALL2 8)                           ; %PIARGS
75    (JMP L106)
77    L77
77    (NIL)
78    (JMP L106)
80    L80
80    (CONST 12)                          ; %SIN
81    (JMP L61)
83    L83
83    (CONST 12)                          ; %SIN
84    (JMP L93)
86    L86
86    (CONST&PUSH 18)                     ; ((RAT) 3 2)
87    (GETVALUE&PUSH 0)                   ; X
89    (CALL2&JMPIFNOT 16 L105)            ; ALIKE1
92    (CONST 17)                          ; %COS
93    L93
93    (PUSH)
94    (LIST&PUSH 1)
96    (LOAD&PUSH 1)
97    (LIST&PUSH 2)
99    (CALL1&PUSH 13)                     ; SIMPLIFY
101   (CALL1 14)                          ; NEG
103   (JMP L106)
105   L105
105   (NIL)
106   L106
106   (SKIP 3)
108   (UNBIND 2)
110   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMP-%TAN (FORM Y Z) ...)-56|
(CONST 0) = SIMP-%TAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%TAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%TAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%TAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%TAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%TAN
8     (SKIP&RET 1)


Disassembly of function SIMP-%TAN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = TAN
(CONST 5) = $NUMER
(CONST 6) = 2.0
(CONST 7) = $BFLOATP
(CONST 8) = $BFLOAT
(CONST 9) = $%PIARGS
(CONST 10) = ZEROP1
(CONST 11) = 0
(CONST 12) = $%PI
(CONST 13) = LINEARP
(CONST 14) = %PIARGS-TANCOT
(CONST 15) = $%IARGS
(CONST 16) = $%I
(CONST 17) = MULTIPLEP
(CONST 18) = %TANH
(CONST 19) = 1
(CONST 20) = COEFF
(CONST 21) = SIMPLIFY
(CONST 22) = MUL
(CONST 23) = $TRIGINVERSES
(CONST 24) = %ATAN
(CONST 25) = %ASIN
(CONST 26) = SQRT1-X^2
(CONST 27) = DIV
(CONST 28) = %ACOS
(CONST 29) = %ACOT
(CONST 30) = %ASEC
(CONST 31) = SQRTX^2-1
(CONST 32) = %ACSC
(CONST 33) = $ATAN2
(CONST 34) = $TRIGEXPAND
(CONST 35) = %TAN
(CONST 36) = TRIGEXPAND
(CONST 37) = $EXPONENTIALIZE
(CONST 38) = EXPONENTIALIZE
(CONST 39) = $HALFANGLES
(CONST 40) = HALFANGLE
(CONST 41) = $TRIGSIGN
(CONST 42) = MMINUSP*
(CONST 43) = NEG
(CONST 44) = (%TAN)
(CONST 45) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
186 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 5)                        ; $NUMER
25    (JMPIFNOT L112)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L112)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 6)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALL1 4)                           ; TAN
42    (JMP L314)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 8)                           ; $BFLOAT
53    (JMP L314)
56    L56
56    (CONST 11)                          ; 0
57    (JMP L314)
60    L60
60    (CONST&PUSH 16)                     ; $%I
61    (CONST&PUSH 18)                     ; %TANH
62    (LIST&PUSH 1)
64    (GETVALUE&PUSH 1)                   ; Y
66    (CONST&PUSH 16)                     ; $%I
67    (CONST&PUSH 19)                     ; 1
68    (CALL&PUSH 3 20)                    ; COEFF
71    (LIST&PUSH 2)
73    (CALL1&PUSH 21)                     ; SIMPLIFY
75    (CALL2 22)                          ; MUL
77    (JMP L314)
80    L80
80    (GETVALUE 1)                        ; Y
82    (CDR)
83    (CAR)
84    (JMPIF1 L314)
87    (JMP L265)
90    L90
90    (GETVALUE 1)                        ; Y
92    (CDR)
93    (CAR&PUSH)
94    (GETVALUE 1)                        ; Y
96    (CDR)
97    (CAR&PUSH)
98    (CALL1 26)                          ; SQRT1-X^2
100   (JMP L260)
103   L103
103   (GETVALUE 1)                        ; Y
105   (CDR)
106   (CAR&PUSH)
107   (CALL1 26)                          ; SQRT1-X^2
109   (JMP L187)
112   L112
112   (GETVALUE&PUSH 1)                   ; Y
114   (CALL1&JMPIF 7 L49)                 ; $BFLOATP
118   (GETVALUE 9)                        ; $%PIARGS
120   (JMPIFNOT L141)
122   (GETVALUE&PUSH 1)                   ; Y
124   (CALL1&JMPIF 10 L56)                ; ZEROP1
128   (GETVALUE&PUSH 1)                   ; Y
130   (CONST&PUSH 12)                     ; $%PI
131   (CALL2&JMPIFNOT 13 L141)            ; LINEARP
134   (GETVALUE&PUSH 1)                   ; Y
136   (CALL1 14)                          ; %PIARGS-TANCOT
138   (JMPIF1 L314)
141   L141
141   (GETVALUE 15)                       ; $%IARGS
143   (JMPIFNOT L152)
145   (GETVALUE&PUSH 1)                   ; Y
147   (CONST&PUSH 16)                     ; $%I
148   (CALL2&JMPIF 17 L60)                ; MULTIPLEP
152   L152
152   (GETVALUE 23)                       ; $TRIGINVERSES
154   (JMPIFNOT L265)
157   (GETVALUE 1)                        ; Y
159   (JMPIFATOM L265)
162   (GETVALUE 1)                        ; Y
164   (CAR)
165   (CAR)
166   (STORE 7)
167   (PUSH)
168   (JMPIFEQTO 24 L80)                  ; %ATAN
172   (LOAD&PUSH 7)
173   (JMPIFEQTO 25 L90)                  ; %ASIN
177   (LOAD&PUSH 7)
178   (JMPIFEQTO 28 L103)                 ; %ACOS
182   (LOAD&PUSH 7)
183   (JMPIFNOTEQTO 29 L239)              ; %ACOT
186   (CONST 19)                          ; 1
187   L187
187   (PUSH)
188   (GETVALUE 1)                        ; Y
190   (JMP L258)
193   L193
193   (GETVALUE 1)                        ; Y
195   (CDR)
196   (CAR&PUSH)
197   (CALL1 31)                          ; SQRTX^2-1
199   (JMPIF1 L314)
202   (JMP L265)
204   L204
204   (CONST&PUSH 19)                     ; 1
205   (GETVALUE 1)                        ; Y
207   (CDR)
208   (CAR&PUSH)
209   (CALL1 31)                          ; SQRTX^2-1
211   (JMP L260)
213   L213
213   (CONST&PUSH 35)                     ; %TAN
215   (GETVALUE&PUSH 1)                   ; Y
217   (CALL2 38)                          ; EXPONENTIALIZE
219   (JMP L314)
222   L222
222   (CONST&PUSH 35)                     ; %TAN
224   (LIST&PUSH 1)
226   (GETVALUE&PUSH 1)                   ; Y
228   (CALL1&PUSH 43)                     ; NEG
230   (LIST&PUSH 2)
232   (CALL1&PUSH 21)                     ; SIMPLIFY
234   (CALL1 43)                          ; NEG
236   (JMP L314)
239   L239
239   (LOAD&PUSH 7)
240   (JMPIFEQTO 30 L193)                 ; %ASEC
243   (LOAD&PUSH 7)
244   (JMPIFEQTO 32 L204)                 ; %ACSC
247   (LOAD&PUSH 7)
248   (JMPIFNOTEQTO 33 L265)              ; $ATAN2
251   (GETVALUE 1)                        ; Y
253   (CDR)
254   (CAR&PUSH)
255   (GETVALUE 1)                        ; Y
257   (CDR)
258   L258
258   (CDR)
259   (CAR)
260   L260
260   (PUSH)
261   (CALL2 27)                          ; DIV
263   (JMPIF1 L314)
265   L265
265   (GETVALUE 34)                       ; $TRIGEXPAND
267   (JMPIFNOT L277)
269   (CONST&PUSH 35)                     ; %TAN
271   (GETVALUE&PUSH 1)                   ; Y
273   (CALL2 36)                          ; TRIGEXPAND
275   (JMPIF1 L314)
277   L277
277   (GETVALUE 37)                       ; $EXPONENTIALIZE
279   (JMPIF L213)
282   (GETVALUE 39)                       ; $HALFANGLES
284   (JMPIFNOT L294)
286   (CONST&PUSH 35)                     ; %TAN
288   (GETVALUE&PUSH 1)                   ; Y
290   (CALL2 40)                          ; HALFANGLE
292   (JMPIF1 L314)
294   L294
294   (GETVALUE 41)                       ; $TRIGSIGN
296   (JMPIFNOT L304)
298   (GETVALUE&PUSH 1)                   ; Y
300   (CALL1&JMPIF 42 L222)               ; MMINUSP*
304   L304
304   (CONST&PUSH 44)                     ; (%TAN)
306   (GETVALUE&PUSH 1)                   ; Y
308   (LIST&PUSH 2)
310   (GETVALUE&PUSH 0)                   ; FORM
312   (CALL2 45)                          ; EQTEST
314   L314
314   (UNBIND 2)
316   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMP-%COT (FORM Y Z) ...)-57|
(CONST 0) = SIMP-%COT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%COT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%COT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%COT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%COT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%COT
8     (SKIP&RET 1)


Disassembly of function SIMP-%COT
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = COT
(CONST 5) = $NUMER
(CONST 6) = 2.0
(CONST 7) = $BFLOATP
(CONST 8) = $BFLOAT
(CONST 9) = $%PIARGS
(CONST 10) = ZEROP1
(CONST 11) = DBZ-ERR1
(CONST 12) = $%PI
(CONST 13) = LINEARP
(CONST 14) = %PI//2
(CONST 15) = ADD
(CONST 16) = %PIARGS-TANCOT
(CONST 17) = NEG
(CONST 18) = $%IARGS
(CONST 19) = $%I
(CONST 20) = MULTIPLEP
(CONST 21) = -1
(CONST 22) = %COTH
(CONST 23) = 1
(CONST 24) = COEFF
(CONST 25) = SIMPLIFY
(CONST 26) = MUL
(CONST 27) = $TRIGINVERSES
(CONST 28) = %ACOT
(CONST 29) = %ASIN
(CONST 30) = SQRT1-X^2
(CONST 31) = DIV
(CONST 32) = %ACOS
(CONST 33) = %ATAN
(CONST 34) = %ASEC
(CONST 35) = SQRTX^2-1
(CONST 36) = %ACSC
(CONST 37) = $ATAN2
(CONST 38) = $TRIGEXPAND
(CONST 39) = %COT
(CONST 40) = TRIGEXPAND
(CONST 41) = $EXPONENTIALIZE
(CONST 42) = EXPONENTIALIZE
(CONST 43) = $HALFANGLES
(CONST 44) = HALFANGLE
(CONST 45) = $TRIGSIGN
(CONST 46) = MMINUSP*
(CONST 47) = (%COT)
(CONST 48) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS %PI//2
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
193 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 5)                        ; $NUMER
25    (JMPIFNOT L172)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L172)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 6)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALL1 4)                           ; COT
42    (JMP L333)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 8)                           ; $BFLOAT
53    (JMP L333)
56    L56
56    (CONST&PUSH 4)                      ; COT
57    (CALL1 11)                          ; DBZ-ERR1
59    (JMPIF1 L333)
62    (JMP L211)
65    L65
65    (CONST&PUSH 21)                     ; -1
66    (CONST&PUSH 19)                     ; $%I
67    (CONST&PUSH 22)                     ; %COTH
68    (LIST&PUSH 1)
70    (GETVALUE&PUSH 1)                   ; Y
72    (CONST&PUSH 19)                     ; $%I
73    (CONST&PUSH 23)                     ; 1
74    (CALL&PUSH 3 24)                    ; COEFF
77    (LIST&PUSH 2)
79    (CALL1&PUSH 25)                     ; SIMPLIFY
81    (CALL 3 26)                         ; MUL
84    (JMP L333)
87    L87
87    (GETVALUE 1)                        ; Y
89    (CDR)
90    (CAR)
91    (JMPIF1 L333)
94    (JMP L284)
97    L97
97    (GETVALUE 1)                        ; Y
99    (CDR)
100   (CAR&PUSH)
101   (CALL1 30)                          ; SQRT1-X^2
103   (JMP L274)
106   L106
106   (GETVALUE 1)                        ; Y
108   (CDR)
109   (CAR&PUSH)
110   (GETVALUE 1)                        ; Y
112   (CDR)
113   (CAR&PUSH)
114   (CALL1 30)                          ; SQRT1-X^2
116   (JMP L279)
119   L119
119   (CONST 23)                          ; 1
121   (JMP L274)
124   L124
124   (CONST&PUSH 23)                     ; 1
125   (GETVALUE 1)                        ; Y
127   (CDR)
128   (CAR&PUSH)
129   (CALL1 35)                          ; SQRTX^2-1
131   (JMP L279)
134   L134
134   (GETVALUE 1)                        ; Y
136   (CDR)
137   (CAR&PUSH)
138   (CALL1 35)                          ; SQRTX^2-1
140   (JMPIF1 L333)
143   (JMP L284)
146   L146
146   (CONST&PUSH 39)                     ; %COT
148   (GETVALUE&PUSH 1)                   ; Y
150   (CALL2 42)                          ; EXPONENTIALIZE
152   (JMP L333)
155   L155
155   (CONST&PUSH 39)                     ; %COT
157   (LIST&PUSH 1)
159   (GETVALUE&PUSH 1)                   ; Y
161   (CALL1&PUSH 17)                     ; NEG
163   (LIST&PUSH 2)
165   (CALL1&PUSH 25)                     ; SIMPLIFY
167   (CALL1 17)                          ; NEG
169   (JMP L333)
172   L172
172   (GETVALUE&PUSH 1)                   ; Y
174   (CALL1&JMPIF 7 L49)                 ; $BFLOATP
178   (GETVALUE 9)                        ; $%PIARGS
180   (JMPIFNOT L211)
182   (GETVALUE&PUSH 1)                   ; Y
184   (CALL1&JMPIF 10 L56)                ; ZEROP1
188   (GETVALUE&PUSH 1)                   ; Y
190   (CONST&PUSH 12)                     ; $%PI
191   (CALL2&JMPIFNOT 13 L211)            ; LINEARP
194   (GETVALUE&PUSH 14)                  ; %PI//2
196   (GETVALUE&PUSH 1)                   ; Y
198   (CALL2&PUSH 15)                     ; ADD
200   (CALL1 16)                          ; %PIARGS-TANCOT
202   (STORE 7)
203   (JMPIFNOT L211)
205   (LOAD&PUSH 7)
206   (CALL1 17)                          ; NEG
208   (JMPIF1 L333)
211   L211
211   (GETVALUE 18)                       ; $%IARGS
213   (JMPIFNOT L222)
215   (GETVALUE&PUSH 1)                   ; Y
217   (CONST&PUSH 19)                     ; $%I
218   (CALL2&JMPIF 20 L65)                ; MULTIPLEP
222   L222
222   (GETVALUE 27)                       ; $TRIGINVERSES
224   (JMPIFNOT L284)
226   (GETVALUE 1)                        ; Y
228   (JMPIFATOM L284)
230   (GETVALUE 1)                        ; Y
232   (CAR)
233   (CAR)
234   (STORE 7)
235   (PUSH)
236   (JMPIFEQTO 28 L87)                  ; %ACOT
240   (LOAD&PUSH 7)
241   (JMPIFEQTO 29 L97)                  ; %ASIN
245   (LOAD&PUSH 7)
246   (JMPIFEQTO 32 L106)                 ; %ACOS
250   (LOAD&PUSH 7)
251   (JMPIFEQTO 33 L119)                 ; %ATAN
255   (LOAD&PUSH 7)
256   (JMPIFEQTO 34 L124)                 ; %ASEC
260   (LOAD&PUSH 7)
261   (JMPIFEQTO 36 L134)                 ; %ACSC
265   (LOAD&PUSH 7)
266   (JMPIFNOTEQTO 37 L284)              ; $ATAN2
269   (GETVALUE 1)                        ; Y
271   (CDR)
272   (CDR)
273   (CAR)
274   L274
274   (PUSH)
275   (GETVALUE 1)                        ; Y
277   (CDR)
278   (CAR)
279   L279
279   (PUSH)
280   (CALL2 31)                          ; DIV
282   (JMPIF1 L333)
284   L284
284   (GETVALUE 38)                       ; $TRIGEXPAND
286   (JMPIFNOT L296)
288   (CONST&PUSH 39)                     ; %COT
290   (GETVALUE&PUSH 1)                   ; Y
292   (CALL2 40)                          ; TRIGEXPAND
294   (JMPIF1 L333)
296   L296
296   (GETVALUE 41)                       ; $EXPONENTIALIZE
298   (JMPIF L146)
301   (GETVALUE 43)                       ; $HALFANGLES
303   (JMPIFNOT L313)
305   (CONST&PUSH 39)                     ; %COT
307   (GETVALUE&PUSH 1)                   ; Y
309   (CALL2 44)                          ; HALFANGLE
311   (JMPIF1 L333)
313   L313
313   (GETVALUE 45)                       ; $TRIGSIGN
315   (JMPIFNOT L323)
317   (GETVALUE&PUSH 1)                   ; Y
319   (CALL1&JMPIF 46 L155)               ; MMINUSP*
323   L323
323   (CONST&PUSH 47)                     ; (%COT)
325   (GETVALUE&PUSH 1)                   ; Y
327   (LIST&PUSH 2)
329   (GETVALUE&PUSH 0)                   ; FORM
331   (CALL2 48)                          ; EQTEST
333   L333
333   (UNBIND 2)
335   (SKIP&RET 4)


Disassembly of function #:|(DEFUN %PIARGS-TANCOT (X) ...)-58|
(CONST 0) = %PIARGS-TANCOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %PIARGS-TANCOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PIARGS-TANCOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %PIARGS-TANCOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %PIARGS-TANCOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %PIARGS-TANCOT
8     (SKIP&RET 1)


Disassembly of function %PIARGS-TANCOT
(CONST 0) = X
(CONST 1) = $FLOAT
(CONST 2) = $%PI
(CONST 3) = 1
(CONST 4) = COEFFICIENT
(CONST 5) = LINEARIZE
(CONST 6) = 0
(CONST 7) = ZEROP1
(CONST 8) = %PIARGS
(CONST 9) = |1//2|
(CONST 10) = RPLUS
(CONST 11) = DIV
(CONST 12) = MEVENP
(CONST 13) = 2
(CONST 14) = MMOD
(CONST 15) = %TAN
(CONST 16) = SIMPLIFY
(CONST 17) = ALIKE1
(CONST 18) = ((RAT) 3 2)
(CONST 19) = %COT
(CONST 20) = NEG
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
writes special variable : (X)
75 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; $FLOAT
6     (PUSH-NIL 2)
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 2)                      ; $%PI
11    (CONST&PUSH 3)                      ; 1
12    (CALL&PUSH 3 4)                     ; COEFFICIENT
15    (CALL1 5)                           ; LINEARIZE
17    (STORE 1)
18    (GETVALUE&PUSH 0)                   ; X
20    (CONST&PUSH 2)                      ; $%PI
21    (CONST&PUSH 6)                      ; 0
22    (CALL 3 4)                          ; COEFFICIENT
25    (STORE 0)
26    (PUSH)
27    (CALL1&JMPIFNOT 7 L52)              ; ZEROP1
30    (LOAD&PUSH 1)
31    (NIL&PUSH)
32    (CALL2 8)                           ; %PIARGS
34    (STORE 0)
35    (JMPIFNOT L52)
37    (LOAD&CAR&PUSH 1)
39    (GETVALUE&PUSH 9)                   ; |1//2|
41    (LOAD&CDR&PUSH 3)
43    (CALL2 10)                          ; RPLUS
45    (CONS&PUSH)
46    (NIL&PUSH)
47    (CALL2 8)                           ; %PIARGS
49    (STORE 1)
50    (JMPIF L88)
52    L52
52    (LOAD&CAR&PUSH 1)
54    (CALL1&JMPIFNOT 12 L94)             ; MEVENP
57    (LOAD&CDR&PUSH 1)
59    (CONST&PUSH 13)                     ; 2
60    (CALL2 14)                          ; MMOD
62    (SETVALUE 0)                        ; X
64    (PUSH)
65    (CALLS2&JMPIF 12 L97)               ; INTEGERP
68    (GETVALUE&PUSH 9)                   ; |1//2|
70    (GETVALUE&PUSH 0)                   ; X
72    (CALL2&JMPIF 17 L107)               ; ALIKE1
75    (CONST&PUSH 18)                     ; ((RAT) 3 2)
76    (GETVALUE&PUSH 0)                   ; X
78    (CALL2&JMPIF 17 L107)               ; ALIKE1
81    (NIL)
82    L82
82    (SKIP 2)
84    (UNBIND 2)
86    (SKIP&RET 2)
88    L88
88    (LOAD&PUSH 0)
89    (LOAD&PUSH 2)
90    (CALL2 11)                          ; DIV
92    (JMP L82)
94    L94
94    (NIL)
95    (JMP L82)
97    L97
97    (CONST&PUSH 15)                     ; %TAN
98    (LIST&PUSH 1)
100   (LOAD&PUSH 1)
101   (LIST&PUSH 2)
103   (CALL1 16)                          ; SIMPLIFY
105   (JMP L82)
107   L107
107   (CONST&PUSH 19)                     ; %COT
108   (LIST&PUSH 1)
110   (LOAD&PUSH 1)
111   (LIST&PUSH 2)
113   (CALL1&PUSH 16)                     ; SIMPLIFY
115   (CALL1 20)                          ; NEG
117   (JMP L82)


Disassembly of function #:|(DEFMFUN SIMP-%CSC (FORM Y Z) ...)-59|
(CONST 0) = SIMP-%CSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%CSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%CSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%CSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%CSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%CSC
8     (SKIP&RET 1)


Disassembly of function SIMP-%CSC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = CSC
(CONST 5) = $NUMER
(CONST 6) = 2.0
(CONST 7) = $BFLOATP
(CONST 8) = $BFLOAT
(CONST 9) = $%PIARGS
(CONST 10) = ZEROP1
(CONST 11) = DBZ-ERR1
(CONST 12) = $%PI
(CONST 13) = LINEARP
(CONST 14) = %PIARGS-CSCSEC
(CONST 15) = $%IARGS
(CONST 16) = $%I
(CONST 17) = MULTIPLEP
(CONST 18) = -1
(CONST 19) = %CSCH
(CONST 20) = 1
(CONST 21) = COEFF
(CONST 22) = SIMPLIFY
(CONST 23) = MUL
(CONST 24) = $TRIGINVERSES
(CONST 25) = %ACSC
(CONST 26) = %ASIN
(CONST 27) = DIV
(CONST 28) = %ACOS
(CONST 29) = SQRT1-X^2
(CONST 30) = %ATAN
(CONST 31) = SQRT1+X^2
(CONST 32) = %ACOT
(CONST 33) = %ASEC
(CONST 34) = SQRTX^2-1
(CONST 35) = $ATAN2
(CONST 36) = SQ-SUMSQ
(CONST 37) = $TRIGEXPAND
(CONST 38) = %CSC
(CONST 39) = TRIGEXPAND
(CONST 40) = $EXPONENTIALIZE
(CONST 41) = EXPONENTIALIZE
(CONST 42) = $HALFANGLES
(CONST 43) = HALFANGLE
(CONST 44) = $TRIGSIGN
(CONST 45) = MMINUSP*
(CONST 46) = NEG
(CONST 47) = (%CSC)
(CONST 48) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
191 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 5)                        ; $NUMER
25    (JMPIFNOT L171)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L171)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 6)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALL1 4)                           ; CSC
42    (JMP L329)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 8)                           ; $BFLOAT
53    (JMP L329)
56    L56
56    (CONST&PUSH 4)                      ; CSC
57    (CALL1 11)                          ; DBZ-ERR1
59    (JMPIF1 L329)
62    (JMP L200)
65    L65
65    (CONST&PUSH 18)                     ; -1
66    (CONST&PUSH 16)                     ; $%I
67    (CONST&PUSH 19)                     ; %CSCH
68    (LIST&PUSH 1)
70    (GETVALUE&PUSH 1)                   ; Y
72    (CONST&PUSH 16)                     ; $%I
73    (CONST&PUSH 20)                     ; 1
74    (CALL&PUSH 3 21)                    ; COEFF
77    (LIST&PUSH 2)
79    (CALL1&PUSH 22)                     ; SIMPLIFY
81    (CALL 3 23)                         ; MUL
84    (JMP L329)
87    L87
87    (GETVALUE 1)                        ; Y
89    (CDR)
90    (CAR)
91    (JMPIF1 L329)
94    (JMP L280)
97    L97
97    (CONST 20)                          ; 1
98    (JMP L270)
101   L101
101   (CONST&PUSH 20)                     ; 1
102   (GETVALUE 1)                        ; Y
104   (CDR)
105   (CAR&PUSH)
106   (CALL1 29)                          ; SQRT1-X^2
108   (JMP L275)
111   L111
111   (GETVALUE 1)                        ; Y
113   (CDR)
114   (CAR&PUSH)
115   (CALL1 31)                          ; SQRT1+X^2
117   (JMP L270)
120   L120
120   (GETVALUE 1)                        ; Y
122   (CDR)
123   (CAR&PUSH)
124   (CALL1 31)                          ; SQRT1+X^2
126   (JMPIF1 L329)
129   (JMP L280)
132   L132
132   (GETVALUE 1)                        ; Y
134   (CDR)
135   (CAR&PUSH)
136   (GETVALUE 1)                        ; Y
138   (CDR)
139   (CAR&PUSH)
140   (CALL1 34)                          ; SQRTX^2-1
142   (JMP L275)
145   L145
145   (CONST&PUSH 38)                     ; %CSC
147   (GETVALUE&PUSH 1)                   ; Y
149   (CALL2 41)                          ; EXPONENTIALIZE
151   (JMP L329)
154   L154
154   (CONST&PUSH 38)                     ; %CSC
156   (LIST&PUSH 1)
158   (GETVALUE&PUSH 1)                   ; Y
160   (CALL1&PUSH 46)                     ; NEG
162   (LIST&PUSH 2)
164   (CALL1&PUSH 22)                     ; SIMPLIFY
166   (CALL1 46)                          ; NEG
168   (JMP L329)
171   L171
171   (GETVALUE&PUSH 1)                   ; Y
173   (CALL1&JMPIF 7 L49)                 ; $BFLOATP
177   (GETVALUE 9)                        ; $%PIARGS
179   (JMPIFNOT L200)
181   (GETVALUE&PUSH 1)                   ; Y
183   (CALL1&JMPIF 10 L56)                ; ZEROP1
187   (GETVALUE&PUSH 1)                   ; Y
189   (CONST&PUSH 12)                     ; $%PI
190   (CALL2&JMPIFNOT 13 L200)            ; LINEARP
193   (GETVALUE&PUSH 1)                   ; Y
195   (CALL1 14)                          ; %PIARGS-CSCSEC
197   (JMPIF1 L329)
200   L200
200   (GETVALUE 15)                       ; $%IARGS
202   (JMPIFNOT L211)
204   (GETVALUE&PUSH 1)                   ; Y
206   (CONST&PUSH 16)                     ; $%I
207   (CALL2&JMPIF 17 L65)                ; MULTIPLEP
211   L211
211   (GETVALUE 24)                       ; $TRIGINVERSES
213   (JMPIFNOT L280)
216   (GETVALUE 1)                        ; Y
218   (JMPIFATOM L280)
220   (GETVALUE 1)                        ; Y
222   (CAR)
223   (CAR)
224   (STORE 7)
225   (PUSH)
226   (JMPIFEQTO 25 L87)                  ; %ACSC
230   (LOAD&PUSH 7)
231   (JMPIFEQTO 26 L97)                  ; %ASIN
235   (LOAD&PUSH 7)
236   (JMPIFEQTO 28 L101)                 ; %ACOS
240   (LOAD&PUSH 7)
241   (JMPIFEQTO 30 L111)                 ; %ATAN
245   (LOAD&PUSH 7)
246   (JMPIFEQTO 32 L120)                 ; %ACOT
250   (LOAD&PUSH 7)
251   (JMPIFEQTO 33 L132)                 ; %ASEC
255   (LOAD&PUSH 7)
256   (JMPIFNOTEQTO 35 L280)              ; $ATAN2
259   (GETVALUE 1)                        ; Y
261   (CDR)
262   (CAR&PUSH)
263   (GETVALUE 1)                        ; Y
265   (CDR)
266   (CDR)
267   (CAR&PUSH)
268   (CALL2 36)                          ; SQ-SUMSQ
270   L270
270   (PUSH)
271   (GETVALUE 1)                        ; Y
273   (CDR)
274   (CAR)
275   L275
275   (PUSH)
276   (CALL2 27)                          ; DIV
278   (JMPIF1 L329)
280   L280
280   (GETVALUE 37)                       ; $TRIGEXPAND
282   (JMPIFNOT L292)
284   (CONST&PUSH 38)                     ; %CSC
286   (GETVALUE&PUSH 1)                   ; Y
288   (CALL2 39)                          ; TRIGEXPAND
290   (JMPIF1 L329)
292   L292
292   (GETVALUE 40)                       ; $EXPONENTIALIZE
294   (JMPIF L145)
297   (GETVALUE 42)                       ; $HALFANGLES
299   (JMPIFNOT L309)
301   (CONST&PUSH 38)                     ; %CSC
303   (GETVALUE&PUSH 1)                   ; Y
305   (CALL2 43)                          ; HALFANGLE
307   (JMPIF1 L329)
309   L309
309   (GETVALUE 44)                       ; $TRIGSIGN
311   (JMPIFNOT L319)
313   (GETVALUE&PUSH 1)                   ; Y
315   (CALL1&JMPIF 45 L154)               ; MMINUSP*
319   L319
319   (CONST&PUSH 47)                     ; (%CSC)
321   (GETVALUE&PUSH 1)                   ; Y
323   (LIST&PUSH 2)
325   (GETVALUE&PUSH 0)                   ; FORM
327   (CALL2 48)                          ; EQTEST
329   L329
329   (UNBIND 2)
331   (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN SIMP-%SEC (FORM Y Z) ...)-60|
(CONST 0) = SIMP-%SEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%SEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%SEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%SEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%SEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%SEC
8     (SKIP&RET 1)


Disassembly of function SIMP-%SEC
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = SEC
(CONST 5) = $NUMER
(CONST 6) = 2.0
(CONST 7) = $BFLOATP
(CONST 8) = $BFLOAT
(CONST 9) = $%PIARGS
(CONST 10) = ZEROP1
(CONST 11) = 1
(CONST 12) = $%PI
(CONST 13) = LINEARP
(CONST 14) = %PI//2
(CONST 15) = ADD
(CONST 16) = %PIARGS-CSCSEC
(CONST 17) = $%IARGS
(CONST 18) = $%I
(CONST 19) = MULTIPLEP
(CONST 20) = %SECH
(CONST 21) = COEFF
(CONST 22) = SIMPLIFY
(CONST 23) = $TRIGINVERSES
(CONST 24) = %ASEC
(CONST 25) = %ASIN
(CONST 26) = SQRT1-X^2
(CONST 27) = DIV
(CONST 28) = %ACOS
(CONST 29) = %ATAN
(CONST 30) = SQRT1+X^2
(CONST 31) = %ACOT
(CONST 32) = %ACSC
(CONST 33) = SQRTX^2-1
(CONST 34) = $ATAN2
(CONST 35) = SQ-SUMSQ
(CONST 36) = $TRIGEXPAND
(CONST 37) = %SEC
(CONST 38) = TRIGEXPAND
(CONST 39) = $EXPONENTIALIZE
(CONST 40) = EXPONENTIALIZE
(CONST 41) = $HALFANGLES
(CONST 42) = HALFANGLE
(CONST 43) = $TRIGSIGN
(CONST 44) = MMINUSP*
(CONST 45) = NEG
(CONST 46) = (%SEC)
(CONST 47) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: 
($TRIGSIGN $HALFANGLES $EXPONENTIALIZE $TRIGEXPAND $TRIGINVERSES $%IARGS %PI//2
 $%PIARGS Y $NUMER FORM)
writes special variable : (Y)
189 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 5)                        ; $NUMER
25    (JMPIFNOT L142)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L142)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 6)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALL1 4)                           ; SEC
42    (JMP L318)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 8)                           ; $BFLOAT
53    (JMP L318)
56    L56
56    (CONST 11)                          ; 1
57    (JMP L318)
60    L60
60    (CONST&PUSH 20)                     ; %SECH
61    (LIST&PUSH 1)
63    (GETVALUE&PUSH 1)                   ; Y
65    (CONST&PUSH 18)                     ; $%I
66    (CONST&PUSH 11)                     ; 1
67    (CALL 3 21)                         ; COEFF
70    (JMP L301)
73    L73
73    (GETVALUE 1)                        ; Y
75    (CDR)
76    (CAR)
77    (JMPIF1 L318)
80    (JMP L255)
83    L83
83    (CONST&PUSH 11)                     ; 1
84    (GETVALUE 1)                        ; Y
86    (CDR)
87    (CAR&PUSH)
88    (CALL1 26)                          ; SQRT1-X^2
90    (JMP L250)
93    L93
93    (CONST 11)                          ; 1
94    (JMP L114)
96    L96
96    (GETVALUE 1)                        ; Y
98    (CDR)
99    (CAR&PUSH)
100   (CALL1 30)                          ; SQRT1+X^2
102   (JMPIF1 L318)
105   (JMP L255)
108   L108
108   (GETVALUE 1)                        ; Y
110   (CDR)
111   (CAR&PUSH)
112   (CALL1 30)                          ; SQRT1+X^2
114   L114
114   (PUSH)
115   (GETVALUE 1)                        ; Y
117   (JMP L248)
120   L120
120   (GETVALUE 1)                        ; Y
122   (CDR)
123   (CAR&PUSH)
124   (GETVALUE 1)                        ; Y
126   (CDR)
127   (CAR&PUSH)
128   (CALL1 33)                          ; SQRTX^2-1
130   (JMP L250)
133   L133
133   (CONST&PUSH 37)                     ; %SEC
135   (GETVALUE&PUSH 1)                   ; Y
137   (CALL2 40)                          ; EXPONENTIALIZE
139   (JMP L318)
142   L142
142   (GETVALUE&PUSH 1)                   ; Y
144   (CALL1&JMPIF 7 L49)                 ; $BFLOATP
148   (GETVALUE 9)                        ; $%PIARGS
150   (JMPIFNOT L175)
152   (GETVALUE&PUSH 1)                   ; Y
154   (CALL1&JMPIF 10 L56)                ; ZEROP1
158   (GETVALUE&PUSH 1)                   ; Y
160   (CONST&PUSH 12)                     ; $%PI
161   (CALL2&JMPIFNOT 13 L175)            ; LINEARP
164   (GETVALUE&PUSH 14)                  ; %PI//2
166   (GETVALUE&PUSH 1)                   ; Y
168   (CALL2&PUSH 15)                     ; ADD
170   (CALL1 16)                          ; %PIARGS-CSCSEC
172   (JMPIF1 L318)
175   L175
175   (GETVALUE 17)                       ; $%IARGS
177   (JMPIFNOT L186)
179   (GETVALUE&PUSH 1)                   ; Y
181   (CONST&PUSH 18)                     ; $%I
182   (CALL2&JMPIF 19 L60)                ; MULTIPLEP
186   L186
186   (GETVALUE 23)                       ; $TRIGINVERSES
188   (JMPIFNOT L255)
191   (GETVALUE 1)                        ; Y
193   (JMPIFATOM L255)
195   (GETVALUE 1)                        ; Y
197   (CAR)
198   (CAR)
199   (STORE 7)
200   (PUSH)
201   (JMPIFEQTO 24 L73)                  ; %ASEC
205   (LOAD&PUSH 7)
206   (JMPIFEQTO 25 L83)                  ; %ASIN
210   (LOAD&PUSH 7)
211   (JMPIFEQTO 28 L93)                  ; %ACOS
215   (LOAD&PUSH 7)
216   (JMPIFEQTO 29 L96)                  ; %ATAN
220   (LOAD&PUSH 7)
221   (JMPIFEQTO 31 L108)                 ; %ACOT
225   (LOAD&PUSH 7)
226   (JMPIFEQTO 32 L120)                 ; %ACSC
230   (LOAD&PUSH 7)
231   (JMPIFNOTEQTO 34 L255)              ; $ATAN2
234   (GETVALUE 1)                        ; Y
236   (CDR)
237   (CAR&PUSH)
238   (GETVALUE 1)                        ; Y
240   (CDR)
241   (CDR)
242   (CAR&PUSH)
243   (CALL2&PUSH 35)                     ; SQ-SUMSQ
245   (GETVALUE 1)                        ; Y
247   (CDR)
248   L248
248   (CDR)
249   (CAR)
250   L250
250   (PUSH)
251   (CALL2 27)                          ; DIV
253   (JMPIF1 L318)
255   L255
255   (GETVALUE 36)                       ; $TRIGEXPAND
257   (JMPIFNOT L267)
259   (CONST&PUSH 37)                     ; %SEC
261   (GETVALUE&PUSH 1)                   ; Y
263   (CALL2 38)                          ; TRIGEXPAND
265   (JMPIF1 L318)
267   L267
267   (GETVALUE 39)                       ; $EXPONENTIALIZE
269   (JMPIF L133)
272   (GETVALUE 41)                       ; $HALFANGLES
274   (JMPIFNOT L284)
276   (CONST&PUSH 37)                     ; %SEC
278   (GETVALUE&PUSH 1)                   ; Y
280   (CALL2 42)                          ; HALFANGLE
282   (JMPIF1 L318)
284   L284
284   (GETVALUE 43)                       ; $TRIGSIGN
286   (JMPIFNOT L308)
288   (GETVALUE&PUSH 1)                   ; Y
290   (CALL1&JMPIFNOT 44 L308)            ; MMINUSP*
293   (CONST&PUSH 37)                     ; %SEC
295   (LIST&PUSH 1)
297   (GETVALUE&PUSH 1)                   ; Y
299   (CALL1 45)                          ; NEG
301   L301
301   (PUSH)
302   (LIST&PUSH 2)
304   (CALL1 22)                          ; SIMPLIFY
306   (JMP L318)
308   L308
308   (CONST&PUSH 46)                     ; (%SEC)
310   (GETVALUE&PUSH 1)                   ; Y
312   (LIST&PUSH 2)
314   (GETVALUE&PUSH 0)                   ; FORM
316   (CALL2 47)                          ; EQTEST
318   L318
318   (UNBIND 2)
320   (SKIP&RET 4)


Disassembly of function #:|(DEFUN %PIARGS-CSCSEC (X) ...)-61|
(CONST 0) = %PIARGS-CSCSEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %PIARGS-CSCSEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PIARGS-CSCSEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %PIARGS-CSCSEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %PIARGS-CSCSEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %PIARGS-CSCSEC
8     (SKIP&RET 1)


Disassembly of function %PIARGS-CSCSEC
(CONST 0) = X
(CONST 1) = $FLOAT
(CONST 2) = $%PI
(CONST 3) = 1
(CONST 4) = COEFFICIENT
(CONST 5) = LINEARIZE
(CONST 6) = 0
(CONST 7) = ZEROP1
(CONST 8) = %PIARGS
(CONST 9) = DIV
(CONST 10) = MEVENP
(CONST 11) = 2
(CONST 12) = MMOD
(CONST 13) = %CSC
(CONST 14) = SIMPLIFY
(CONST 15) = NEG
(CONST 16) = |1//2|
(CONST 17) = ALIKE1
(CONST 18) = %SEC
(CONST 19) = ((RAT) 3 2)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|1//2| X)
writes special variable : (X)
78 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; $FLOAT
6     (PUSH-NIL 2)
8     (GETVALUE&PUSH 0)                   ; X
10    (CONST&PUSH 2)                      ; $%PI
11    (CONST&PUSH 3)                      ; 1
12    (CALL&PUSH 3 4)                     ; COEFFICIENT
15    (CALL1 5)                           ; LINEARIZE
17    (STORE 1)
18    (GETVALUE&PUSH 0)                   ; X
20    (CONST&PUSH 2)                      ; $%PI
21    (CONST&PUSH 6)                      ; 0
22    (CALL 3 4)                          ; COEFFICIENT
25    (STORE 0)
26    (PUSH)
27    (CALL1&JMPIFNOT 7 L37)              ; ZEROP1
30    (LOAD&PUSH 1)
31    (NIL&PUSH)
32    (CALL2 8)                           ; %PIARGS
34    (STORE 0)
35    (JMPIF L76)
37    L37
37    (LOAD&CAR&PUSH 1)
39    (CALL1&JMPIFNOT 10 L82)             ; MEVENP
42    (LOAD&CDR&PUSH 1)
44    (CONST&PUSH 11)                     ; 2
45    (CALL2 12)                          ; MMOD
47    (SETVALUE 0)                        ; X
49    (PUSH)
50    (JMPIFEQTO 6 L85)                   ; 0
53    (GETVALUE&PUSH 0)                   ; X
55    (JMPIFEQTO 3 L88)                   ; 1
58    (GETVALUE&PUSH 16)                  ; |1//2|
60    (GETVALUE&PUSH 0)                   ; X
62    (CALL2&JMPIFNOT 17 L91)             ; ALIKE1
65    (CONST 18)                          ; %SEC
66    L66
66    (PUSH)
67    (LIST&PUSH 1)
69    (LOAD&PUSH 1)
70    (LIST&PUSH 2)
72    (CALL1 14)                          ; SIMPLIFY
74    (JMP L111)
76    L76
76    (CONST&PUSH 3)                      ; 1
77    (LOAD&PUSH 1)
78    (CALL2 9)                           ; DIV
80    (JMP L111)
82    L82
82    (NIL)
83    (JMP L111)
85    L85
85    (CONST 13)                          ; %CSC
86    (JMP L66)
88    L88
88    (CONST 13)                          ; %CSC
89    (JMP L98)
91    L91
91    (CONST&PUSH 19)                     ; ((RAT) 3 2)
92    (GETVALUE&PUSH 0)                   ; X
94    (CALL2&JMPIFNOT 17 L110)            ; ALIKE1
97    (CONST 18)                          ; %SEC
98    L98
98    (PUSH)
99    (LIST&PUSH 1)
101   (LOAD&PUSH 1)
102   (LIST&PUSH 2)
104   (CALL1&PUSH 14)                     ; SIMPLIFY
106   (CALL1 15)                          ; NEG
108   (JMP L111)
110   L110
110   (NIL)
111   L111
111   (SKIP 2)
113   (UNBIND 2)
115   (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SIMP-%ATAN (FORM Y Z) ...)-62|
(CONST 0) = SIMP-%ATAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SIMP-%ATAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SIMP-%ATAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SIMP-%ATAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SIMP-%ATAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SIMP-%ATAN
8     (SKIP&RET 1)


Disassembly of function SIMP-%ATAN
(CONST 0) = FORM
(CONST 1) = Y
(CONST 2) = ONEARGCHECK
(CONST 3) = SIMPCHECK
(CONST 4) = ATAN1
(CONST 5) = $NUMER
(CONST 6) = 2.0
(CONST 7) = $BFLOATP
(CONST 8) = $BFLOAT
(CONST 9) = $%PIARGS
(CONST 10) = ZEROP1
(CONST 11) = 0
(CONST 12) = 1
(CONST 13) = %PI//4
(CONST 14) = -1
(CONST 15) = NEG
(CONST 16) = $%IARGS
(CONST 17) = $%I
(CONST 18) = MULTIPLEP
(CONST 19) = %ATANH
(CONST 20) = COEFF
(CONST 21) = SIMPLIFY
(CONST 22) = MUL
(CONST 23) = $TRIGINVERSES
(CONST 24) = $ALL
(CONST 25) = %TAN
(CONST 26) = $LOGARC
(CONST 27) = %ATAN
(CONST 28) = LOGARC
(CONST 29) = $TRIGSIGN
(CONST 30) = MMINUSP*
(CONST 31) = (%ATAN)
(CONST 32) = EQTEST
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: ($TRIGSIGN $LOGARC $TRIGINVERSES $%IARGS $%PIARGS %PI//4 Y $NUMER FORM)
writes special variable : (Y)
114 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; FORM
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; FORM
8     (CALL1 2)                           ; ONEARGCHECK
10    (GETVALUE 0)                        ; FORM
12    (CDR)
13    (CAR&PUSH)
14    (LOAD&PUSH 8)
15    (CALL2 3)                           ; SIMPCHECK
17    (SETVALUE 1)                        ; Y
19    (PUSH)
20    (CALLS2&JMPIF 15 L45)               ; FLOATP
23    (GETVALUE 5)                        ; $NUMER
25    (JMPIFNOT L112)
28    (GETVALUE&PUSH 1)                   ; Y
30    (CALLS2&JMPIFNOT 12 L112)           ; INTEGERP
34    (GETVALUE&PUSH 1)                   ; Y
36    (CONST&PUSH 6)                      ; 2.0
37    (CALLS2 174)                        ; COMMON-LISP:FLOAT
39    L39
39    (PUSH)
40    (CALL1 4)                           ; ATAN1
42    (JMP L203)
45    L45
45    (GETVALUE 1)                        ; Y
47    (JMP L39)
49    L49
49    (GETVALUE&PUSH 0)                   ; FORM
51    (CALL1 8)                           ; $BFLOAT
53    (JMP L203)
56    L56
56    (CONST 11)                          ; 0
57    (JMP L203)
60    L60
60    (GETVALUE 13)                       ; %PI//4
62    (JMPIF1 L203)
65    (JMP L145)
68    L68
68    (CONST&PUSH 17)                     ; $%I
69    (CONST&PUSH 19)                     ; %ATANH
70    (LIST&PUSH 1)
72    (GETVALUE&PUSH 1)                   ; Y
74    (CONST&PUSH 17)                     ; $%I
75    (CONST&PUSH 12)                     ; 1
76    (CALL&PUSH 3 20)                    ; COEFF
79    (LIST&PUSH 2)
81    (CALL1&PUSH 21)                     ; SIMPLIFY
83    (CALL2 22)                          ; MUL
85    (JMP L203)
88    L88
88    (CONST&PUSH 27)                     ; %ATAN
89    (GETVALUE&PUSH 1)                   ; Y
91    (CALL2 28)                          ; LOGARC
93    (JMP L203)
96    L96
96    (CONST&PUSH 27)                     ; %ATAN
97    (LIST&PUSH 1)
99    (GETVALUE&PUSH 1)                   ; Y
101   (CALL1&PUSH 15)                     ; NEG
103   (LIST&PUSH 2)
105   (CALL1&PUSH 21)                     ; SIMPLIFY
107   (CALL1 15)                          ; NEG
109   (JMP L203)
112   L112
112   (GETVALUE&PUSH 1)                   ; Y
114   (CALL1&JMPIF 7 L49)                 ; $BFLOATP
118   (GETVALUE 9)                        ; $%PIARGS
120   (JMPIFNOT L145)
122   (GETVALUE&PUSH 1)                   ; Y
124   (CALL1&JMPIF 10 L56)                ; ZEROP1
128   (GETVALUE&PUSH 1)                   ; Y
130   (JMPIFEQTO 12 L60)                  ; 1
134   (GETVALUE&PUSH 1)                   ; Y
136   (JMPIFNOTEQTO 14 L145)              ; -1
139   (GETVALUE&PUSH 13)                  ; %PI//4
141   (CALL1 15)                          ; NEG
143   (JMPIF1 L203)
145   L145
145   (GETVALUE 16)                       ; $%IARGS
147   (JMPIFNOT L156)
149   (GETVALUE&PUSH 1)                   ; Y
151   (CONST&PUSH 17)                     ; $%I
152   (CALL2&JMPIF 18 L68)                ; MULTIPLEP
156   L156
156   (GETVALUE&PUSH 23)                  ; $TRIGINVERSES
158   (JMPIFNOTEQTO 24 L178)              ; $ALL
161   (GETVALUE 1)                        ; Y
163   (JMPIFATOM L178)
165   (GETVALUE 1)                        ; Y
167   (CAR)
168   (CAR&PUSH)
169   (JMPIFNOTEQTO 25 L178)              ; %TAN
172   (GETVALUE 1)                        ; Y
174   (CDR)
175   (CAR)
176   (JMPIF1 L203)
178   L178
178   (GETVALUE 26)                       ; $LOGARC
180   (JMPIF L88)
183   (GETVALUE 29)                       ; $TRIGSIGN
185   (JMPIFNOT L193)
187   (GETVALUE&PUSH 1)                   ; Y
189   (CALL1&JMPIF 30 L96)                ; MMINUSP*
193   L193
193   (CONST&PUSH 31)                     ; (%ATAN)
195   (GETVALUE&PUSH 1)                   ; Y
197   (LIST&PUSH 2)
199   (GETVALUE&PUSH 0)                   ; FORM
201   (CALL2 32)                          ; EQTEST
203   L203
203   (UNBIND 2)
205   (SKIP&RET 4)


Disassembly of function #:|(DEFUN %PIARGS (X RATCOEFF) ...)-63|
(CONST 0) = %PIARGS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE %PIARGS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; %PIARGS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; %PIARGS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE %PIARGS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; %PIARGS
8     (SKIP&RET 1)


Disassembly of function %PIARGS
(CONST 0) = X
(CONST 1) = 0
(CONST 2) = MEVENP
(CONST 3) = ((RAT) 1 2)
(CONST 4) = ALIKE1
(CONST 5) = -1
(CONST 6) = |-1//2|
(CONST 7) = ADD
(CONST 8) = POWER
(CONST 9) = ((RAT) 1 6)
(CONST 10) = 2
(CONST 11) = MMOD
(CONST 12) = ((RAT) 5 6)
(CONST 13) = |1//2|
(CONST 14) = ((RAT) 1 4)
(CONST 15) = ((RAT) 3 4)
(CONST 16) = DIV
(CONST 17) = ((RAT) 1 3)
(CONST 18) = ((RAT) 2 3)
(CONST 19) = 3
(CONST 20) = 1
(CONST 21) = ((RAT) 7 6)
(CONST 22) = ((RAT) 11 6)
(CONST 23) = ((RAT) 4 3)
(CONST 24) = ((RAT) 5 3)
(CONST 25) = -2
(CONST 26) = ((RAT) 5 4)
(CONST 27) = ((RAT) 7 4)
(CONST 28) = MUL
(CONST 29) = ((RAT) 3 2)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (|-1//2| |1//2| X)
writes special variable : (X)
125 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE 0)                        ; X
5     (CAR&PUSH)
6     (CALLS2&JMPIFNOT 12 L16)            ; INTEGERP
9     (GETVALUE 0)                        ; X
11    (CDR&PUSH)
12    (CALLS2&JMPIF 12 L120)              ; INTEGERP
16    L16
16    (GETVALUE 0)                        ; X
18    (CAR&PUSH)
19    (CALL1&JMPIFNOT 2 L139)             ; MEVENP
23    (CONST&PUSH 9)                      ; ((RAT) 1 6)
24    (GETVALUE 0)                        ; X
26    (CDR&PUSH)
27    (CONST&PUSH 10)                     ; 2
28    (CALL2 11)                          ; MMOD
30    (SETVALUE 0)                        ; X
32    (PUSH)
33    (CALL2&JMPIF 4 L152)                ; ALIKE1
37    (CONST&PUSH 12)                     ; ((RAT) 5 6)
38    (GETVALUE&PUSH 0)                   ; X
40    (CALL2&JMPIF 4 L152)                ; ALIKE1
44    (CONST&PUSH 14)                     ; ((RAT) 1 4)
45    (GETVALUE&PUSH 0)                   ; X
47    (CALL2&JMPIF 4 L156)                ; ALIKE1
51    (CONST&PUSH 15)                     ; ((RAT) 3 4)
52    (GETVALUE&PUSH 0)                   ; X
54    (CALL2&JMPIF 4 L156)                ; ALIKE1
58    (CONST&PUSH 17)                     ; ((RAT) 1 3)
59    (GETVALUE&PUSH 0)                   ; X
61    (CALL2&JMPIF 4 L164)                ; ALIKE1
65    (CONST&PUSH 18)                     ; ((RAT) 2 3)
66    (GETVALUE&PUSH 0)                   ; X
68    (CALL2&JMPIF 4 L164)                ; ALIKE1
72    (GETVALUE&PUSH 13)                  ; |1//2|
74    (GETVALUE&PUSH 0)                   ; X
76    (CALL2&JMPIF 4 L172)                ; ALIKE1
80    (CONST&PUSH 21)                     ; ((RAT) 7 6)
81    (GETVALUE&PUSH 0)                   ; X
83    (CALL2&JMPIF 4 L175)                ; ALIKE1
87    (CONST&PUSH 22)                     ; ((RAT) 11 6)
88    (GETVALUE&PUSH 0)                   ; X
90    (CALL2&JMPIF 4 L175)                ; ALIKE1
94    (CONST&PUSH 23)                     ; ((RAT) 4 3)
95    (GETVALUE&PUSH 0)                   ; X
97    (CALL2&JMPIF 4 L107)                ; ALIKE1
100   (CONST&PUSH 24)                     ; ((RAT) 5 3)
101   (GETVALUE&PUSH 0)                   ; X
103   (CALL2&JMPIFNOT 4 L193)             ; ALIKE1
107   L107
107   (CONST&PUSH 19)                     ; 3
108   (GETVALUE&PUSH 13)                  ; |1//2|
110   (CALL2&PUSH 8)                      ; POWER
112   (CONST 25)                          ; -2
114   L114
114   (PUSH)
115   (CALL2 16)                          ; DIV
117   (JMP L212)
120   L120
120   (CONST 1)                           ; 0
121   (JMP L212)
124   L124
124   (NIL)
125   (JMP L212)
128   L128
128   (CONST&PUSH 5)                      ; -1
129   (LOAD&PUSH 5)
130   (GETVALUE&PUSH 6)                   ; |-1//2|
132   (CALL2&PUSH 7)                      ; ADD
134   (CALL2 8)                           ; POWER
136   (JMP L212)
139   L139
139   (LOAD&JMPIFNOT 4 L124)
142   (GETVALUE 0)                        ; X
144   (CDR&PUSH)
145   (CONST&PUSH 3)                      ; ((RAT) 1 2)
146   (CALL2&JMPIF 4 L128)                ; ALIKE1
149   (NIL)
150   (JMP L212)
152   L152
152   (GETVALUE 13)                       ; |1//2|
154   (JMP L212)
156   L156
156   (CONST&PUSH 10)                     ; 2
157   (GETVALUE&PUSH 13)                  ; |1//2|
159   (CALL2&PUSH 8)                      ; POWER
161   (CONST 10)                          ; 2
162   (JMP L114)
164   L164
164   (CONST&PUSH 19)                     ; 3
165   (GETVALUE&PUSH 13)                  ; |1//2|
167   (CALL2&PUSH 8)                      ; POWER
169   (CONST 10)                          ; 2
170   (JMP L114)
172   L172
172   (CONST 20)                          ; 1
173   (JMP L212)
175   L175
175   (GETVALUE 6)                        ; |-1//2|
177   (JMP L212)
179   L179
179   (GETVALUE&PUSH 6)                   ; |-1//2|
181   (CONST&PUSH 10)                     ; 2
182   (GETVALUE&PUSH 13)                  ; |1//2|
184   (CALL2&PUSH 8)                      ; POWER
186   (CALL2 28)                          ; MUL
188   (JMP L212)
190   L190
190   (CONST 5)                           ; -1
191   (JMP L212)
193   L193
193   (CONST&PUSH 26)                     ; ((RAT) 5 4)
194   (GETVALUE&PUSH 0)                   ; X
196   (CALL2&JMPIF 4 L179)                ; ALIKE1
199   (CONST&PUSH 27)                     ; ((RAT) 7 4)
200   (GETVALUE&PUSH 0)                   ; X
202   (CALL2&JMPIF 4 L179)                ; ALIKE1
205   (CONST&PUSH 29)                     ; ((RAT) 3 2)
206   (GETVALUE&PUSH 0)                   ; X
208   (CALL2&JMPIF 4 L190)                ; ALIKE1
211   (NIL)
212   L212
212   (UNBIND1)
213   (SKIP&RET 3)


Disassembly of function #:|(DEFUN LINEARIZE (FORM) ...)-64|
(CONST 0) = LINEARIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LINEARIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINEARIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LINEARIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LINEARIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LINEARIZE
8     (SKIP&RET 1)


Disassembly of function LINEARIZE
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = EVOD
(CONST 3) = $EVEN
(CONST 4) = (2 . 0)
(CONST 5) = (2 . 1)
(CONST 6) = MAXIMA-INTEGERP
(CONST 7) = (1 . 0)
(CONST 8) = RAT
(CONST 9) = MPLUS
(CONST 10) = LIN-MPLUS
(CONST 11) = MTIMES
(CONST 12) = LIN-MTIMES
(CONST 13) = MEXPT
(CONST 14) = LIN-MEXPT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
78 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE&PUSH 0)                   ; FORM
5     (CALLS2&JMPIF 12 L33)               ; INTEGERP
8     (GETVALUE&PUSH 0)                   ; FORM
10    (CALLS2&JMPIF 8 L36)                ; NUMBERP
13    (GETVALUE 0)                        ; FORM
15    (JMPIFATOM L60)
17    (GETVALUE 0)                        ; FORM
19    (CAR)
20    (CAR&PUSH)
21    (JMPIFNOTEQTO 8 L96)                ; RAT
25    (CONST 1)                           ; 0
26    L26
26    (PUSH)
27    (GETVALUE 0)                        ; FORM
29    (CONS)
30    (JMP L118)
33    L33
33    (CONST 1)                           ; 0
34    (JMP L26)
36    L36
36    (NIL)
37    (JMP L118)
40    L40
40    (CONST 4)                           ; (2 . 0)
41    (SKIP 1)
43    (JMP L118)
46    L46
46    (PUSH)
47    (JMPIFEQTO 3 L40)                   ; $EVEN
50    (CONST 5)                           ; (2 . 1)
51    (SKIP 1)
53    (JMP L118)
55    L55
55    (CONST 7)                           ; (1 . 0)
56    (SKIP 1)
58    (JMP L118)
60    L60
60    (NIL&PUSH)
61    (GETVALUE&PUSH 0)                   ; FORM
63    (CALL1 2)                           ; EVOD
65    (STORE 0)
66    (JMPIF L46)
68    (GETVALUE&PUSH 0)                   ; FORM
70    (CALL1&JMPIF 6 L55)                 ; MAXIMA-INTEGERP
73    (NIL)
74    (SKIP 1)
76    (JMP L118)
78    L78
78    (GETVALUE&PUSH 0)                   ; FORM
80    (CALL1 10)                          ; LIN-MPLUS
82    (JMP L118)
84    L84
84    (GETVALUE&PUSH 0)                   ; FORM
86    (CALL1 12)                          ; LIN-MTIMES
88    (JMP L118)
90    L90
90    (GETVALUE&PUSH 0)                   ; FORM
92    (CALL1 14)                          ; LIN-MEXPT
94    (JMP L118)
96    L96
96    (GETVALUE 0)                        ; FORM
98    (CAR)
99    (CAR&PUSH)
100   (JMPIFEQTO 9 L78)                   ; MPLUS
103   (GETVALUE 0)                        ; FORM
105   (CAR)
106   (CAR&PUSH)
107   (JMPIFEQTO 11 L84)                  ; MTIMES
110   (GETVALUE 0)                        ; FORM
112   (CAR)
113   (CAR&PUSH)
114   (JMPIFEQTO 13 L90)                  ; MEXPT
117   (NIL)
118   L118
118   (UNBIND1)
119   (SKIP&RET 2)


Disassembly of function #:|(DEFUN LIN-MPLUS (FORM) ...)-65|
(CONST 0) = LIN-MPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIN-MPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIN-MPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIN-MPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIN-MPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIN-MPLUS
8     (SKIP&RET 1)


Disassembly of function LIN-MPLUS
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = LINEARIZE
(CONST 3) = RGCD
(CONST 4) = RPLUS
(CONST 5) = MMOD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR&PUSH)
6     (NIL&PUSH)
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 1)                      ; 0
9     (LOAD&JMPIFNOT 3 L36)
12    L12
12    (LOAD&CAR&PUSH 3)
14    (CALL1 2)                           ; LINEARIZE
16    (STORE 2)
17    (JMPIFNOT L47)
19    (LOAD&CAR&PUSH 2)
21    (LOAD&PUSH 2)
22    (CALL2 3)                           ; RGCD
24    (STORE 1)
25    (LOAD&CDR&PUSH 2)
27    (LOAD&PUSH 1)
28    (CALL2 4)                           ; RPLUS
30    (STORE 0)
31    (LOAD&CDR&STORE 3)
33    (LOAD&JMPIF 3 L12)
36    L36
36    (LOAD&PUSH 1)
37    (LOAD&PUSH 1)
38    (LOAD&PUSH 3)
39    (CALL2 5)                           ; MMOD
41    (CONS)
42    (SKIP 4)
44    L44
44    (UNBIND1)
45    (SKIP&RET 2)
47    L47
47    (NIL)
48    (SKIP 4)
50    (JMP L44)


Disassembly of function #:|(DEFUN LIN-MTIMES (FORM) ...)-66|
(CONST 0) = LIN-MTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIN-MTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIN-MTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIN-MTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIN-MTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIN-MTIMES
8     (SKIP&RET 1)


Disassembly of function LIN-MTIMES
(CONST 0) = FORM
(CONST 1) = 0
(CONST 2) = 1
(CONST 3) = LINEARIZE
(CONST 4) = RTIMES
(CONST 5) = RGCD
(CONST 6) = MMOD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (GETVALUE 0)                        ; FORM
5     (CDR&PUSH)
6     (NIL&PUSH)
7     (CONST&PUSH 1)                      ; 0
8     (CONST&PUSH 2)                      ; 1
9     (LOAD&JMPIFNOT 3 L50)
12    L12
12    (LOAD&CAR&PUSH 3)
14    (CALL1 3)                           ; LINEARIZE
16    (STORE 2)
17    (JMPIFNOT L61)
19    (LOAD&PUSH 1)
20    (LOAD&CAR&PUSH 3)
22    (CALL2&PUSH 4)                      ; RTIMES
24    (LOAD&PUSH 2)
25    (LOAD&CDR&PUSH 4)
27    (CALL2&PUSH 4)                      ; RTIMES
29    (LOAD&PUSH 2)
30    (LOAD&CAR&PUSH 5)
32    (CALL2&PUSH 4)                      ; RTIMES
34    (CALL2&PUSH 5)                      ; RGCD
36    (CALL2 5)                           ; RGCD
38    (STORE 1)
39    (LOAD&CDR&PUSH 2)
41    (LOAD&PUSH 1)
42    (CALL2 4)                           ; RTIMES
44    (STORE 0)
45    (LOAD&CDR&STORE 3)
47    (LOAD&JMPIF 3 L12)
50    L50
50    (LOAD&PUSH 1)
51    (LOAD&PUSH 1)
52    (LOAD&PUSH 3)
53    (CALL2 6)                           ; MMOD
55    (CONS)
56    (SKIP 4)
58    L58
58    (UNBIND1)
59    (SKIP&RET 2)
61    L61
61    (NIL)
62    (SKIP 4)
64    (JMP L58)


Disassembly of function #:|(DEFUN LIN-MEXPT (FORM) ...)-67|
(CONST 0) = LIN-MEXPT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LIN-MEXPT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LIN-MEXPT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LIN-MEXPT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LIN-MEXPT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LIN-MEXPT
8     (SKIP&RET 1)


Disassembly of function LIN-MEXPT
(CONST 0) = FORM
(CONST 1) = LINEARIZE
(CONST 2) = MMOD
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (FORM)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; FORM
3     (NIL&PUSH)
4     (GETVALUE 0)                        ; FORM
6     (CDR)
7     (CDR)
8     (CAR&PUSH)
9     (CALLS2&JMPIFNOT 12 L29)            ; INTEGERP
12    (GETVALUE 0)                        ; FORM
14    (CDR)
15    (CDR)
16    (CAR&PUSH)
17    (CALLS2&JMPIF 147 L29)              ; MINUSP
20    (GETVALUE 0)                        ; FORM
22    (CDR)
23    (CAR&PUSH)
24    (CALL1 1)                           ; LINEARIZE
26    (STORE 0)
27    (JMPIF L35)
29    L29
29    (NIL)
30    (SKIP 1)
32    L32
32    (UNBIND1)
33    (SKIP&RET 2)
35    L35
35    (LOAD&CAR&PUSH 0)
37    (LOAD&CDR&PUSH 1)
39    (GETVALUE 0)                        ; FORM
41    (CDR)
42    (CDR)
43    (CAR&PUSH)
44    (CALL2 2)                           ; MMOD
46    (CONS)
47    (SKIP 1)
49    (JMP L32)


Disassembly of function #:|(DEFUN RGCD (X Y) ...)-68|
(CONST 0) = RGCD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RGCD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RGCD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RGCD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RGCD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RGCD
8     (SKIP&RET 1)


Disassembly of function RGCD
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = (RAT)
(CONST 3) = (RAT)
(CONST 4) = (RAT)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
60 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CALLS2&JMPIF 12 L42)               ; INTEGERP
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALLS2&JMPIFNOT 12 L61)            ; INTEGERP
16    (CONST&PUSH 3)                      ; (RAT)
17    (GETVALUE 0)                        ; X
19    (CDR)
20    (CAR&PUSH)
21    (GETVALUE&PUSH 1)                   ; Y
23    (CALLSR&PUSH 2 57)                  ; GCD
26    (GETVALUE 0)                        ; X
28    L28
28    (CDR)
29    (CDR)
30    (CAR)
31    (JMP L86)
33    L33
33    (GETVALUE&PUSH 0)                   ; X
35    (GETVALUE&PUSH 1)                   ; Y
37    (CALLSR 2 57)                       ; GCD
40    (JMP L89)
42    L42
42    (GETVALUE&PUSH 1)                   ; Y
44    (CALLS2&JMPIF 12 L33)               ; INTEGERP
47    (CONST&PUSH 2)                      ; (RAT)
48    (GETVALUE&PUSH 0)                   ; X
50    (GETVALUE 1)                        ; Y
52    (CDR)
53    (CAR&PUSH)
54    (CALLSR&PUSH 2 57)                  ; GCD
57    (GETVALUE 1)                        ; Y
59    (JMP L28)
61    L61
61    (CONST&PUSH 4)                      ; (RAT)
62    (GETVALUE 0)                        ; X
64    (CDR)
65    (CAR&PUSH)
66    (GETVALUE 1)                        ; Y
68    (CDR)
69    (CAR&PUSH)
70    (CALLSR&PUSH 2 57)                  ; GCD
73    (GETVALUE 0)                        ; X
75    (CDR)
76    (CDR)
77    (CAR&PUSH)
78    (GETVALUE 1)                        ; Y
80    (CDR)
81    (CDR)
82    (CAR&PUSH)
83    (CALLSR 2 58)                       ; LCM
86    L86
86    (PUSH)
87    (LIST 3)
89    L89
89    (UNBIND 2)
91    (SKIP&RET 3)


Disassembly of function #:|(DEFUN MAXIMA-REDUCE (X Y) ...)-69|
(CONST 0) = MAXIMA-REDUCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MAXIMA-REDUCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MAXIMA-REDUCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MAXIMA-REDUCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MAXIMA-REDUCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MAXIMA-REDUCE
8     (SKIP&RET 1)


Disassembly of function MAXIMA-REDUCE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = GCD
(CONST 3) = QUOT
(CONST 4) = 1
(CONST 5) = (RAT SIMP)
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (GCD Y X)
writes special variables : (Y X GCD)
41 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (NIL)
7     (BIND 2)                            ; GCD
9     (GETVALUE&PUSH 0)                   ; X
11    (GETVALUE&PUSH 1)                   ; Y
13    (CALLSR 2 57)                       ; GCD
16    (SETVALUE 2)                        ; GCD
18    (GETVALUE&PUSH 0)                   ; X
20    (GETVALUE&PUSH 2)                   ; GCD
22    (CALL2 3)                           ; QUOT
24    (SETVALUE 0)                        ; X
26    (GETVALUE&PUSH 1)                   ; Y
28    (GETVALUE&PUSH 2)                   ; GCD
30    (CALL2 3)                           ; QUOT
32    (SETVALUE 1)                        ; Y
34    (PUSH)
35    (CALLS2&JMPIFNOT 147 L52)           ; MINUSP
38    (GETVALUE&PUSH 0)                   ; X
40    (CALLSR 0 54)                       ; -
43    (SETVALUE 0)                        ; X
45    (GETVALUE&PUSH 1)                   ; Y
47    (CALLSR 0 54)                       ; -
50    (SETVALUE 1)                        ; Y
52    L52
52    (GETVALUE&PUSH 1)                   ; Y
54    (JMPIFEQTO 4 L69)                   ; 1
57    (CONST&PUSH 5)                      ; (RAT SIMP)
58    (GETVALUE&PUSH 0)                   ; X
60    (GETVALUE&PUSH 1)                   ; Y
62    (LIST 3)
64    (UNBIND1)
65    L65
65    (UNBIND 2)
67    (SKIP&RET 3)
69    L69
69    (GETVALUE 0)                        ; X
71    (UNBIND1)
72    (JMP L65)


Disassembly of function #:|(DEFMFUN RPLUS (X Y) ...)-70|
(CONST 0) = RPLUS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RPLUS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RPLUS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RPLUS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RPLUS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RPLUS
8     (SKIP&RET 1)


Disassembly of function RPLUS
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = ADDK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2 2)                           ; ADDK
12    (UNBIND 2)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RDIFFERENCE (X Y) ...)-71|
(CONST 0) = RDIFFERENCE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RDIFFERENCE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RDIFFERENCE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RDIFFERENCE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RDIFFERENCE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RDIFFERENCE
8     (SKIP&RET 1)


Disassembly of function RDIFFERENCE
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = -1
(CONST 3) = TIMESK
(CONST 4) = ADDK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
11 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (CONST&PUSH 2)                      ; -1
9     (GETVALUE&PUSH 1)                   ; Y
11    (CALL2&PUSH 3)                      ; TIMESK
13    (CALL2 4)                           ; ADDK
15    (UNBIND 2)
17    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RTIMES (X Y) ...)-72|
(CONST 0) = RTIMES
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RTIMES>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RTIMES
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RTIMES
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RTIMES>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RTIMES
8     (SKIP&RET 1)


Disassembly of function RTIMES
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = TIMESK
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2 2)                           ; TIMESK
12    (UNBIND 2)
14    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN RREMAINDER (X Y) ...)-73|
(CONST 0) = RREMAINDER
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE RREMAINDER>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; RREMAINDER
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; RREMAINDER
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE RREMAINDER>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; RREMAINDER
8     (SKIP&RET 1)


Disassembly of function RREMAINDER
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = 0
(CONST 3) = DBZ-ERR
(CONST 4) = MAXIMA-REDUCE
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (X Y)
64 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (LOAD 4)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 1)                   ; Y
8     (JMPIFEQTO 2 L53)                   ; 0
11    (GETVALUE&PUSH 0)                   ; X
13    (CALLS2&JMPIF 12 L63)               ; INTEGERP
16    (GETVALUE&PUSH 1)                   ; Y
18    (CALLS2&JMPIF 12 L84)               ; INTEGERP
21    (GETVALUE 0)                        ; X
23    (CDR)
24    (CAR&PUSH)
25    (GETVALUE 1)                        ; Y
27    (CDR)
28    (CDR)
29    (CAR&PUSH)
30    (CALLSR&PUSH 2 55)                  ; *
33    (GETVALUE 0)                        ; X
35    (CDR)
36    (CDR)
37    (CAR&PUSH)
38    (GETVALUE 1)                        ; Y
40    (CDR)
41    (CAR)
42    L42
42    (PUSH)
43    (CALLSR 2 55)                       ; *
46    L46
46    (PUSH)
47    (CALL2 4)                           ; MAXIMA-REDUCE
49    L49
49    (UNBIND 2)
51    (SKIP&RET 3)
53    L53
53    (CALL0 3)                           ; DBZ-ERR
55    (JMP L49)
57    L57
57    (GETVALUE&PUSH 0)                   ; X
59    (GETVALUE 1)                        ; Y
61    (JMP L46)
63    L63
63    (GETVALUE&PUSH 1)                   ; Y
65    (CALLS2&JMPIF 12 L57)               ; INTEGERP
68    (GETVALUE&PUSH 0)                   ; X
70    (GETVALUE 1)                        ; Y
72    (CDR)
73    (CDR)
74    (CAR&PUSH)
75    (CALLSR&PUSH 2 55)                  ; *
78    (GETVALUE 1)                        ; Y
80    (CDR)
81    (CAR)
82    (JMP L46)
84    L84
84    (GETVALUE 0)                        ; X
86    (CDR)
87    (CAR&PUSH)
88    (GETVALUE 0)                        ; X
90    (CDR)
91    (CDR)
92    (CAR&PUSH)
93    (GETVALUE 1)                        ; Y
95    (JMP L42)


Disassembly of function #:|(DEFMFUN $EXPONENTIALIZE (EXP) ...)-74|
(CONST 0) = $EXPONENTIALIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE $EXPONENTIALIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; $EXPONENTIALIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; $EXPONENTIALIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE $EXPONENTIALIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; $EXPONENTIALIZE
8     (SKIP&RET 1)


Disassembly of function $EXPONENTIALIZE
(CONST 0) = EXP
(CONST 1) = $DEMOIVRE
(CONST 2) = TRIGP
(CONST 3) = EXPONENTIALIZE
(CONST 4) = $EXPONENTIALIZE
(CONST 5) = RECUR-APPLY
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (EXP)
33 byte-code instructions:
0     L0
0     (LOAD 1)
1     (BIND 0)                            ; EXP
3     (NIL)
4     (BIND 1)                            ; $DEMOIVRE
6     (GETVALUE 0)                        ; EXP
8     (JMPIFATOM L27)
10    (GETVALUE 0)                        ; EXP
12    (CAR)
13    (CAR&PUSH)
14    (CALL1&JMPIF 2 L32)                 ; TRIGP
17    (CONST&SYMBOL-FUNCTION&PUSH 4)      ; $EXPONENTIALIZE
19    (GETVALUE&PUSH 0)                   ; EXP
21    (CALL2 5)                           ; RECUR-APPLY
23    (UNBIND1)
24    L24
24    (UNBIND1)
25    (SKIP&RET 2)
27    L27
27    (GETVALUE 0)                        ; EXP
29    (UNBIND1)
30    (JMP L24)
32    L32
32    (GETVALUE 0)                        ; EXP
34    (CAR)
35    (CAR&PUSH)
36    (GETVALUE 0)                        ; EXP
38    (CDR)
39    (CAR&PUSH)
40    (JSR&PUSH L0)
42    (CALL2 3)                           ; EXPONENTIALIZE
44    (UNBIND1)
45    (JMP L24)


Disassembly of function #:|(DEFMFUN EXPONENTIALIZE (OP ARG) ...)-75|
(CONST 0) = EXPONENTIALIZE
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE EXPONENTIALIZE>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; EXPONENTIALIZE
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; EXPONENTIALIZE
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE EXPONENTIALIZE>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; EXPONENTIALIZE
8     (SKIP&RET 1)


Disassembly of function EXPONENTIALIZE
(CONST 0) = ARG
(CONST 1) = %SIN
(CONST 2) = $%E
(CONST 3) = $%I
(CONST 4) = MUL
(CONST 5) = POWER
(CONST 6) = -1
(CONST 7) = SUB
(CONST 8) = 2
(CONST 9) = DIV
(CONST 10) = %COS
(CONST 11) = ADD
(CONST 12) = %TAN
(CONST 13) = %COT
(CONST 14) = %CSC
(CONST 15) = %SEC
(CONST 16) = %SINH
(CONST 17) = NEG
(CONST 18) = %COSH
(CONST 19) = %TANH
(CONST 20) = %COTH
(CONST 21) = %CSCH
(CONST 22) = %SECH
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ARG)
232 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; ARG
3     (LOAD&PUSH 5)
4     (JMPIFEQTO 1 L87)                   ; %SIN
8     (LOAD&PUSH 5)
9     (JMPIFEQTO 10 L112)                 ; %COS
13    (LOAD&PUSH 5)
14    (JMPIFEQTO 12 L135)                 ; %TAN
18    (LOAD&PUSH 5)
19    (JMPIFEQTO 13 L182)                 ; %COT
23    (LOAD&PUSH 5)
24    (JMPIFEQTO 14 L218)                 ; %CSC
28    (LOAD&PUSH 5)
29    (JMPIFEQTO 15 L242)                 ; %SEC
33    (LOAD&PUSH 5)
34    (JMPIFEQTO 16 L262)                 ; %SINH
38    (LOAD&PUSH 5)
39    (JMPIFEQTO 18 L280)                 ; %COSH
43    (LOAD&PUSH 5)
44    (JMPIFEQTO 19 L299)                 ; %TANH
48    (LOAD&PUSH 5)
49    (JMPIFEQTO 20 L323)                 ; %COTH
53    (LOAD&PUSH 5)
54    (JMPIFEQTO 21 L346)                 ; %CSCH
58    (LOAD&PUSH 5)
59    (JMPIFNOTEQTO 22 L366)              ; %SECH
63    (CONST&PUSH 8)                      ; 2
64    (CONST&PUSH 2)                      ; $%E
65    (GETVALUE&PUSH 0)                   ; ARG
67    (CALL2&PUSH 5)                      ; POWER
69    (CONST&PUSH 2)                      ; $%E
70    (CONST 6)                           ; -1
71    L71
71    (PUSH)
72    (GETVALUE&PUSH 0)                   ; ARG
74    (CALL2 4)                           ; MUL
76    L76
76    (PUSH)
77    (CALL2&PUSH 5)                      ; POWER
79    (CALL2 11)                          ; ADD
81    L81
81    (PUSH)
82    (CALL2 9)                           ; DIV
84    (JMP L367)
87    L87
87    (CONST&PUSH 2)                      ; $%E
88    (CONST&PUSH 3)                      ; $%I
89    (GETVALUE&PUSH 0)                   ; ARG
91    (CALL2&PUSH 4)                      ; MUL
93    (CALL2&PUSH 5)                      ; POWER
95    (CONST&PUSH 2)                      ; $%E
96    (CONST&PUSH 6)                      ; -1
97    (CONST&PUSH 3)                      ; $%I
98    (GETVALUE&PUSH 0)                   ; ARG
100   (CALL&PUSH 3 4)                     ; MUL
103   (CALL2&PUSH 5)                      ; POWER
105   (CALL2&PUSH 7)                      ; SUB
107   (CONST&PUSH 8)                      ; 2
108   (CONST 3)                           ; $%I
109   (JMP L176)
112   L112
112   (CONST&PUSH 2)                      ; $%E
113   (CONST&PUSH 3)                      ; $%I
114   (GETVALUE&PUSH 0)                   ; ARG
116   (CALL2&PUSH 4)                      ; MUL
118   (CALL2&PUSH 5)                      ; POWER
120   (CONST&PUSH 2)                      ; $%E
121   (CONST&PUSH 6)                      ; -1
122   (CONST&PUSH 3)                      ; $%I
123   (GETVALUE&PUSH 0)                   ; ARG
125   (CALL&PUSH 3 4)                     ; MUL
128   (CALL2&PUSH 5)                      ; POWER
130   (CALL2&PUSH 11)                     ; ADD
132   (CONST 8)                           ; 2
133   (JMP L81)
135   L135
135   (CONST&PUSH 2)                      ; $%E
136   (CONST&PUSH 3)                      ; $%I
137   (GETVALUE&PUSH 0)                   ; ARG
139   (CALL2&PUSH 4)                      ; MUL
141   (CALL2&PUSH 5)                      ; POWER
143   (CONST&PUSH 2)                      ; $%E
144   (CONST&PUSH 6)                      ; -1
145   (CONST&PUSH 3)                      ; $%I
146   (GETVALUE&PUSH 0)                   ; ARG
148   (CALL&PUSH 3 4)                     ; MUL
151   (CALL2&PUSH 5)                      ; POWER
153   (CALL2&PUSH 7)                      ; SUB
155   (CONST&PUSH 3)                      ; $%I
156   (CONST&PUSH 2)                      ; $%E
157   (CONST&PUSH 3)                      ; $%I
158   (GETVALUE&PUSH 0)                   ; ARG
160   (CALL2&PUSH 4)                      ; MUL
162   (CALL2&PUSH 5)                      ; POWER
164   (CONST&PUSH 2)                      ; $%E
165   (CONST&PUSH 6)                      ; -1
166   (CONST&PUSH 3)                      ; $%I
167   (GETVALUE&PUSH 0)                   ; ARG
169   (CALL&PUSH 3 4)                     ; MUL
172   (CALL2&PUSH 5)                      ; POWER
174   (CALL2 11)                          ; ADD
176   L176
176   (PUSH)
177   (CALL2 4)                           ; MUL
179   (JMP L81)
182   L182
182   (CONST&PUSH 3)                      ; $%I
183   (CONST&PUSH 2)                      ; $%E
184   (CONST&PUSH 3)                      ; $%I
185   (GETVALUE&PUSH 0)                   ; ARG
187   (CALL2&PUSH 4)                      ; MUL
189   (CALL2&PUSH 5)                      ; POWER
191   (CONST&PUSH 2)                      ; $%E
192   (CONST&PUSH 6)                      ; -1
193   (CONST&PUSH 3)                      ; $%I
194   (GETVALUE&PUSH 0)                   ; ARG
196   (CALL&PUSH 3 4)                     ; MUL
199   (CALL2&PUSH 5)                      ; POWER
201   (CALL2&PUSH 11)                     ; ADD
203   (CALL2&PUSH 4)                      ; MUL
205   (CONST&PUSH 2)                      ; $%E
206   (CONST&PUSH 3)                      ; $%I
207   (GETVALUE&PUSH 0)                   ; ARG
209   (CALL2&PUSH 4)                      ; MUL
211   (CALL2&PUSH 5)                      ; POWER
213   (CONST&PUSH 2)                      ; $%E
214   (CONST&PUSH 6)                      ; -1
215   (CONST 3)                           ; $%I
216   (JMP L233)
218   L218
218   (CONST&PUSH 8)                      ; 2
219   (CONST&PUSH 3)                      ; $%I
220   (CALL2&PUSH 4)                      ; MUL
222   (CONST&PUSH 2)                      ; $%E
223   (CONST&PUSH 3)                      ; $%I
224   (GETVALUE&PUSH 0)                   ; ARG
226   (CALL2&PUSH 4)                      ; MUL
228   (CALL2&PUSH 5)                      ; POWER
230   (CONST&PUSH 2)                      ; $%E
231   (CONST&PUSH 6)                      ; -1
232   (CONST 3)                           ; $%I
233   L233
233   (PUSH)
234   (GETVALUE&PUSH 0)                   ; ARG
236   (CALL 3 4)                          ; MUL
239   (JMP L358)
242   L242
242   (CONST&PUSH 8)                      ; 2
243   (CONST&PUSH 2)                      ; $%E
244   (CONST&PUSH 3)                      ; $%I
245   (GETVALUE&PUSH 0)                   ; ARG
247   (CALL2&PUSH 4)                      ; MUL
249   (CALL2&PUSH 5)                      ; POWER
251   (CONST&PUSH 2)                      ; $%E
252   (CONST&PUSH 6)                      ; -1
253   (CONST&PUSH 3)                      ; $%I
254   (GETVALUE&PUSH 0)                   ; ARG
256   (CALL 3 4)                          ; MUL
259   (JMP L76)
262   L262
262   (CONST&PUSH 2)                      ; $%E
263   (GETVALUE&PUSH 0)                   ; ARG
265   (CALL2&PUSH 5)                      ; POWER
267   (CONST&PUSH 2)                      ; $%E
268   (GETVALUE&PUSH 0)                   ; ARG
270   (CALL1&PUSH 17)                     ; NEG
272   (CALL2&PUSH 5)                      ; POWER
274   (CALL2&PUSH 7)                      ; SUB
276   (CONST 8)                           ; 2
277   (JMP L81)
280   L280
280   (CONST&PUSH 2)                      ; $%E
281   (GETVALUE&PUSH 0)                   ; ARG
283   (CALL2&PUSH 5)                      ; POWER
285   (CONST&PUSH 2)                      ; $%E
286   (CONST&PUSH 6)                      ; -1
287   (GETVALUE&PUSH 0)                   ; ARG
289   (CALL2&PUSH 4)                      ; MUL
291   (CALL2&PUSH 5)                      ; POWER
293   (CALL2&PUSH 11)                     ; ADD
295   (CONST 8)                           ; 2
296   (JMP L81)
299   L299
299   (CONST&PUSH 2)                      ; $%E
300   (GETVALUE&PUSH 0)                   ; ARG
302   (CALL2&PUSH 5)                      ; POWER
304   (CONST&PUSH 2)                      ; $%E
305   (GETVALUE&PUSH 0)                   ; ARG
307   (CALL1&PUSH 17)                     ; NEG
309   (CALL2&PUSH 5)                      ; POWER
311   (CALL2&PUSH 7)                      ; SUB
313   (CONST&PUSH 2)                      ; $%E
314   (GETVALUE&PUSH 0)                   ; ARG
316   (CALL2&PUSH 5)                      ; POWER
318   (CONST&PUSH 2)                      ; $%E
319   (CONST 6)                           ; -1
320   (JMP L71)
323   L323
323   (CONST&PUSH 2)                      ; $%E
324   (GETVALUE&PUSH 0)                   ; ARG
326   (CALL2&PUSH 5)                      ; POWER
328   (CONST&PUSH 2)                      ; $%E
329   (CONST&PUSH 6)                      ; -1
330   (GETVALUE&PUSH 0)                   ; ARG
332   (CALL2&PUSH 4)                      ; MUL
334   (CALL2&PUSH 5)                      ; POWER
336   (CALL2&PUSH 11)                     ; ADD
338   (CONST&PUSH 2)                      ; $%E
339   (GETVALUE&PUSH 0)                   ; ARG
341   (CALL2&PUSH 5)                      ; POWER
343   (CONST 2)                           ; $%E
344   (JMP L353)
346   L346
346   (CONST&PUSH 8)                      ; 2
347   (CONST&PUSH 2)                      ; $%E
348   (GETVALUE&PUSH 0)                   ; ARG
350   (CALL2&PUSH 5)                      ; POWER
352   (CONST 2)                           ; $%E
353   L353
353   (PUSH)
354   (GETVALUE&PUSH 0)                   ; ARG
356   (CALL1 17)                          ; NEG
358   L358
358   (PUSH)
359   (CALL2&PUSH 5)                      ; POWER
361   (CALL2 7)                           ; SUB
363   (JMP L81)
366   L366
366   (NIL)
367   L367
367   (UNBIND1)
368   (SKIP&RET 3)


Disassembly of function #:|(DEFUN COEFFICIENT (EXP VAR POW) ...)-76|
(CONST 0) = COEFFICIENT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COEFFICIENT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COEFFICIENT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COEFFICIENT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COEFFICIENT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COEFFICIENT
8     (SKIP&RET 1)


Disassembly of function COEFFICIENT
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 1
(CONST 3) = 0
(CONST 4) = EXPAND1
(CONST 5) = COEFF
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
13 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; EXP
3     (LOAD 5)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; 1
9     (CONST&PUSH 3)                      ; 0
10    (CALL&PUSH 3 4)                     ; EXPAND1
13    (GETVALUE&PUSH 1)                   ; VAR
15    (LOAD&PUSH 9)
16    (CALL 3 5)                          ; COEFF
19    (UNBIND 2)
21    (SKIP&RET 4)


Disassembly of function #:|(DEFUN MMOD (X MOD) ...)-77|
(CONST 0) = MMOD
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMOD>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMOD
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMOD
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMOD>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMOD
8     (SKIP&RET 1)


Disassembly of function MMOD
(CONST 0) = X
(CONST 1) = QUOT
(CONST 2) = $RATNUMP
(CONST 3) = $DENOM
(CONST 4) = D
(CONST 5) = MUL*
(CONST 6) = DIV
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (D X)
writes special variable : (X)
62 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&JMPIFNOT 12 L12)            ; INTEGERP
8     (LOAD&PUSH 4)
9     (CALLS2&JMPIF 12 L37)               ; INTEGERP
12    L12
12    (GETVALUE&PUSH 0)                   ; X
14    (CALL1&JMPIFNOT 2 L21)              ; $RATNUMP
17    (LOAD&PUSH 4)
18    (CALL1&JMPIF 2 L65)                 ; $RATNUMP
21    L21
21    (NIL)
22    L22
22    (UNBIND1)
23    (SKIP&RET 3)
25    L25
25    (GETVALUE 0)                        ; X
27    (JMP L57)
29    L29
29    (GETVALUE&PUSH 0)                   ; X
31    (LOAD&PUSH 5)
32    (CALLSR 2 53)                       ; +
35    (JMP L22)
37    L37
37    (LOAD&PUSH 4)
38    (CALLS2&JMPIF 145 L25)              ; ZEROP
41    (GETVALUE&PUSH 0)                   ; X
43    (LOAD&PUSH 5)
44    (GETVALUE&PUSH 0)                   ; X
46    (LOAD&PUSH 7)
47    (CALL2&PUSH 1)                      ; QUOT
49    (CALLSR&PUSH 2 55)                  ; *
52    (CALLSR 1 54)                       ; -
55    (SETVALUE 0)                        ; X
57    L57
57    (PUSH)
58    (CALLS2&JMPIF 147 L29)              ; MINUSP
61    (GETVALUE 0)                        ; X
63    (JMP L22)
65    L65
65    (GETVALUE&PUSH 0)                   ; X
67    (CALL1&PUSH 3)                      ; $DENOM
69    (LOAD&PUSH 5)
70    (CALL1&PUSH 3)                      ; $DENOM
72    (CALLSR 2 58)                       ; LCM
75    (BIND 4)                            ; D
77    (GETVALUE&PUSH 4)                   ; D
79    (GETVALUE&PUSH 0)                   ; X
81    (CALL2 5)                           ; MUL*
83    (SETVALUE 0)                        ; X
85    (GETVALUE&PUSH 4)                   ; D
87    (LOAD&PUSH 8)
88    (CALL2 5)                           ; MUL*
90    (STORE 7)
91    (GETVALUE&PUSH 0)                   ; X
93    (LOAD&PUSH 8)
94    (CALLS2&PUSH 183)                   ; MOD
96    (GETVALUE&PUSH 4)                   ; D
98    (CALL2 6)                           ; DIV
100   (UNBIND1)
101   (JMP L22)


Disassembly of function #:|(DEFUN MULTIPLEP (EXP VAR) ...)-78|
(CONST 0) = MULTIPLEP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MULTIPLEP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MULTIPLEP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MULTIPLEP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MULTIPLEP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MULTIPLEP
8     (SKIP&RET 1)


Disassembly of function MULTIPLEP
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = ZEROP1
(CONST 3) = 1
(CONST 4) = COEFF
(CONST 5) = MUL
(CONST 6) = SUB
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
20 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CALL1 2)                           ; ZEROP1
10    (NOT)
11    (JMPIFNOT1 L31)
13    (GETVALUE&PUSH 0)                   ; EXP
15    (GETVALUE&PUSH 1)                   ; VAR
17    (GETVALUE&PUSH 0)                   ; EXP
19    (GETVALUE&PUSH 1)                   ; VAR
21    (CONST&PUSH 3)                      ; 1
22    (CALL&PUSH 3 4)                     ; COEFF
25    (CALL2&PUSH 5)                      ; MUL
27    (CALL2&PUSH 6)                      ; SUB
29    (CALL1 2)                           ; ZEROP1
31    L31
31    (UNBIND 2)
33    (SKIP&RET 3)


Disassembly of function #:|(DEFUN LINEARP (EXP VAR) ...)-79|
(CONST 0) = LINEARP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE LINEARP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; LINEARP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; LINEARP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE LINEARP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; LINEARP
8     (SKIP&RET 1)


Disassembly of function LINEARP
(CONST 0) = EXP
(CONST 1) = VAR
(CONST 2) = 1
(CONST 3) = 0
(CONST 4) = EXPAND1
(CONST 5) = ISLINEAR
2 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (VAR EXP)
writes special variable : (EXP)
19 byte-code instructions:
0     (LOAD 2)
1     (BIND 0)                            ; EXP
3     (LOAD 4)
4     (BIND 1)                            ; VAR
6     (GETVALUE&PUSH 0)                   ; EXP
8     (CONST&PUSH 2)                      ; 1
9     (CONST&PUSH 3)                      ; 0
10    (CALL&PUSH 3 4)                     ; EXPAND1
13    (GETVALUE&PUSH 1)                   ; VAR
15    (CALL2 5)                           ; ISLINEAR
17    (SETVALUE 0)                        ; EXP
19    (JMPIFNOT1 L25)
21    (CAR&PUSH)
22    (CONST 3)                           ; 0
23    (EQ)
24    (NOT)
25    L25
25    (UNBIND 2)
27    (SKIP&RET 3)


Disassembly of function #:|(DEFMFUN MMINUSP (X) ...)-80|
(CONST 0) = MMINUSP
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMINUSP>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUSP
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMINUSP
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMINUSP>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMINUSP
8     (SKIP&RET 1)


Disassembly of function MMINUSP
(CONST 0) = X
(CONST 1) = -1
(CONST 2) = SIGNUM1
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; -1
4     (GETVALUE&PUSH 0)                   ; X
6     (CALL1&PUSH 2)                      ; SIGNUM1
8     (CALLSR 1 45)                       ; =
11    (UNBIND1)
12    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN MMINUSP* (X) ...)-81|
(CONST 0) = MMINUSP*
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE MMINUSP*>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; MMINUSP*
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; MMINUSP*
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE MMINUSP*>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; MMINUSP*
8     (SKIP&RET 1)


Disassembly of function MMINUSP*
(CONST 0) = X
(CONST 1) = SIGN
(CONST 2) = CSIGN
(CONST 3) = ($NEG $NZ)
(CONST 4) = MEMQ
(CONST 5) = MMINUSP
(CONST 6) = ($POS $PZ)
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (SIGN X)
writes special variable : (SIGN)
25 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (NIL)
4     (BIND 1)                            ; SIGN
6     (GETVALUE&PUSH 0)                   ; X
8     (CALL1 2)                           ; CSIGN
10    (SETVALUE 1)                        ; SIGN
12    (PUSH)
13    (CONST&PUSH 3)                      ; ($NEG $NZ)
14    (CALL2 4)                           ; MEMQ
16    (JMPIF1 L33)
18    (GETVALUE&PUSH 0)                   ; X
20    (CALL1 5)                           ; MMINUSP
22    (JMPIFNOT1 L33)
24    (GETVALUE&PUSH 1)                   ; SIGN
26    (CONST&PUSH 6)                      ; ($POS $PZ)
27    (CALL2 4)                           ; MEMQ
29    (NOT)
30    (UNBIND1)
31    (JMP L34)
33    L33
33    (UNBIND1)
34    L34
34    (UNBIND1)
35    (SKIP&RET 2)


Disassembly of function #:|(DEFUN DBZ-ERR NIL ...)-82|
(CONST 0) = DBZ-ERR
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DBZ-ERR>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DBZ-ERR
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DBZ-ERR
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DBZ-ERR>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DBZ-ERR
8     (SKIP&RET 1)


Disassembly of function DBZ-ERR
(CONST 0) = ERRORSW
(CONST 1) = "Division by zero"
(CONST 2) = MERROR
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ERRORSW)
9 byte-code instructions:
0     (GETVALUE 0)                        ; ERRORSW
2     (JMPIF L9)
4     (CONST&PUSH 1)                      ; "Division by zero"
5     (CALL1 2)                           ; MERROR
7     (SKIP&RET 1)
9     L9
9     (CONST&PUSH 0)                      ; ERRORSW
10    (T)
11    (THROW)


Disassembly of function #:|(DEFUN DBZ-ERR1 (FUNC) ...)-83|
(CONST 0) = DBZ-ERR1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE DBZ-ERR1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; DBZ-ERR1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; DBZ-ERR1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE DBZ-ERR1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; DBZ-ERR1
8     (SKIP&RET 1)


Disassembly of function DBZ-ERR1
(CONST 0) = ERRORSW
(CONST 1) = "Division by zero in ~A function"
(CONST 2) = MERROR
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (ERRORSW)
10 byte-code instructions:
0     (GETVALUE 0)                        ; ERRORSW
2     (JMPIF L10)
4     (CONST&PUSH 1)                      ; "Division by zero in ~A function"
5     (LOAD&PUSH 2)
6     (CALL2 2)                           ; MERROR
8     (SKIP&RET 2)
10    L10
10    (CONST&PUSH 0)                      ; ERRORSW
11    (T)
12    (THROW)


Disassembly of function #:|5.960464477539063E-8-84|
(CONST 0) = 5.960464477539063E-8
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (CONST 0)                           ; 5.960464477539063E-8
1     (SKIP&RET 1)


Disassembly of function #:|(EVAL-WHEN (LOAD EVAL COMPILE) (DEFVAR PIBY2 #))-85|
(CONST 0) = (SPECIAL PIBY2)
(CONST 1) = PIBY2
(CONST 2) = 0.5
(CONST 3) = PI
(CONST 4) = DOUBLE-FLOAT
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (PI)
14 byte-code instructions:
0     (CONST&PUSH 0)                      ; (SPECIAL PIBY2)
1     (CALLS1 90)                         ; PROCLAIM
3     (CONST&PUSH 1)                      ; PIBY2
4     (CALLS1&JMPIF 79 L19)               ; BOUNDP
7     (CONST&PUSH 1)                      ; PIBY2
8     (CONST&PUSH 2)                      ; 0.5
9     (GETVALUE&PUSH 3)                   ; PI
11    (CALLSR&PUSH 2 55)                  ; *
14    (CONST&PUSH 4)                      ; DOUBLE-FLOAT
15    (CALLS2&PUSH 42)                    ; COERCE
17    (CALLS1 82)                         ; SYSTEM::SET-SYMBOL-VALUE
19    L19
19    (CONST 1)                           ; PIBY2
20    (SKIP&RET 1)


Disassembly of function #:|(DEFMACRO T//$ (X Y FUNCTION) ...)-86|
(CONST 0) = T//$
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE T//$>
(CONST 3) = SYSTEM::MAKE-MACRO
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
8 byte-code instructions:
0     (CONST&PUSH 0)                      ; T//$
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; T//$
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE T//$>
5     (CALL1&PUSH 3)                      ; SYSTEM::MAKE-MACRO
7     (CALLS2 130)                        ; SYSTEM::%PUTD
9     (CONST 0)                           ; T//$
10    (SKIP&RET 1)


Disassembly of function T//$
(CONST 0) = 4
(CONST 1) = SYSTEM::MACRO-CALL-ERROR
(CONST 2) = X
(CONST 3) = Y
(CONST 4) = 0.0
(CONST 5) = T//$-FOO
(CONST 6) = //$
1 required argument
1 optional argument
No rest parameter
No keyword parameters
reads special variables: (X Y)
40 byte-code instructions:
0     (LOAD&PUSH 2)
1     (CALLS2&PUSH 71)                    ; LENGTH
3     (CONST&PUSH 0)                      ; 4
4     (CALLSR&JMPIF 1 46 L43)             ; /=
8     (LOAD 2)
9     (CDR)
10    (CAR)
11    (BIND 2)                            ; X
13    (LOAD 5)
14    (CDR)
15    (CDR)
16    (CAR)
17    (BIND 3)                            ; Y
19    (LOAD 8)
20    (CDR)
21    (CDR)
22    (CDR)
23    (CAR&PUSH)
24    (GETVALUE&PUSH 3)                   ; Y
26    (CONST&PUSH 4)                      ; 0.0
27    (CALLS2&JMPIF 1 L48)                ; EQL
30    (CONST&PUSH 6)                      ; //$
31    (GETVALUE&PUSH 2)                   ; X
33    (GETVALUE&PUSH 3)                   ; Y
35    (LIST 3)
37    L37
37    (SKIP 1)
39    (UNBIND 2)
41    (SKIP&RET 3)
43    L43
43    (LOAD&PUSH 2)
44    (CALL1 1)                           ; SYSTEM::MACRO-CALL-ERROR
46    (SKIP&RET 3)
48    L48
48    (CONST&PUSH 5)                      ; T//$-FOO
49    (GETVALUE&PUSH 2)                   ; X
51    (GETVALUE&PUSH 3)                   ; Y
53    (LOAD&PUSH 3)
54    (LIST 4)
56    (JMP L37)


Disassembly of function #:|(DEFUN T//$-FOO (X Y FUNCTION) ...)-87|
(CONST 0) = T//$-FOO
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE T//$-FOO>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; T//$-FOO
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; T//$-FOO
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE T//$-FOO>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; T//$-FOO
8     (SKIP&RET 1)


Disassembly of function T//$-FOO
(CONST 0) = X
(CONST 1) = Y
(CONST 2) = QUOT
3 required arguments
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (Y X)
9 byte-code instructions:
0     (LOAD 3)
1     (BIND 0)                            ; X
3     (LOAD 5)
4     (BIND 1)                            ; Y
6     (GETVALUE&PUSH 0)                   ; X
8     (GETVALUE&PUSH 1)                   ; Y
10    (CALL2 2)                           ; QUOT
12    (UNBIND 2)
14    (SKIP&RET 4)


Disassembly of function #:|(DEFMFUN TAN (X) ...)-88|
(CONST 0) = TAN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TAN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TAN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TAN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TAN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TAN
8     (SKIP&RET 1)


Disassembly of function TAN
(CONST 0) = X
(CONST 1) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&PUSH 161)                   ; SIN
7     (GETVALUE&PUSH 0)                   ; X
9     (CALLS2&PUSH 162)                   ; COS
11    (CALL2 1)                           ; QUOT
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN COT (X) ...)-89|
(CONST 0) = COT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COT
8     (SKIP&RET 1)


Disassembly of function COT
(CONST 0) = X
(CONST 1) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
9 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (GETVALUE&PUSH 0)                   ; X
5     (CALLS2&PUSH 162)                   ; COS
7     (GETVALUE&PUSH 0)                   ; X
9     (CALLS2&PUSH 161)                   ; SIN
11    (CALL2 1)                           ; QUOT
13    (UNBIND1)
14    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SEC (X) ...)-90|
(CONST 0) = SEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SEC
8     (SKIP&RET 1)


Disassembly of function SEC
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 1.0
4     (GETVALUE&PUSH 0)                   ; X
6     (CALLS2&PUSH 162)                   ; COS
8     (CALL2 2)                           ; QUOT
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN CSC (X) ...)-91|
(CONST 0) = CSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSC
8     (SKIP&RET 1)


Disassembly of function CSC
(CONST 0) = X
(CONST 1) = 1.0
(CONST 2) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (X)
8 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; X
3     (CONST&PUSH 1)                      ; 1.0
4     (GETVALUE&PUSH 0)                   ; X
6     (CALLS2&PUSH 161)                   ; SIN
8     (CALL2 2)                           ; QUOT
10    (UNBIND1)
11    (SKIP&RET 2)


Disassembly of function #:|(DECLARE-TOP (FLONUM YY YFLO))-92|
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
2 byte-code instructions:
0     (NIL)
1     (SKIP&RET 1)


Disassembly of function #:|(DEFMFUN ASIN (NUM) ...)-93|
(CONST 0) = ASIN
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASIN>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASIN
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASIN
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASIN>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASIN
8     (SKIP&RET 1)


Disassembly of function ASIN
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ASIN
(CONST 3) = LOGARC
(CONST 4) = 2.44140625E-4
(CONST 5) = ATAN
(CONST 6) = 0.0
(CONST 7) = -1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
45 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALLSR&JMPIF 1 48 L56)             ; >
16    (LOAD&PUSH 0)
17    (CALLS2&PUSH 158)                   ; ABS
19    (CONST&PUSH 4)                      ; 2.44140625E-4
20    (CALLSR&JMPIF 1 47 L64)             ; <
24    (LOAD&PUSH 0)
25    (CALLS2&PUSH 158)                   ; ABS
27    (CONST&PUSH 1)                      ; 1.0
28    (LOAD&PUSH 2)
29    (LOAD&PUSH 3)
30    (CALLSR&PUSH 2 55)                  ; *
33    (CALLSR&PUSH 1 54)                  ; -
36    (CALLS2&PUSH 156)                   ; SQRT
38    (CALL2&PUSH 5)                      ; ATAN
40    (LOAD&PUSH 1)
41    (CONST&PUSH 6)                      ; 0.0
42    (CALLSR&JMPIF 1 47 L67)             ; <
46    (CONST 1)                           ; 1.0
47    L47
47    (PUSH)
48    (CALLSR 2 55)                       ; *
51    (SKIP 1)
53    L53
53    (UNBIND1)
54    (SKIP&RET 2)
56    L56
56    (CONST&PUSH 2)                      ; %ASIN
57    (LOAD&PUSH 1)
58    (CALL2 3)                           ; LOGARC
60    (SKIP 1)
62    (JMP L53)
64    L64
64    (POP)
65    (JMP L53)
67    L67
67    (CONST 7)                           ; -1.0
68    (JMP L47)


Disassembly of function #:|(DEFMFUN ACOS (NUM) ...)-94|
(CONST 0) = ACOS
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACOS>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACOS
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACOS
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACOS>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACOS
8     (SKIP&RET 1)


Disassembly of function ACOS
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ACOS
(CONST 3) = LOGARC
(CONST 4) = 2.44140625E-4
(CONST 5) = 1.5707963267948966
(CONST 6) = ATAN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALLSR&JMPIF 1 48 L43)             ; >
16    (LOAD&PUSH 0)
17    (CALLS2&PUSH 158)                   ; ABS
19    (CONST&PUSH 4)                      ; 2.44140625E-4
20    (CALLSR&JMPIF 1 47 L51)             ; <
24    (CONST&PUSH 1)                      ; 1.0
25    (LOAD&PUSH 1)
26    (LOAD&PUSH 2)
27    (CALLSR&PUSH 2 55)                  ; *
30    (CALLSR&PUSH 1 54)                  ; -
33    (CALLS2&PUSH 156)                   ; SQRT
35    (LOAD&PUSH 1)
36    (CALL2 6)                           ; ATAN
38    (SKIP 1)
40    L40
40    (UNBIND1)
41    (SKIP&RET 2)
43    L43
43    (CONST&PUSH 2)                      ; %ACOS
44    (LOAD&PUSH 1)
45    (CALL2 3)                           ; LOGARC
47    (SKIP 1)
49    (JMP L40)
51    L51
51    (CONST&PUSH 5)                      ; 1.5707963267948966
52    (LOAD&PUSH 1)
53    (CALLSR 1 54)                       ; -
56    (SKIP 1)
58    (JMP L40)


Disassembly of function #:|(DEFMFUN ATAN1 (NUM) ...)-95|
(CONST 0) = ATAN1
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATAN1>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATAN1
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATAN1
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATAN1>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATAN1
8     (SKIP&RET 1)


Disassembly of function ATAN1
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = ATAN
(CONST 3) = -1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALL2&PUSH 2)                      ; ATAN
14    (LOAD&PUSH 1)
15    (CALLS2&JMPIF 147 L28)              ; MINUSP
18    (CONST 1)                           ; 1.0
19    L19
19    (PUSH)
20    (CALLSR 2 55)                       ; *
23    (SKIP 1)
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (CONST 3)                           ; -1.0
29    (JMP L19)


Disassembly of function #:|(DEFMFUN ACOT (NUM) ...)-96|
(CONST 0) = ACOT
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACOT>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACOT
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACOT
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACOT>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACOT
8     (SKIP&RET 1)


Disassembly of function ACOT
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = ATAN
(CONST 3) = -1.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
21 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (CONST&PUSH 1)                      ; 1.0
9     (LOAD&PUSH 1)
10    (CALLS2&PUSH 158)                   ; ABS
12    (CALL2&PUSH 2)                      ; ATAN
14    (LOAD&PUSH 1)
15    (CALLS2&JMPIF 147 L28)              ; MINUSP
18    (CONST 1)                           ; 1.0
19    L19
19    (PUSH)
20    (CALLSR 2 55)                       ; *
23    (SKIP 1)
25    (UNBIND1)
26    (SKIP&RET 2)
28    L28
28    (CONST 3)                           ; -1.0
29    (JMP L19)


Disassembly of function #:|(DEFMFUN ASEC (NUM) ...)-97|
(CONST 0) = ASEC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASEC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASEC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASEC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASEC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASEC
8     (SKIP&RET 1)


Disassembly of function ASEC
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ASEC
(CONST 3) = LOGARC
(CONST 4) = QUOT
(CONST 5) = ACOS
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALLSR&JMPIFNOT 1 47 L20)          ; <
16    (CONST&PUSH 2)                      ; %ASEC
17    (LOAD&PUSH 1)
18    (CALL2 3)                           ; LOGARC
20    L20
20    (LOAD&PUSH 0)
21    (CALL1&PUSH 4)                      ; QUOT
23    (CALL1 5)                           ; ACOS
25    (SKIP 1)
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ACSC (NUM) ...)-98|
(CONST 0) = ACSC
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACSC>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACSC
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACSC
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACSC>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACSC
8     (SKIP&RET 1)


Disassembly of function ACSC
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ACSC
(CONST 3) = LOGARC
(CONST 4) = QUOT
(CONST 5) = ASIN
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
19 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALLSR&JMPIFNOT 1 47 L20)          ; <
16    (CONST&PUSH 2)                      ; %ACSC
17    (LOAD&PUSH 1)
18    (CALL2 3)                           ; LOGARC
20    L20
20    (LOAD&PUSH 0)
21    (CALL1&PUSH 4)                      ; QUOT
23    (CALL1 5)                           ; ASIN
25    (SKIP 1)
27    (UNBIND1)
28    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN SINH (NUM) ...)-99|
(CONST 0) = SINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SINH
8     (SKIP&RET 1)


Disassembly of function SINH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = YY
(CONST 3) = 0.0
(CONST 4) = 2.44140625E-4
(CONST 5) = EXP
(CONST 6) = QUOT
(CONST 7) = 2.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NUM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 2)                            ; YY
10    (CONST&PUSH 3)                      ; 0.0
11    (GETVALUE&PUSH 2)                   ; YY
13    (CALLS2&PUSH 158)                   ; ABS
15    (CONST&PUSH 4)                      ; 2.44140625E-4
16    (CALLSR&JMPIF 1 47 L52)             ; <
20    (GETVALUE&PUSH 2)                   ; YY
22    (CALLS2&PUSH 158)                   ; ABS
24    (CALL1 5)                           ; EXP
26    (STORE 0)
27    (PUSH)
28    (LOAD&PUSH 1)
29    (CALL1&PUSH 6)                      ; QUOT
31    (CALLSR&PUSH 1 54)                  ; -
34    (CONST&PUSH 7)                      ; 2.0
35    (CALL2 6)                           ; QUOT
37    (STORE 0)
38    (GETVALUE&PUSH 2)                   ; YY
40    (CONST&PUSH 3)                      ; 0.0
41    (CALLSR&JMPIF 1 47 L56)             ; <
45    (LOAD 0)
46    L46
46    (SKIP 1)
48    (UNBIND 2)
50    (SKIP&RET 2)
52    L52
52    (GETVALUE 2)                        ; YY
54    (JMP L46)
56    L56
56    (LOAD&PUSH 0)
57    (CALLSR 0 54)                       ; -
60    (JMP L46)


Disassembly of function #:|(DEFMFUN COSH (NUM) ...)-100|
(CONST 0) = COSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COSH
8     (SKIP&RET 1)


Disassembly of function COSH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = EXP
(CONST 3) = QUOT
(CONST 4) = 2.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
18 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CALL1 2)                           ; EXP
13    (STORE 0)
14    (PUSH)
15    (LOAD&PUSH 1)
16    (CALL1&PUSH 3)                      ; QUOT
18    (CALLSR&PUSH 2 53)                  ; +
21    (CONST&PUSH 4)                      ; 2.0
22    (CALL2 3)                           ; QUOT
24    (SKIP 1)
26    (UNBIND1)
27    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN TANH (NUM) ...)-101|
(CONST 0) = TANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE TANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; TANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; TANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE TANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; TANH
8     (SKIP&RET 1)


Disassembly of function TANH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = YY
(CONST 3) = 0.0
(CONST 4) = 2.44140625E-4
(CONST 5) = -2.0
(CONST 6) = EXP
(CONST 7) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NUM)
36 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 2)                            ; YY
10    (CONST&PUSH 3)                      ; 0.0
11    (GETVALUE&PUSH 2)                   ; YY
13    (CALLS2&PUSH 158)                   ; ABS
15    (CONST&PUSH 4)                      ; 2.44140625E-4
16    (CALLSR&JMPIF 1 47 L51)             ; <
20    (CONST&PUSH 5)                      ; -2.0
21    (GETVALUE&PUSH 2)                   ; YY
23    (CALLS2&PUSH 158)                   ; ABS
25    (CALLSR&PUSH 2 55)                  ; *
28    (CALL1 6)                           ; EXP
30    (STORE 0)
31    (PUSH)
32    (CALLS2&PUSH 151)                   ; 1-
34    (LOAD&INC&PUSH 1)
36    (CALL2 7)                           ; QUOT
38    (STORE 0)
39    (GETVALUE&PUSH 2)                   ; YY
41    (CALLS2&JMPIF 146 L55)              ; PLUSP
44    (LOAD 0)
45    L45
45    (SKIP 1)
47    (UNBIND 2)
49    (SKIP&RET 2)
51    L51
51    (GETVALUE 2)                        ; YY
53    (JMP L45)
55    L55
55    (LOAD&PUSH 0)
56    (CALLSR 0 54)                       ; -
59    (JMP L45)


Disassembly of function #:|(DEFMFUN COTH (NUM) ...)-102|
(CONST 0) = COTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE COTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; COTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; COTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE COTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; COTH
8     (SKIP&RET 1)


Disassembly of function COTH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = YY
(CONST 3) = 0.0
(CONST 4) = 2.44140625E-4
(CONST 5) = QUOT
(CONST 6) = -2.0
(CONST 7) = EXP
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NUM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 2)                            ; YY
10    (CONST&PUSH 3)                      ; 0.0
11    (GETVALUE&PUSH 2)                   ; YY
13    (CALLS2&PUSH 158)                   ; ABS
15    (CONST&PUSH 4)                      ; 2.44140625E-4
16    (CALLSR&JMPIF 1 47 L51)             ; <
20    (CONST&PUSH 6)                      ; -2.0
21    (GETVALUE&PUSH 2)                   ; YY
23    (CALLS2&PUSH 158)                   ; ABS
25    (CALLSR&PUSH 2 55)                  ; *
28    (CALL1 7)                           ; EXP
30    (STORE 0)
31    (PUSH)
32    (CALLS2&PUSH 150)                   ; 1+
34    (LOAD&DEC&PUSH 1)
36    (CALL2 5)                           ; QUOT
38    (STORE 0)
39    (GETVALUE&PUSH 2)                   ; YY
41    (CALLS2&JMPIF 146 L57)              ; PLUSP
44    (LOAD 0)
45    L45
45    (SKIP 1)
47    (UNBIND 2)
49    (SKIP&RET 2)
51    L51
51    (GETVALUE&PUSH 2)                   ; YY
53    (CALL1 5)                           ; QUOT
55    (JMP L45)
57    L57
57    (LOAD&PUSH 0)
58    (CALLSR 0 54)                       ; -
61    (JMP L45)


Disassembly of function #:|(DEFMFUN CSCH (NUM) ...)-103|
(CONST 0) = CSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE CSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; CSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; CSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE CSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; CSCH
8     (SKIP&RET 1)


Disassembly of function CSCH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = YY
(CONST 3) = 0.0
(CONST 4) = 2.44140625E-4
(CONST 5) = QUOT
(CONST 6) = EXP
(CONST 7) = 2.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NUM)
48 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 2)                            ; YY
10    (CONST&PUSH 3)                      ; 0.0
11    (GETVALUE&PUSH 2)                   ; YY
13    (CALLS2&PUSH 158)                   ; ABS
15    (CONST&PUSH 4)                      ; 2.44140625E-4
16    (CALLSR&JMPIF 1 47 L64)             ; <
20    (GETVALUE&PUSH 2)                   ; YY
22    (CALLS2&PUSH 158)                   ; ABS
24    (CALLSR&PUSH 0 54)                  ; -
27    (CALL1 6)                           ; EXP
29    (STORE 0)
30    (CONST&PUSH 7)                      ; 2.0
31    (LOAD&PUSH 1)
32    (CALLSR&PUSH 2 55)                  ; *
35    (LOAD&PUSH 1)
36    (CONST&PUSH 4)                      ; 2.44140625E-4
37    (CALLSR&JMPIF 1 47 L70)             ; <
41    (LOAD&PUSH 1)
42    (LOAD&PUSH 2)
43    (CALLSR 2 55)                       ; *
46    L46
46    (PUSH)
47    (CALLS2&PUSH 151)                   ; 1-
49    (CALL2 5)                           ; QUOT
51    (STORE 0)
52    (GETVALUE&PUSH 2)                   ; YY
54    (CALLS2&JMPIF 146 L73)              ; PLUSP
57    (LOAD 0)
58    L58
58    (SKIP 1)
60    (UNBIND 2)
62    (SKIP&RET 2)
64    L64
64    (GETVALUE&PUSH 2)                   ; YY
66    (CALL1 5)                           ; QUOT
68    (JMP L58)
70    L70
70    (CONST 3)                           ; 0.0
71    (JMP L46)
73    L73
73    (LOAD&PUSH 0)
74    (CALLSR 0 54)                       ; -
77    (JMP L58)


Disassembly of function #:|(DEFMFUN SECH (NUM) ...)-104|
(CONST 0) = SECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE SECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; SECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; SECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE SECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; SECH
8     (SKIP&RET 1)


Disassembly of function SECH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = EXP
(CONST 3) = 0.5
(CONST 4) = 2.44140625E-4
(CONST 5) = 0.0
(CONST 6) = QUOT
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
28 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CALLSR&PUSH 0 54)                  ; -
14    (CALL1 2)                           ; EXP
16    (STORE 0)
17    (PUSH)
18    (CONST&PUSH 3)                      ; 0.5
19    (LOAD&PUSH 2)
20    (CONST&PUSH 4)                      ; 2.44140625E-4
21    (CALLSR&JMPIF 1 47 L41)             ; <
25    (LOAD&PUSH 2)
26    (LOAD&PUSH 3)
27    (CALLSR 2 55)                       ; *
30    L30
30    (PUSH)
31    (CALLS2&PUSH 150)                   ; 1+
33    (CALL 3 6)                          ; QUOT
36    (SKIP 1)
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (CONST 5)                           ; 0.0
42    (JMP L30)


Disassembly of function #:|(DEFMFUN ACOSH (NUM) ...)-105|
(CONST 0) = ACOSH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACOSH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACOSH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACOSH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACOSH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACOSH
8     (SKIP&RET 1)


Disassembly of function ACOSH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ACOSH
(CONST 3) = LOGARC
(CONST 4) = 4096.0
(CONST 5) = 2.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
37 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CONST&PUSH 1)                      ; 1.0
10    (CALLSR&JMPIF 1 47 L43)             ; <
14    (LOAD&PUSH 0)
15    (CONST&PUSH 4)                      ; 4096.0
16    (CALLSR&JMPIF 1 48 L51)             ; >
20    (LOAD&PUSH 0)
21    (LOAD&PUSH 1)
22    (CALLSR&PUSH 2 55)                  ; *
25    (CALLS2&PUSH 151)                   ; 1-
27    (CALLS2&PUSH 156)                   ; SQRT
29    (LOAD&PUSH 1)
30    (CALLSR 2 53)                       ; +
33    L33
33    (PUSH)
34    (PUSH-UNBOUND 1)
36    (CALLS2 155)                        ; LOG
38    (SKIP 1)
40    L40
40    (UNBIND1)
41    (SKIP&RET 2)
43    L43
43    (CONST&PUSH 2)                      ; %ACOSH
44    (LOAD&PUSH 1)
45    (CALL2 3)                           ; LOGARC
47    (SKIP 1)
49    (JMP L40)
51    L51
51    (CONST&PUSH 5)                      ; 2.0
52    (LOAD&PUSH 1)
53    (CALLSR 2 55)                       ; *
56    (JMP L33)


Disassembly of function #:|(DEFMFUN ASINH (NUM) ...)-106|
(CONST 0) = ASINH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASINH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASINH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASINH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASINH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASINH
8     (SKIP&RET 1)


Disassembly of function ASINH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = YY
(CONST 3) = 2.44140625E-4
(CONST 4) = 4096.0
(CONST 5) = 2.0
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variables: (YY NUM)
44 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2 174)                        ; COMMON-LISP:FLOAT
8     (BIND 2)                            ; YY
10    (GETVALUE&PUSH 2)                   ; YY
12    (CALLS2&PUSH 158)                   ; ABS
14    (LOAD&PUSH 0)
15    (CONST&PUSH 3)                      ; 2.44140625E-4
16    (CALLSR&JMPIF 1 47 L57)             ; <
20    (LOAD&PUSH 0)
21    (CONST&PUSH 4)                      ; 4096.0
22    (CALLSR&JMPIF 1 48 L60)             ; >
26    (LOAD&PUSH 0)
27    (LOAD&PUSH 1)
28    (CALLSR&PUSH 2 55)                  ; *
31    (CALLS2&PUSH 150)                   ; 1+
33    (CALLS2&PUSH 156)                   ; SQRT
35    (LOAD&PUSH 1)
36    (CALLSR 2 53)                       ; +
39    L39
39    (PUSH)
40    (PUSH-UNBOUND 1)
42    (CALLS2&STORE 155 0)                ; LOG
45    (GETVALUE&PUSH 2)                   ; YY
47    (CALLS2&JMPIF 147 L67)              ; MINUSP
50    (LOAD 0)
51    L51
51    (SKIP 1)
53    (UNBIND 2)
55    (SKIP&RET 2)
57    L57
57    (LOAD 0)
58    (JMP L51)
60    L60
60    (CONST&PUSH 5)                      ; 2.0
61    (LOAD&PUSH 1)
62    (CALLSR 2 55)                       ; *
65    (JMP L39)
67    L67
67    (LOAD&PUSH 0)
68    (CALLSR 0 54)                       ; -
71    (JMP L51)


Disassembly of function #:|(DEFMFUN ATANH (NUM) ...)-107|
(CONST 0) = ATANH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ATANH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ATANH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ATANH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ATANH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ATANH
8     (SKIP&RET 1)


Disassembly of function ATANH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = 2.44140625E-4
(CONST 3) = QUOT
(CONST 4) = 2.0
(CONST 5) = 0.0
(CONST 6) = ATANH
(CONST 7) = T//$-FOO
(CONST 8) = %ATANH
(CONST 9) = LOGARC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
46 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 2)                      ; 2.44140625E-4
12    (CALLSR&JMPIF 1 47 L41)             ; <
16    (LOAD&PUSH 0)
17    (CALLS2&PUSH 158)                   ; ABS
19    (CONST&PUSH 1)                      ; 1.0
20    (CALLSR&JMPIF 1 47 L44)             ; <
24    (CONST&PUSH 1)                      ; 1.0
25    (LOAD&PUSH 1)
26    (CALLS2&PUSH 158)                   ; ABS
28    (CALLSR&JMPIF 1 45 L64)             ; =
32    (CONST&PUSH 8)                      ; %ATANH
33    (LOAD&PUSH 1)
34    (CALL2 9)                           ; LOGARC
36    (SKIP 1)
38    L38
38    (UNBIND1)
39    (SKIP&RET 2)
41    L41
41    (POP)
42    (JMP L38)
44    L44
44    (LOAD&INC&PUSH 0)
46    (CONST&PUSH 1)                      ; 1.0
47    (LOAD&PUSH 2)
48    (CALLSR&PUSH 1 54)                  ; -
51    (CALL2&PUSH 3)                      ; QUOT
53    (PUSH-UNBOUND 1)
55    (CALLS2&PUSH 155)                   ; LOG
57    (CONST&PUSH 4)                      ; 2.0
58    (CALL2 3)                           ; QUOT
60    (SKIP 1)
62    (JMP L38)
64    L64
64    (CONST&PUSH 1)                      ; 1.0
65    (CONST&PUSH 5)                      ; 0.0
66    (CONST&PUSH 6)                      ; ATANH
67    (CALL 3 7)                          ; T//$-FOO
70    (SKIP 1)
72    (JMP L38)


Disassembly of function #:|(DEFMFUN ACOTH (NUM) ...)-108|
(CONST 0) = ACOTH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACOTH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACOTH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACOTH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACOTH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACOTH
8     (SKIP&RET 1)


Disassembly of function ACOTH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = -1.0
(CONST 3) = QUOT
(CONST 4) = 2.0
(CONST 5) = 0.0
(CONST 6) = ACOTH
(CONST 7) = T//$-FOO
(CONST 8) = %ACOTH
(CONST 9) = LOGARC
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
41 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&PUSH 158)                   ; ABS
11    (CONST&PUSH 1)                      ; 1.0
12    (CALLSR&JMPIF 1 48 L33)             ; >
16    (CONST&PUSH 1)                      ; 1.0
17    (LOAD&PUSH 1)
18    (CALLS2&PUSH 158)                   ; ABS
20    (CALLSR&JMPIF 1 45 L56)             ; =
24    (CONST&PUSH 8)                      ; %ACOTH
25    (LOAD&PUSH 1)
26    (CALL2 9)                           ; LOGARC
28    (SKIP 1)
30    L30
30    (UNBIND1)
31    (SKIP&RET 2)
33    L33
33    (CONST&PUSH 1)                      ; 1.0
34    (LOAD&PUSH 1)
35    (CALLSR&PUSH 2 53)                  ; +
38    (CONST&PUSH 2)                      ; -1.0
39    (LOAD&PUSH 2)
40    (CALLSR&PUSH 2 53)                  ; +
43    (CALL2&PUSH 3)                      ; QUOT
45    (PUSH-UNBOUND 1)
47    (CALLS2&PUSH 155)                   ; LOG
49    (CONST&PUSH 4)                      ; 2.0
50    (CALL2 3)                           ; QUOT
52    (SKIP 1)
54    (JMP L30)
56    L56
56    (CONST&PUSH 1)                      ; 1.0
57    (CONST&PUSH 5)                      ; 0.0
58    (CONST&PUSH 6)                      ; ACOTH
59    (CALL 3 7)                          ; T//$-FOO
62    (SKIP 1)
64    (JMP L30)


Disassembly of function #:|(DEFMFUN ASECH (NUM) ...)-109|
(CONST 0) = ASECH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ASECH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ASECH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ASECH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ASECH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ASECH
8     (SKIP&RET 1)


Disassembly of function ASECH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = %ASECH
(CONST 3) = LOGARC
(CONST 4) = QUOT
(CONST 5) = ACOSH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
22 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (GETVALUE&PUSH 0)                   ; NUM
5     (CONST&PUSH 1)                      ; 1.0
6     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
8     (LOAD&PUSH 0)
9     (CALLS2&JMPIF 147 L18)              ; MINUSP
12    (LOAD&PUSH 0)
13    (CONST&PUSH 1)                      ; 1.0
14    (CALLSR&JMPIFNOT 1 48 L22)          ; >
18    L18
18    (CONST&PUSH 2)                      ; %ASECH
19    (LOAD&PUSH 1)
20    (CALL2 3)                           ; LOGARC
22    L22
22    (CONST&PUSH 1)                      ; 1.0
23    (LOAD&PUSH 1)
24    (CALL2&PUSH 4)                      ; QUOT
26    (CALL1 5)                           ; ACOSH
28    (SKIP 1)
30    (UNBIND1)
31    (SKIP&RET 2)


Disassembly of function #:|(DEFMFUN ACSCH (NUM) ...)-110|
(CONST 0) = ACSCH
(CONST 1) = SYSTEM::REMOVE-OLD-DEFINITIONS
(CONST 2) = #<COMPILED-CLOSURE ACSCH>
0 required arguments
0 optional arguments
No rest parameter
No keyword parameters
7 byte-code instructions:
0     (CONST&PUSH 0)                      ; ACSCH
1     (CALL1 1)                           ; SYSTEM::REMOVE-OLD-DEFINITIONS
3     (CONST&PUSH 0)                      ; ACSCH
4     (CONST&PUSH 2)                      ; #<COMPILED-CLOSURE ACSCH>
5     (CALLS2 130)                        ; SYSTEM::%PUTD
7     (CONST 0)                           ; ACSCH
8     (SKIP&RET 1)


Disassembly of function ACSCH
(CONST 0) = NUM
(CONST 1) = 1.0
(CONST 2) = QUOT
(CONST 3) = ASINH
1 required argument
0 optional arguments
No rest parameter
No keyword parameters
reads special variable: (NUM)
10 byte-code instructions:
0     (LOAD 1)
1     (BIND 0)                            ; NUM
3     (CONST&PUSH 1)                      ; 1.0
4     (GETVALUE&PUSH 0)                   ; NUM
6     (CONST&PUSH 1)                      ; 1.0
7     (CALLS2&PUSH 174)                   ; COMMON-LISP:FLOAT
9     (CALL2&PUSH 2)                      ; QUOT
11    (CALL1 3)                           ; ASINH
13    (UNBIND1)
14    (SKIP&RET 2)


Wrote file binary-clisp/trigi.fas
Wrote file /cygdrive/e/temp/maxima/src/trigi.lis