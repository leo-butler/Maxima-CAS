jn(3,4);
0.1320341839226408 ;
j0(1);
0.7651976865579665 ;
bessel_j(0,1.0);
0.7651976865579665 ;
bessel(2,3);
bessel(2,3)$
bessel(2,3.0);
0.1289432494744021;
bessel_j(3,2.0);
0.1289432494744021;

bessel_j(-5,x);
-bessel_j(5,x);
bessel_j(-n,x);
bessel_j(-n,x);

diff(bessel_j(0,x),x);
-bessel_j(1,x);
diff(bessel_j(1,x),x);
bessel_j(0,x)-bessel_j(1,x)/x;
diff(bessel_y(0,x),x);
-bessel_y(1,x);
diff(bessel_y(1,x),x);
bessel_y(0,x)-bessel_y(1,x)/x;
diff(bessel_i(0,x),x);
bessel_i(1,x);
diff(bessel_i(1,x),x);
bessel_i(0,x)-bessel_i(1,x)/x;
diff(bessel_k(0,x),x);
-bessel_k(1,x);
diff(bessel_k(1,x),x);
-bessel_k(1,x)/x-bessel_k(0,x);

besselexpand:true;
true$

bessel_j(1/2,x);
sqrt(2/(%pi*x))*sin(x);
bessel_j(-1/2,x);
sqrt(2/(%pi*x))*cos(x);
bessel_j(3/2,x);
2*(1/2)/x*bessel_j(1/2,x)-bessel_j(-1/2,x);
bessel_j(5/2,x);
2*(3/2)/x*bessel_j(3/2,x)-bessel_j(1/2,x);
bessel_j(-3/2,x);
2*(-1/2)/x*bessel_j(-1/2,x)-bessel_j(1/2,x);
bessel_j(-5/2,x);
2*(-3/2)/x*bessel_j(-3/2,x)-bessel_j(-1/2,x);

bessel_y(1/2,x);
-sqrt(2/(%pi*x))*cos(x);
bessel_y(-1/2,x);
sqrt(2/(%pi*x))*sin(x);
bessel_y(3/2,x);
2*(1/2)/x*bessel_y(1/2,x)-bessel_y(-1/2,x);
bessel_y(5/2,x);
2*(3/2)/x*bessel_y(3/2,x)-bessel_y(1/2,x);
bessel_y(-3/2,x);
2*(-1/2)/x*bessel_y(-1/2,x)-bessel_y(1/2,x);
bessel_y(-5/2,x);
2*(-3/2)/x*bessel_y(-3/2,x)-bessel_y(-1/2,x);

bessel_i(1/2,x);
sqrt(2*x/%pi)*sinh(x)/x;
bessel_i(-1/2,x);
sqrt(2*x/%pi)*cosh(x)/x;
bessel_i(3/2,x);
-2*(1/2)/x*bessel_i(1/2,x)+bessel_i(-1/2,x);
bessel_i(5/2,x);
-2*(3/2)/x*bessel_i(3/2,x)+bessel_i(1/2,x);
bessel_i(-3/2,x);
2*(-1/2)/x*bessel_i(-1/2,x)+bessel_i(1/2,x);
bessel_i(-5/2,x);
2*(-3/2)/x*bessel_i(-3/2,x)+bessel_i(-1/2,x);

bessel_k(1/2,x);
sqrt(%pi/(2*x))*%e^(-x);
bessel_k(-1/2,x);
sqrt(%pi/(2*x))*%e^(-x);
bessel_k(3/2,x);
2*(1/2)/x*bessel_k(1/2,x)+bessel_k(-1/2,x);
bessel_k(5/2,x);
2*(3/2)/x*bessel_k(3/2,x)+bessel_k(1/2,x);
bessel_k(-3/2,x);
-2*(-1/2)/x*bessel_k(-1/2,x)+bessel_k(1/2,x);
bessel_k(-5/2,x);
-2*(-3/2)/x*bessel_k(-3/2,x)+bessel_k(-1/2,x);


(assume(p>0),true);
true$
(assume(4*p+a>0),true);
true$
besselexpand:false;
false$

specint(t^(1/2)*%e^(-a*t/4)*%e^(-p*t),t);
sqrt(%pi)/(2*(p+a/4)^(3/2));

prefer_whittaker:true;
true$

/*
 * Reference:  Table of Integral Transforms.
 */
specint(t^(3/4)*%e^(-t^2/2/b)*%e^(-p*t),t);
3*gamma(3/4)*b^(7/8)*%e^(b*p^2/4)*(8*sqrt(%pi)*%m[-5/8,-1/4](b*p^2/2)/(3*2^ 
 (5/8)*gamma(3/8)*b^(1/4)*sqrt(p))-2^(3/8)*sqrt(%pi)*%m[-5/8,1/4](b*p^2/2)/ 
 (gamma(7/8)*b^(1/4)*sqrt(p)))/4 $

/*
 * Sec. 4.5, formula (33):
 *
 * t^(-1/2)*exp(-2*sqrt(a)*sqrt(t)) ->
 *    sqrt(%pi)/sqrt(p)*exp(a/p)*erfc(sqrt(a)/sqrt(p))
 */
ratsimp(specint(t^(-1/2)*%e^(-2*a^(1/2)*t^(1/2))*%e^(-p*t),t));
-sqrt(%pi)*(erf(sqrt(a)/sqrt(p))-1)*%e^(a/p)/sqrt(p)$

radcan(specint(sin(a*t)*cosh(b*t^2)*%e^(-p*t),t));
-%e^-((p^2+2*%i*a*p+a^2)/(4*b))*(sqrt(%pi)*%e^((2*%i*a*p+a^2)/(2*b))*erf((%i 
 *p+a)/(2*sqrt(b)))-sqrt(%pi)*%e^(a^2/(2*b))*erf((%i*p-a)/(2*sqrt(b)))+sqrt 
 (%pi)*%i*%e^((p^2+2*%i*a*p)/(2*b))*erf((p+%i*a)/(2*sqrt(b)))-sqrt(%pi)*%i*%e 
 ^(p^2/(2*b))*erf((p-%i*a)/(2*sqrt(b)))+(sqrt(%pi)*%i-sqrt(%pi)*%i*%e^(%i*a 
 *p/b))*%e^(p^2/(2*b))-sqrt(%pi)*%e^((2*%i*a*p+a^2)/(2*b))+sqrt(%pi)*%e^(a^2/ 
 (2*b)))/(8*sqrt(b)) $

/*
 * Sec 4.14, formula (27):
 *
 * t^(1/2)*bessel_j(1,2*a^(1/2)*t^(1/2)) ->
 *    sqrt(a)/p^2*exp(-a/p)
 */

specint(t^(1/2)*bessel_j(1,2*a^(1/2)*t^(1/2))*%e^(-p*t),t);
sqrt(a)*%e^-(a/p)/p^2$

/*
 * Sec 4.14, formula (3):
 *
 * t^2*bessel_j(v,a*t) ->
 *    ((v^2-1)/r^3 + 3*p*(p+v*r)/r^5)*(a/R)^v
 *
 * where r = sqrt(p^2+a^2), R = p + r;
 *
 * (Maxima can't currently compute this transform for general v due to a bug
 * in hyp.lisp.)
 */
factor(ratsimp(specint(t^2*bessel_j(1,a*t)*%e^(-p*t),t)));
3*a*p/(p^2+a^2)^(5/2) $

(/* This is the Laplace transform of the Struve H_1 function, see
  http://dlmf.nist.gov/Draft/ST/about_ST.8.13.html */    
 2/(%pi*p)-2*p*log(p/(sqrt(p^2+1)-1))/(%pi*sqrt(p^2+1)),
 /* And this should be the same as the specint of the next test below */
 -diff(%%,p),
 ev(fullratsimp(%%),logexpand:all));
-(sqrt(p^2+1)*(2*p^2*log(sqrt(p^2+1)-1)-2*p^2*log(p))-2*p^2-2)
 /(%pi*p^6+2*%pi*p^4+%pi*p^2)$

(ev(fullratsimp(specint(t*hstruve[1](t)*%e^(-p*t),t)),logexpand:all),
 ratsimp(%%/%));
1$

/*
 * I (rtoy) also have doubts about this integral, but I haven't found
 * any references for this.
 *
 * From the comments for hstf in hypgeo.lisp:
 *
 * hstruve[1](t) = 2/sqrt(%pi)*(t/2)^2/gamma(1+3/2)*%f[1,2]([1],[3/2,5/2],-t^2/4)
 *
 * So
 *
 * hstruve[1](sqrt(t)) = 2/(3*%pi)*t*%f[1,2]([1],[3/2,5/2],-t/4)
 *
 * and the integrand is
 *
 * 2/(3*%pi)*t^(5/2)*exp(-p*t)*%f[1,2]([1],[3/2,5/2],-t/4).
 *
 * From the f19p220, the Laplace transform of this, with s = 7/2,
 * c=-1/4, k = 1, is
 *
 * 2/(3*%pi)*gamma(7/2)/p^(7/2)*%f[2,2]([1,7/2],[3/2,5/2],-1/4/p)
 *
 * From the derivation of SPLITPFQ, we can simplify this
 * hypergeometric function.
 *
 * %f[2,2]([1,7/2],[3/2,5/2],z) =
 *
 *      1
 *     sum z^k/poch(5/2,k)*binomial(1,k) *diff(%f[2,2]([1,5/2],[3/2,5/2],z,k)
 *     k=0
 * 
 * But %f[2,2]([1,5/2],[3/2,5/2],z) = %f[1,1]([1],[3/2],z) 
 * and Maxima knows how to compute this.
 */
ratsimp(specint(t^(3/2)*hstruve[1](t^(1/2))*%e^(-p*t),t));
-%e^-(1/(4*p))*(sqrt(%pi)*sqrt(p)
				*(8*%i*erf(%i/(2*sqrt(p)))*p
				 -%i*erf(%i/(2*sqrt(p))))
		      -2*p*%e^(1/(4*p)))
	/(8*sqrt(%pi)*p^(9/2)) $
 
specint(t*%ibes[0](a*t/2)*%ibes[1](a*t/2)*%e^(-p*t),t);
%ibes[0](a*t/2)*%ibes[1](a*t/2)/p^2 $

/*
 * t^(3/4)*bessel_j(1/2,t)*bessel_j(1/4,t)
 *
 * Luke gives
 *
 * bessel_j(u,t)*bessel_j(v,t)
 *    = (z/2)^(u+v)/gamma(u+1)/gamma(v+1)
 *        * %f[2,3]([(u+v+1)/2,(u+v+2)/2],[u+1,v+1,u+v+1],-z^2)
 *
 * So the integrand is
 *
 * 8/2^(3/4)/sqrt(%pi)/gamma(1/4)*t^(3/2)*%f[2,3]([7/8,11/8],[3/2,5/4,7/4],-t^2)
 *
 * f19p220 gives
 *
 * t^(3/2)*%f[2,3]([7/8,11/8],[3/2,5/4,7/4],-t^2)
 *
 *    -> gamma(5/2)*p^(-5/2)
 *         *%f[4,3]([7/8,11/8,5/2/2,(5/2+1)/2],[3/2,5/4,7/4],-4/p^2)
 *    =  gamma(5/2)*p^(-5/2)
 *         $%f[2,1]([7/8,11/8],[3/2],-4/p^2)
 *
 * And we know %f[2,1]([7/8,11/8],[3/2],z) is
 *
 * -2*(1/(sqrt(z)+1)^(3/4)-1/(1-sqrt(z))^(3/4))/(3*sqrt(z))
 *
 * Applying all of this gives the expected answer below.
 */

specint(t^(3/4)*bessel_j(1/2,t)*bessel_j(1/4,t)*%e^(-p*t),t);
2*%i*(1/(2*%i/p+1)^(3/4)-1/(1-2*%i/p)^(3/4))/(2^(3/4)*gamma(1/4)*p^(3/2)) $

/*
 * Not sure this is right.  We can convert bessel_y to bessel_j,
 * multiply them together and use the results for products of bessel_j
 * functions.
 */
specint(t^(5/2)*bessel_y(1/2,t^(1/2))^2*%e^(-p*t),t);
-12*((-3*sqrt(%pi)*%i*erf(%i/sqrt(p))*p^(5/2)*%e^-(1/p)/8-sqrt(%pi)*%i*erf 
 (%i/sqrt(p))*p^(3/2)*%e^-(1/p)/2-sqrt(%pi)*%i*erf(%i/sqrt(p))*sqrt(p)*%e^- 
 (1/p)/2-3*p^2/4-p/2)/p^2+2*(sqrt(%pi)*%i*erf(%i/sqrt(p))*p^(3/2)*%e^-(1/p)/4 
 +sqrt(%pi)*%i*erf(%i/sqrt(p))*sqrt(p)*%e^-(1/p)/2+p/2)/p-sqrt(%pi)*%i*erf 
 (%i/sqrt(p))*sqrt(p)*%e^-(1/p)/2)/(%pi*p^4) $

/*
 * See formula (42), p. 187:
 *
 * t^(lam-1)*bessel_j(2*u,2*sqrt(a)*sqrt(t))*bessel_j(2*v,2*sqrt(a)*sqrt(t))
 *
 *    -> 2*gamma(lam+u+v)*a^(u+v)/gamma(2*u+1)/gamma(2*v+1)/p^(lam+u+v)
 *        *%f[3,3]([u+v+1/2,u+v+1,lam+u+v],[2*u+1,2*v+1,2*u+2*v+1],-4*a/p)
 *
 * with Re(lam + u + v) > 0.
 *
 * So, we have lam = 3/2, u=v=1/4, a = 1/4, we get
 *
 * 4/%pi/p^2*%f[3,3]([1,3/2,2],[3/2,3/2,2],-1/p)
 *  = 4/%pi/p^2*%f[1,1]([1],[3/2],-1/p)
 *
 * And %f[1,1]([1],[3/2],-1/p) is 
 *
 *     -sqrt(%pi)*%i*erf(%i*sqrt(1/p))*%e^-(1/p)/(2*sqrt(1/p))
 *
 * So, the final result is:
 *
 * -2*%i*erf(%i/sqrt(p))*%e^-(1/p)/(sqrt(%pi)*p^(3/2))
 *
 * But we also have 
 *
 * bessel_j(u,t)*bessel_j(v,t)
 *    = (z/2)^(u+v)/gamma(u+1)/gamma(v+1)
 *        * %f[2,3]([(u+v+1)/2,(u+v+2)/2],[u+1,v+1,u+v+1],-z^2)
 *
 * So bessel_j(1/2,sqrt(t))^2 is
 *
 *    2/%pi*%f[2,3]([1,3/2],[3/2,3/2,2],-t)*sqrt(t)
 * 
 * So the integrand is
 *
 *    2/%pi*t*%f[2,3]([1,3/2],[3/2,3/2,2],-t)
 *     = 2/%pi*t*%f[1,2]([1],[3/2,2],-t)
 *
 * f19p220 then gives us the desired transform:
 *
 *    t*%f[1,2]([1],[3/2,2],-t)
 *      -> gamma(2)*p^(-2)*%f[2,2]([1,2],[3/2,2],-1/p)
 *
 *      = p^(-2)*%f[1,1]([1],[3/2],-1/p)
 *
 * So the final answer is
 *
 *    -%i*erf(%i/sqrt(p))*%e^-(1/p)/(sqrt(%pi)*p^(3/2))
 *
 * Hmm.  This differs from formula 42 above.  I think there's a bug in
 * formula 42, and it should be divided by 2.
 *
 * If we use the expression for the product of Bessel functions and
 * f19p220, we can easily derive the result of formula 42, except,
 * we're missing the factor of 2.  So, I think formula 42 is wrong.
 */

specint(t^(1/2)*bessel_j(1/2,t^(1/2))^2*%e^(-p*t),t);
-%i*erf(%i/sqrt(p))*%e^-(1/p)/(sqrt(%pi)*p^(3/2)) $

/*
 * See formula (8), section 4.16 of Table of Integral Transforms:
 *
 * t^u*bessel_i(v,a*t) -> gamma(u+v+1)*s^(-u-1)*assoc_legendre_p(u,-v,p/s)
 *
 * where s = sqrt(p^2-a^2);
 */
factor(ratsimp(specint(t^(1/2)*bessel_i(1,t)*%e^(-p*t),t)));
3*sqrt(%pi)*assoc_legendre_p(1/2,-1,p/sqrt(p^2-1))/(4*(p^2-1)^(3/4))$

/*
 * %h[2/3,1](sqrt(t)) = bessel_j(2/3,sqrt(t))+%i*bessel_y(2/3,sqrt(t))
 *
 * Formula (34) below gives:
 *
 * t^(u-1/2)*bessel_j(2*v,2*sqrt(a)*sqrt(t)) ->
 *   gamma(u+v+1/2)/sqrt(a)/gamma(2*v+1)*p^(-u)*exp(-a/p/2)*%m[u,v](a/p)
 *
 * Formula (50) gives
 *
 * t^(u-1/2)*bessel_y(2*v,2*sqrt(a)*sqrt(t)) ->
 *   1/sqrt(a)*p^(-u)*exp(-a/p/2)*
 *     (tan((u-v)*%pi)*gamma(u+v-1/2)/gamma(2*v+1) * %m[u,v](a/p)
 *       - sec((u-v)*%pi)*%w[u,v](a/p))
 *
 * But A&S 13.1.34 says
 *
 * %w[k,u](z) = gamma(-2*u)/gamma(1/2-u-k)*%m[k,u](z) 
 *               + gamma(2*u)/gamma(1/2+u-k)*%m[k,-u](z)
 *
 */
specint( t*%h[2/3,1](t^(1/2))*%e^(-p*t),t);
-4*%i*gamma(1/3)*%m[-3/2,1/3](-1/(4*p))*%e^-(1/(8*p))/(3*(-1)^(5/6)*sqrt(3) 
 *gamma(2/3)*p^(3/2))+4*gamma(1/3)*%m[-3/2,1/3](-1/(4*p))*%e^-(1/(8*p))/(3*( 
 -1)^(5/6)*gamma(2/3)*p^(3/2))-8*%i*gamma(2/3)*%m[-3/2,-1/3](-1/(4*p))*%e^- 
 (1/(8*p))/(3*(-1)^(1/6)*sqrt(3)*gamma(1/3)*p^(3/2)) $

/*
 * H[3/4,2](t) = bessel_j(3/4,t)-%i*bessel_y(3/4,t)
 *
 * Sec 4.14, formula (9):
 *
 * t^u*bessel_j(v,a*t) -> gamma(u+v+1)*r^(-u-1)*assoc_legendre_p(u,-v,p/r)
 *
 * where r = sqrt(p^2+a^2)
 *
 * Sec 4.14, formula (48)
 *
 * t^u*bessel_y(v,a*t) -> r^(-u-1)*(gamma(u+v+1)*cot(v*%pi)*assoc_legendre_p(u,-v,p/r)
 *                                  -gamma(u-v+1)*csc(v*%pi)*assoc_legendre_p(u,v,p/r))
 *
 * So, 
 *
 * t^(1/2)*bessej_j(3/4,t) -> gamma(9/4)*r^(-3/2)*assoc_legendre_p(1/2,-3/4,p/r)
 *                         =  5*gamma(1/4)/16*r^(-3/2)*assoc_legendre_p(1/2,-3/4,p/r)
 *
 * t^(1/2)*bessel_y(3/4,t) -> r^(-3/2)*(gamma(9/4)*cot(3/4*%pi)*assoc_legendre_p(1/2,-3/4,p/r)
 *                                      -gamma(3/4)*csc(3/4*%pi)*assoc_legendre_p(1/2,3/4,p/r))
 *                         =  r^(-3/2)*(-gamma(9/4)*assoc_legendre_p(1/2,-3/4,p/r)
 *                                      -gamma(3/4)*sqrt(2)*assoc_legendre_p(1/2,3/4,p/r))
 */
specint( t^(1/2)*%h[3/4,2](t)*%e^(-p*t),t);
5*gamma(1/4)/16/(p^2+1)^(3/4)*assoc_legendre_p(1/2,-3/4,p/sqrt(p^2+1))
+sqrt(2)*%i*assoc_legendre_p(1/2,3/4,p/sqrt(p^2+1))*gamma(3/4)
       /(p^2+1)^(3/4)
       +5*%i*gamma(1/4)*assoc_legendre_p(1/2,-3/4,p/sqrt(p^2+1))
	/(16*(p^2+1)^(3/4))$

/*
 * %h[1/2,1](t) = bessel_j(1/2,t)+%i*bessel_y(1/2,t)
 *
 * So,
 *
 * t^(3/2)*bessel_j(1/2,t) -> gamma(3/2+1/2+1)*r^(-5/2)*assoc_legendre_p(3/2,-1/2,p/r)
 *                         =  2*r^(-5/2)*assoc_legendre_p(3/2,-1/2,p/r)
 * t^(3/2)*bessel_y(1/2,t) -> r^(-5/2)*(gamma(3/2+1/2+1)*cot(%pi/2)*assoc_legendre_p(3/2,-1/2,p/r)
 *                                      -gamma(3/2-1/2+1)*csc(%pi/2)*assoc_legendre_p(3/2,1/2,p/r))
 *                         =  -r^(-5/2)*assoc_legendre_p(3/2,1/2,p/r))
 *
 * assoc_legendre_p(3/2,+/-1/2,z) can be expressed in terms of 
 * hypergeometric functions (A&S 8.1.2).
 *
 * assoc_legendre_p(3/2,-1/2,z) 
 *   = 1/gamma(3/2)*((z+1)/(z-1))^(-1/4)*F(-3/2,5/2;3/2;(1-z)/2)
 *   = sqrt(2)*(z-1)^(1/4)*z*(z+1)^(1/4)/sqrt(%pi)
 *
 * assoc_legendre_p(3/2,1/2,z) 
 *   = 1/gamma(-1/2)*((z+1)/(z-1))^(1/4)*F(-3/2,5/2;-1/2;(1-z)/2)
 *   = sqrt(2)*z*(2*z^2-3)/(sqrt(%pi)*(z-1)^(1/4)*(z+1)^(5/4))
 *
 *
 * So the result should be
 * 
 * t^(3/2)*bessel_j(1/2,t)
 *    -> 4*p/(sqrt(2)*sqrt(%pi)*(p^2+1)^2)
 *
 * t^(3/2)*bessel_y(1/2,t)
 *    -> -sqrt(2)*(p-1)*(p+1)/(sqrt(%pi)*(p^2+1)^2)
 */
specint( t^(3/2)*%h[1/2,1](t)*%e^(-p*t),t);
4/(sqrt(2)*sqrt(%pi)*(1/p^2+1)^2*p^3)
	 -sqrt(2)*%i*(1/(1/p^2+1)-2/((1/p^2+1)^2*p^2))/(sqrt(%pi)*p^2) $


/*
 * Formula 2, p 105:
 *
 * t^(u-1/2)*bessel_y(v,a*t)
 *    -> -2/%pi*gamma(u+v)*(a^2+p^2)^(-u/2)*assoc_legendre_q(u-1,-v,p/sqrt(a^2+p^2))
 *
 * for a > 0, Re u > |Re v|
 *
 * We have u = 2, v = 1, so the result is
 *
 *    -4/%pi/(p^2+a^2)*assoc_legendre_q(1,-1,p/sqrt(p^2+a^2))
 *
 *
 */
specint( t^(3/2)*bessel_y(1,a*t)*%e^(-t),t);
15*%i*(1/(a^2+1)-1)^(3/4)*(1/(sqrt(a^2+1)+1)^(3/2)+1/(1-sqrt(a^2+1))^(3/2))/ 
 (16*sqrt(a^2+1)) $


/*
 * Duplicate
 */
/*
specint( t^2*bessel_j(1,a*t)*%e^(-p*t),t);
3*a/((a^2/p^2+1)^(5/2)*p^4) $
*/

/* Duplicate */
/*
specint(t^(1/2)*bessel_j(1,2*a^(1/2)*t^(1/2))*%e^(-p*t),t);
sqrt(a)*%e^-(a/p)/p^2 $
*/

specint( t^(3/2)*%m[1/2,1](t)*%e^(-p*t),t);
6*(1/(1-1/(p+1/2))+1/((p+1/2)*(1-1/(p+1/2))^2))/(p+1/2)^4 ;
(assume(p>a),true);
true;

specint(%e^(a*t)*t^2*erf(t^(1/2))*%e^(-p*t),t);
15*(1/sqrt(1/(p-a)+1)-1/((p-a)*(1/(p-a)+1)^(3/2))+3/(4*(p-a)^2*(1/(p-a)+1)^ 
 (5/2)))/(4*(p-a)^(7/2)) ;

/*
 * Laplace transforms from Tables of Integral Transforms
 */

/*
 * p 182, (1)
 *
 * bessel_j(v,a*t) -> r^(-1)*(a/R)^v
 *
 * where r = sqrt(p^2+a^2) and R = p + r
 */
(assume(v>0),true);
true$

radcan(specint(bessel_j(v,a*t)*exp(-p*t),t));
a^v/(sqrt(p^2+a^2)*(sqrt(p^2+a^2)+p)^v)$

/*
 * (5)
 * bessel_j(v,a*t)/t -> v^(-1)*(a/R)^v
 *
 * (Maxima doesn't recognize that gamma(v)/gamma(v+1) is 1/v.)
 */
radcan(specint(bessel_j(v,a*t)/t*exp(-p*t),t));
a^v*gamma(v)/((sqrt(p^2+a^2)+p)^v*gamma(v+1))$

/*
 * (7)
 * t^v*bessel_j(v,a*t) -> 2^v/sqrt(%pi)*gamma(v+1/2)*a^v*r^(-2*v-1)
 *
 * Maxima doesn't recognize the relationship between gamma(2*v+1) and
 * gamma(v+1).
 */
radcan(specint(t^v*bessel_j(v,a*t)*exp(-p*t),t));
a^v*gamma(2*v+1)/((p^2+a^2)^((2*v+1)/2)*2^v*gamma(v+1))$

/*
 * (9)
 * t^u*bessel_j(v,a*t) -> gamma(u+v+1)*r^(-u-1)*P(u,-v,p/r)
 */
(assume(v+u+1>0),true);
true$
(assume(a>0),true);
true$

radcan(specint(t^u*bessel_j(v,a*t)*exp(-p*t),t));
assoc_legendre_p(-u-1,-v,p/sqrt(p^2+a^2))*gamma(v+u+1)
	/((p^2+a^2)^((u+1)/2))$

/*
 * (25)
 * bessel_j(0,2*sqrt(a)*sqrt(t)) -> exp(-a/p)/p
 */
specint(bessel_j(0,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
%e^-(a/p)/p$

/*
 * (27)
 * sqrt(t)*bessel_j(1,2*sqrt(a)*sqrt(t)) -> sqrt(a)*p^(-2)*exp(-a/p)
 */
specint(sqrt(t)*bessel_j(1,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
sqrt(a)*%e^-(a/p)/p^2$

/*
 * (29)
 * t^(-1/2)*bessel_j(1,2*sqrt(a)*sqrt(t)) ->
 *    sqrt(%pi)/sqrt(p)*exp(-a/2/p)*bessel_i(v/2,a/2/p)
 */
specint(t^(-1/2)*bessel_j(1,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
sqrt(%pi)*bessel_i(1/2,a/(2*p))*%e^-(a/(2*p))/sqrt(p)$

/*
 * (30)
 * t^(v/2)*bessel_j(v,2*sqrt(a)*sqrt(t)) ->
 *    a^(v/2)/p^(v+1)*exp(-a/p)
 */
specint(t^(v/2)*bessel_j(v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
a^(v/2)*p^(-v-1)*%e^-(a/p)$

/*
 * (31)
 * t^(-v/2)*bessel_j(v,2*sqrt(a)*sqrt(t)) ->
 *    exp(%i*v*%pi)*p^(v-1)/a^(v/2)/gamma(v)*exp(-a/p)*
 *     %gammagreek(v,a/p*exp(-%i*%pi)
 *
 * %gammagreek is the incomplete gamma function.
 */
specint(t^(-v/2)*bessel_j(v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
p^(v-1)*%e^-(a/p)*v*%gammagreek(v,-a/p)/(a^(v/2)*(-1)^v*gamma(v+1))$

/*
 * (32)
 * t^(v/2-1)*bessel_j(v,2*sqrt(a)*sqrt(t)) ->
 *    a^(-v/2)*%gammagreek(v,a/p)
 */
specint(t^(v/2-1)*bessel_j(v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
v*gamma(v)*%gammagreek(v,a/p)/(a^(v/2)*gamma(v+1))$

/*
 * (34)
 * t^(u-1/2)*bessel_j(2*v,2*sqrt(a)*sqrt(t)) ->
 *   gamma(u+v+1/2)/sqrt(a)/gamma(2*v+1)*p^(-u)*exp(-a/p/2)*%m[u,v](a/p)
 *
 * A&S 13.1.32 gives
 *
 *   %m[k,u](z) = exp(-z/2)*z^(u+1/2)*M(1/2+u-k,1+2*u,z)
 *
 * A&S 13.1.27 (Kummer Transformation):
 *
 *   M(a,b,z) = exp(z)*M(b-a,b,-z)
 *
 * So
 *
 *   %m[k,u](z) = exp(z/2)*z^(u+1/2)*M(1/2+u+k,1+2*u,-z)
 *
 * But %m[-k,u](-z) = exp(z/2)*(-z)^(u+1/2)*M(1/2+u+k,1+2*u,-z)
 *
 * Therefore
 *
 *   %m[k,u](z) = (-1)^(u+1/2)*%m[-k,u](-z)
 *
 * So the Laplace transform can also be written as
 *
 *   gamma(u+v+1/2)/sqrt(a)/gamma(2*v+1)*p^(-u)*exp(-a/p/2)
 *     *%m[-u,v](-a/p)*(-1)^(v+1/2)
 *
 * Which is the answer we produce.
 */
prefer_whittaker:true;
true$
(assume(2*v+2*u+1>0),true);
true$

specint(t^(u-1/2)*bessel_j(2*v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
%m[-u,v](-a/p)*%e^-(a/(2*p))*(-1)^(-v-1/2)*gamma(v+u+1/2)
	 /(sqrt(a)*p^u*gamma(2*v+1))$

/*
 * (35)
 * t^(u-1)*bessel_j(2*v,2*sqrt(a)*sqrt(t)) ->
 *    gamma(u+v)*a^v/gamma(2*v+1)/p^(u+v)*%f[1,1](u+v,2*v+1,-a/p)
 */
prefer_whittaker:false;
false$
(assume(v+u>0),true);
true$

specint(t^(u-1)*bessel_j(2*v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
a^v*p^(-v-u)*gamma(v+u)*%f[1,1]([v+u],[2*v+1],-a/p)/gamma(2*v+1)$

/*
 * (45)
 * bessel_y(v,a*t) ->
 *    a^v*cot(v*%pi)/r*R^(-v)-a^(-v)*csc(v*%pi)/r*R^v
 * For |Re v| < 1.
 *
 */
expand(factor(radcan(specint(exp(-p*t)*bessel_y(1/6,a*t),t))));
sqrt(3)*a^(1/6)/(sqrt(p^2+a^2)*(sqrt(p^2+a^2)+p)^(1/6))
	-2*(sqrt(p^2+a^2)+p)^(1/6)/(a^(1/6)*sqrt(p^2+a^2))$

(assume(v1 > 0, v1 < 1), true);
true$
expand(factor(radcan(specint(exp(-p*t)*bessel_y(v1,a*t),t))));
a^v1*cot(%pi*v1)/(sqrt(p^2+a^2)*(sqrt(p^2+a^2)+p)^v1)
       -(sqrt(p^2+a^2)+p)^v1/(a^v1*sqrt(p^2+a^2)*sin(%pi*v1)) $


/*
 * (42)
 *
 * t^(lam-1)*bessel_j(2*u,2*sqrt(a)*sqrt(t))*bessel_j(2*v,2*sqrt(a)*sqrt(t)) ->
 *    gamma(lam+u+v)/gamma(2*u+1)/gamma(2*v+1)*a^(u+v)/p^(lam+u+v)
 *      *%f[3,3]([u+v+1/2,u+v+1,lam+u+v],[2*u+1,2*v+1,2*u+2*v+1],-4*a/p)
 *
 */
(assume(u>0,v>0,lam>0),true);
true$
specint(t^(lam-1)*bessel_j(2*u,2*sqrt(a)*sqrt(t))*bessel_j(2*v,2*sqrt(a)*sqrt(t))*exp(-p*t),t);
a^(v+u)*p^(-v-u-lam)*gamma(v+u+lam)
	      *%f[3,3]([v+u+1/2,v+u+1,v+u+lam],[2*u+1,2*v+1,2*v+2*u+1],-4*a/p)
	/(gamma(2*u+1)*gamma(2*v+1))$ 


/*
 * (44)
 *
 * bessel_y(0,a*t) -> -2/%pi/sqrt(p^2+a^2)*asinh(p/a)
 *
 * Maxima returns 
 *
 * -2/%pi/sqrt(p^2+a^2)*legendre_q(0,p/sqrt(p^2+a^2))
 *
 * But legendre_q(0,p/r) = log((1+p/r)/(1-p/r))/2, where r = sqrt(p^2+a^2). 
 * This simplifies to log((1+p/r)/a) = log(p/a+sqrt(1+(p/a)^2)) = asinh(p/a).
 *
 * So we have -2/%pi/sqrt(p^2+a^2)*asinh(p/a).
 */
specint(bessel_y(0,a*t)*exp(-p*t),t);
-2/%pi/sqrt(p^2+a^2)*legendre_q(0,p/sqrt(p^2+a^2)) $

/*
 * (46)
 *
 * t*bessel_y(0,a*t)
 *     -> 2/%pi/(p^2+a^2)*(1-p/sqrt(p^2+a^2)*log((p+sqrt(p^2+a^2))/a))
 *
 * Maxima returns
 *
 *    -2/%pi/(p^2+a^2)*legendre_q(1,p/sqrt(p^2+a^2))
 *
 * But
 *     legendre_q(1,p/r) = p/r/2*log((r+p)/(r-p)) - 1
 *                       = p/r*log((p+r)/a) - 1
 *
 * So, the transform is
 *
 *     -2/%pi/(p^2+a^2)*(p/r*log((p+r)/a) - 1)
 *
 *       = 2/%pi/(p^2+a^2)*(1-p/sqrt(p^2+a^2)*log((p+sqrt(p^2+a^2))/a))
 */
specint(t*bessel_y(0,a*t)*exp(-p*t),t);
-2/%pi/(p^2+a^2)*legendre_q(1,p/sqrt(p^2+a^2)) $

/*
 * (47)
 *
 * t*bessel_y(1,a*t)
 *     -> -2/%pi/(p^2+a^2)*(p/a+a/sqrt(p^2+a^2)*log((p+sqrt(p^2+a^2))/a)
 *
 * Maxima returns
 *   -4/%pi/(p^2+a^2)*assoc_legendre_q(1,-1,p/r)
 *
 * But
 *
 *   assoc_legendre_q(1,-1,z) 
 *      = sqrt(1-z^2)/2/(z^2-1)*((z^2-1)*log((1+z)/(1-z)) - 2*z)
 *
 * So
 *
 *   assoc_legendre_q(1,-1,p/r) 
 *      = (a/r)/2*(-(r/a)^2)*(-(a/r)^2*log((R/a)^2)-2*p/r)
 *      = 1/2*(p/a+a/r*log(R/a))
 *
 * where R = p + r
 *
 * Finally, the transform is
 *
 * -2/%pi/(p^2+a^2)*(p/a+a/r*log(R/a))
 *
 * as expected.
 *  
 */
specint(t*bessel_y(1,a*t)*exp(-p*t),t);
-4/%pi/(p^2+a^2)*assoc_legendre_q(1,-1,p/sqrt(p^2+a^2))$
