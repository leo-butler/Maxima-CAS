/*************** -*- Mode: MACSYMA; Package: MAXIMA -*-  ******************/
/***************************************************************************
***                                                                    *****
***     Copyright (c) 1984 by William Schelter,University of Texas     *****
***     All rights reserved                                            *****
***************************************************************************/


(kill(all), use_fast_arrays: true, 0);
0;
display(b[1,2]);
done$
exp1:integrate(1/(x^3+2),x);  
-log(x^2-2^(1/3)*x+2^(2/3))/(6*2^(2/3))+atan((2*x-2^(1/3))/(2^(1/3)*sqrt(3)))
					/(2^(2/3)*sqrt(3))
				       +log(x+2^(1/3))/(3*2^(2/3));
/* tops 20 got exp1 below but exp2 is also ok.*/
/* lispm got
-2^(1/3)*log(2^(2/3)*x^2-2*x+2*2^(1/3))/12
 +2^(1/3)*atan((2*2^(2/3)*x-2)/(2*sqrt(3)))/(2*sqrt(3))
 +2^(1/3)*log(x+2^(1/3))/6$ */
exp2:diff(exp1,x);
1/(3*((2*x-2^(1/3))^2/(3*2^(2/3))+1))-(2*x-2^(1/3))
                               /(6*2^(2/3)*(x^2-2^(1/3)*x+2^(2/3)))
                              +1/(3*2^(2/3)*(x+2^(1/3)))$  
				
/* was 1/(3*((2*2^(2/3)*x-2)^2/12+1))-2^(1/3)*(2*2^(2/3)*x-2)
			       /(12*(2^(2/3)*x^2-2*x+2*2^(1/3)))
			      +2^(1/3)/(6*(x+2^(1/3)))$
				which is equal
*/				
radcan(exp2);
1/(x^3+2)$
reveal(exp1:-log(x^2-2^(1/3)*x+2^(2/3))/(6*2^(2/3))+atan((2*x-2^(1/3))/(2^(1/3)*sqrt(3)))
					/(2^(2/3)*sqrt(3))
				       +log(x+2^(1/3))/(3*2^(2/3)),2);
"negterm"+"quotient"+"quotient"$
/* reveal(exp1,3); answers ok but the check program doesn't like "product"(2)
-"quotient"+atan/"product"(2)+log/"product"(2))$ */
g(l):=catch(map(lambda([x],if x < 0 then throw(x) else f(x)),l));
g(l):=catch(map(lambda([x],if x < 0 then throw(x) else f(x)),l))$
g([1,2,3,7]);
[f(1),f(2),f(3),f(7)]$
g([1,2,-3,7]);
-3$
exp1:y^2+b*x;
y^2+b*x$
orderless(y);
done$
y^2+b*x;
b*x+y^2$
%-exp1;
y^2-y^2$
unorder();
[y]$
exp:a^2+b*x;
b*x+a^2$
ordergreat(a);
done$
a^2+b*x;
a^2+b*x$
%-exp;
a^2-a^2$
unorder();
[a]$
exp:a^2+b*x;
b*x+a^2$
ordergreat(a);
done$
a^2+b*x;
a^2+b*x$
%-exp;
a^2-a^2$
unorder();
[a]$
declare(f,linear);
done$
f(2*a+3*b);
3*f(b)+2*f(a)$
f(2*x+y,x);
f(1,x)*y+2*f(x,x)$
declare(f,additive);
done$
f(2*a+3*b);
3*f(b)+2*f(a)$
declare(f,outative);
done$
f(2*a);
2*f(a)$
declare(f,multiplicative);
done$
f(2*a*b);
2*f(a)*f(b)$
(kill(functions),declare(g,lassociative));
done$
g(g(a,b),g(c,d));
g(g(g(a,b),c),d)$
g(g(a,b),g(c,d))-g(a,g(b,g(c,d)));
0$
declare(g,rassociative);
done$
g(g(a,b),g(c,d));
g(g(g(a,b),c),d)$
g(g(a,b),g(c,d))-g(a,g(b,g(c,d)));
0$
(kill(h),declare(h,commutative));
done$
h(x,z,y);
h(x,y,z)$
(kill(h),declare(h,symmetric));
done$
h(x,z,y);
h(x,y,z)$
(kill(h),declare(h,antisymmetric));
done$
h(x,z,y);
-h(x,y,z)$
(kill(all),declare(j,nary));
done$
j(j(a,b),j(c,d));
j(a,b,c,d)$
declare(f,oddfun);
done$
f(-x);
-f(x)$
declare(g,evenfun);
done$
g(-x);
g(x)$
(kill(all),kill(g),declare(f,posfun));
done$
is(f(x) > 0);
true$
(kill(all),b[1,x]:1);
1$
array(f,2,3);
f$
arrayinfo(b);
[hash_table, true, [1, x]]$
/* tops 20:  this is incompatible difference [hashed,2,[1,x]]$ */
arrayinfo(f);
[declared,2,[2,3]]$
block([use_fast_arrays:false],kill(bb),bb[1,x]:7,arrayinfo(bb));
[hashed, 2, [1, x]];
block([use_fast_arrays:true],kill(bb),bb[1,x]:7,arrayinfo(bb));
[hash_table, true, [1, x]]$
properties(?cons);
["system function"]$
assume(var1 > 0);
[var1 > 0]$
properties(var1);
["database info",var1 > 0]$
var2:2;
2$
properties(var2);
[value]$
gradef(r,x,x/r);
r$
gradef(r,y,y/r);
r$
printprops(r,atomgrad);
done$
propvars(atomgrad);
[r]$
gradef(r,x,x/r);
r$
gradef(r,y,y/r);
r$
printprops(r,atomgrad);
done$
propvars(atomgrad);
[r]$
put(%e,transcendental,type);
transcendental$
put(%pi,transcendental,type);
transcendental$
block([algebraic:false],put(%i,algebraic,type));
false$
typeof(x):=block([q],if numberp(x) then return(algebraic),
       if not atom(x) then return(maplist(typeof,x)),q:get(x,type),
       if q = false then error("not numeric") else q);
typeof(x):=block([q],if numberp(x) then return(algebraic),
       if not atom(x) then return(maplist(typeof,x)),q:get(x,type),
       if q = false then error("not numeric") else q)$
block([algebraic:false],errcatch(typeof(2*%e+x*%pi)));
[]$
block([algebraic:false],typeof(2*%e+%pi));
[transcendental,[false,transcendental]]$
is(x^2 >= 2*x-1);
true$
assume(a > 1);
[a > 1]$
is(log(log(a+1)+1) > 0 and a^2+1 > 2*a);
true$
freeof(y,sin(x+2*y));
false$
freeof(cos(y),"*",sin(y)+cos(x));
true$
lfreeof([x],y);
true$
lfreeof([x],y+z);
true$
lfreeof([x,y],y+z);
false$
use_fast_arrays: false;
false;

/* It would be nice to test foreign language characters here.
 * Is there a way to make such tests independent of environment stuff like $LANG ??
 */

declare ("@~`", alphabetic);
done;

[member ('alphabetic, properties ("@")), member ('alphabetic, properties ("`")), member ('alphabetic, properties ("~"))];
[true, true, true];

~`@@`~ : ~@^`~ - @~^~`;
~@^`~ - @~^~`;

(kill (~`@@`~), ~`@@`~);
'~`@@`~;

(remove ("`~", alphabetic), remove ("@", alphabetic));
done;

[member ('alphabetic, properties ("@")), member ('alphabetic, properties ("`")), member ('alphabetic, properties ("~"))];
[false, false, false];

/* Verify that time functions are defined and return numbers.
 * Don't bother trying to verify if the values are reasonable.
 */
[integerp (absolute_real_time ()), floatnump (elapsed_real_time ()), floatnump (elapsed_run_time ())];
[true, true, true];
