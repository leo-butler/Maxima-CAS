/* not found
(kill(allbut(props)),example("//"));
done; */

(kill(allbut(props)),example(additive));
done;

(kill(allbut(props)),example(algsys));
done;

(kill(allbut(props)),example(allroots));
done;

(kill(allbut(props)),example(antisymmetric));
done;

(kill(allbut(props)),example(append));
done;

(kill(allbut(props)),example(arrayinfo));
done;

(kill(allbut(props)),example(arrays));
done;

(kill(allbut(props)),example(at));
done;

(kill(allbut(props)),example(atvalue));
done;

(kill(allbut(props)),example(augcoefmatrix));
done;

(kill(allbut(props)),example(bezout));
done;

/* not found
(kill(allbut(props)),example(block));
done; */

/* not found
(kill(allbut(props)),example(bothcoeff));
done; */

(kill(allbut(props)),example(catch));
done;

(kill(allbut(props)),example(cf));
done;

(kill(allbut(props)),example(cfdisrep));
done;

(kill(allbut(props)),example(cfexpand));
done;

/* user input required - asks if a > 0
(kill(allbut(props)),example(changevar));
done; */

(kill(allbut(props)),example(charpoly));
done;

(kill(allbut(props)),example(coeff));
done;

(kill(allbut(props)),example(combine));
done;

(kill(allbut(props)),example(commutative));
done;

(kill(allbut(props)),example(complex));
done;

(kill(allbut(props)),example(content));
done;

(kill(allbut(props)),example(defmatch));
done;

(kill(allbut(props)),example(deftaylor));
done;

(kill(allbut(props)),example(delete));
done;

(kill(allbut(props)),example(depends));
done;

(kill(allbut(props)),example(derivdegree));
done;

(kill(allbut(props)),example(desolve));
done;

(kill(allbut(props)),example(diff));
done;

(kill(allbut(props)),example(display));
done;

(kill(allbut(props)),example(divide));
done;

/* something bad happens
(kill(allbut(props)),example(do));
done; */

(kill(allbut(props)),example(dotscrules));
done;

(kill(allbut(props)),example(dpart));
done;

(kill(allbut(props)),example(echelon));
done;

(kill(allbut(props)),example(eliminate));
done;

/* user input required
(kill(allbut(props)),example(entermatrix));
done; */

(kill(allbut(props)),example(equations));
done;

(kill(allbut(props)),example(ev));
done;

(kill(allbut(props)),example(evaluation));
done;

(kill(allbut(props)),example(evenfun));
done;

(kill(allbut(props)),example(exp));
done;

(kill(allbut(props)),example(expand));
done;

(kill(allbut(props)),example(factcomb));
done;

(kill(allbut(props)),example(factor));
done;

(kill(allbut(props)),example(factorsum));
done;

(kill(allbut(props)),example(featurep));
done;

(kill(allbut(props)),example(freeof));
done;

(kill(allbut(props)),example(fullmap));
done;

(kill(allbut(props)),example(fullmapl));
done;

(kill(allbut(props)),example(funcsolve));
done;

(kill(allbut(props)),example(functions));
done;

(kill(allbut(props)),example(genmatrix));
done;

(kill(allbut(props)),example(get));
done;

(kill(allbut(props)),example(gfactor));
done;

(kill(allbut(props)),example(gradef));
done;

(kill(allbut(props)),example(horner));
done;

/* something bad happens
(kill(allbut(props)),example(if));
done; */

/* user input required
(kill(allbut(props)),example(ilt));
done; */

(kill(allbut(props)),example(inpart));
done;

(kill(allbut(props)),example(integrate));
done;

(kill(allbut(props)),example(is));
done;

(kill(allbut(props)),example(isolate));
done;

/* not found
(kill(allbut(props)),example(lambda));
done; */

(kill(allbut(props)),example(laplace));
done;

(kill(allbut(props)),example(lassociative));
done;

(kill(allbut(props)),example(let));
done;

(kill(allbut(props)),example(letrules));
done;

(kill(allbut(props)),example(limit));
done;

(kill(allbut(props)),example(linear));
done;

(kill(allbut(props)),example(linsolve));
done;

(kill(allbut(props)),example(listofvars));
done;

(kill(allbut(props)),example(lists));
done;

(kill(allbut(props)),example(logcontract));
done;

(kill(allbut(props)),example(map));
done;

(kill(allbut(props)),example(matchdeclare));
done;

(kill(allbut(props)),example(matrices));
done;

(kill(allbut(props)),example(minfactorial));
done;

(kill(allbut(props)),example(multiplicative));
done;

(kill(allbut(props)),example(multthru));
done;

(kill(allbut(props)),example(nary));
done;

(kill(allbut(props)),example(nounify));
done;

(kill(allbut(props)),example(nroots));
done;

(kill(allbut(props)),example(numfactor));
done;

(kill(allbut(props)),example(nusum));
done;

(kill(allbut(props)),example(oddfun));
done;

(kill(allbut(props)),example(ode2));
done;

(kill(allbut(props)),example(optimize));
done;

(kill(allbut(props)),example(ordergreat));
done;

(kill(allbut(props)),example(orderless));
done;

(kill(allbut(props)),example(outative));
done;

(kill(allbut(props)),example(part));
done;

(kill(allbut(props)),example(partfrac));
done;

(kill(allbut(props)),example(partition));
done;

(kill(allbut(props)),example(pickapart));
done;

(kill(allbut(props)),example(poissimp));
done;

(kill(allbut(props)),example(polarform));
done;

(kill(allbut(props)),example(poly_discriminant));
done;

(kill(allbut(props)),example(posfun));
done;

(kill(allbut(props)),example(powerseries));
done;

(kill(allbut(props)),example(printprops));
done;

(kill(allbut(props)),example(product));
done;

(kill(allbut(props)),example(properties));
done;

(kill(allbut(props)),example(propvars));
done;

(kill(allbut(props)),example(qunit));
done;

(kill(allbut(props)),example(radcan));
done;

(kill(allbut(props)),example(rank));
done;

(kill(allbut(props)),example(rassociative));
done;

/* not found
(kill(allbut(props)),example(ratcoeff));
done; */

(kill(allbut(props)),example(ratdiff));
done;

(kill(allbut(props)),example(ratexpand));
done;

(kill(allbut(props)),example(ratsimp));
done;

(kill(allbut(props)),example(ratsubst));
done;

(kill(allbut(props)),example(ratweight));
done;

(kill(allbut(props)),example(realpart));
done;

(kill(allbut(props)),example(realroots));
done;

(kill(allbut(props)),example(residue));
done;

(kill(allbut(props)),example(resultant));
done;

(kill(allbut(props)),example(reveal));
done;

(kill(allbut(props)),example(reverse));
done;

(kill(allbut(props)),example(risch));
done;

(kill(allbut(props)),example(rootscontract));
done;

(kill(allbut(props)),example(scanmap));
done;

(kill(allbut(props)),example(scsimp));
done;

(kill(allbut(props)),example(solve));
done;

(kill(allbut(props)),example(specint));
done;

(kill(allbut(props)),example(sqfr));
done;

/* requires input
(kill(allbut(props)),example(subst));
done; */

(kill(allbut(props)),example(substinpart));
done;

(kill(allbut(props)),example(substpart));
done;

(kill(allbut(props)),example(sum));
done;

(kill(allbut(props)),example(symmetric));
done;

(kill(allbut(props)),example(syntax));
done;

(kill(allbut(props)),example(taylor));
done;

(kill(allbut(props)),example(taytorat));
done;

(kill(allbut(props)),example(tellrat));
done;

(kill(allbut(props)),example(tellsimp));
done;

(kill(allbut(props)),example(triangularize));
done;

(kill(allbut(props)),example(trig));
done;

(kill(allbut(props)),example(trigexpand));
done;

(kill(allbut(props)),example(trigreduce));
done;

(kill(allbut(props)),example(unorder));
done;

(kill(allbut(props)),example(xthru));
done;

(kill(allbut(props)),example(zeroequiv));
done;

