/* not found
(kill(allbut(props)),example("//"));
done; */

(kill(allbut(props)),example(ADDITIVE));
done;

(kill(allbut(props)),example(ALGSYS));
done;

(kill(allbut(props)),example(ALLROOTS));
done;

(kill(allbut(props)),example(ANTISYMMETRIC));
done;

(kill(allbut(props)),example(APPEND));
done;

(kill(allbut(props)),example(ARRAYINFO));
done;

(kill(allbut(props)),example(ARRAYS));
done;

(kill(allbut(props)),example(AT));
done;

(kill(allbut(props)),example(ATVALUE));
done;

(kill(allbut(props)),example(AUGCOEFMATRIX));
done;

(kill(allbut(props)),example(BEZOUT));
done;

/* not found
(kill(allbut(props)),example(BLOCK));
done; */

/* not found
(kill(allbut(props)),example(BOTHCOEFF));
done; */

(kill(allbut(props)),example(CATCH));
done;

(kill(allbut(props)),example(CF));
done;

(kill(allbut(props)),example(CFDISREP));
done;

(kill(allbut(props)),example(CFEXPAND));
done;

/* user input required - asks if a > 0
(kill(allbut(props)),example(CHANGEVAR));
done; */

(kill(allbut(props)),example(CHARPOLY));
done;

(kill(allbut(props)),example(COEFF));
done;

(kill(allbut(props)),example(COMBINE));
done;

(kill(allbut(props)),example(COMMUTATIVE));
done;

(kill(allbut(props)),example(COMPLEX));
done;

(kill(allbut(props)),example(CONTENT));
done;

(kill(allbut(props)),example(DEFMATCH));
done;

(kill(allbut(props)),example(DEFTAYLOR));
done;

(kill(allbut(props)),example(DELETE));
done;

(kill(allbut(props)),example(DEPENDS));
done;

(kill(allbut(props)),example(DERIVDEGREE));
done;

(kill(allbut(props)),example(DESOLVE));
done;

(kill(allbut(props)),example(DIFF));
done;

(kill(allbut(props)),example(DISPLAY));
done;

(kill(allbut(props)),example(DIVIDE));
done;

/* something bad happens
(kill(allbut(props)),example(DO));
done; */

(kill(allbut(props)),example(DOTSCRULES));
done;

(kill(allbut(props)),example(DPART));
done;

(kill(allbut(props)),example(ECHELON));
done;

(kill(allbut(props)),example(ELIMINATE));
done;

/* user input required
(kill(allbut(props)),example(ENTERMATRIX));
done; */

(kill(allbut(props)),example(EQUATIONS));
done;

(kill(allbut(props)),example(EV));
done;

(kill(allbut(props)),example(EVALUATION));
done;

(kill(allbut(props)),example(EVENFUN));
done;

(kill(allbut(props)),example(EXP));
done;

(kill(allbut(props)),example(EXPAND));
done;

(kill(allbut(props)),example(FACTCOMB));
done;

(kill(allbut(props)),example(FACTOR));
done;

(kill(allbut(props)),example(FACTORSUM));
done;

(kill(allbut(props)),example(FEATUREP));
done;

(kill(allbut(props)),example(FREEOF));
done;

(kill(allbut(props)),example(FULLMAP));
done;

(kill(allbut(props)),example(FULLMAPL));
done;

(kill(allbut(props)),example(FUNCSOLVE));
done;

(kill(allbut(props)),example(FUNCTIONS));
done;

(kill(allbut(props)),example(GENMATRIX));
done;

(kill(allbut(props)),example(GET));
done;

(kill(allbut(props)),example(GFACTOR));
done;

(kill(allbut(props)),example(GRADEF));
done;

(kill(allbut(props)),example(HORNER));
done;

/* something bad happens
(kill(allbut(props)),example(IF));
done; */

/* user input required
(kill(allbut(props)),example(ILT));
done; */

(kill(allbut(props)),example(INPART));
done;

(kill(allbut(props)),example(INTEGRATE));
done;

(kill(allbut(props)),example(IS));
done;

(kill(allbut(props)),example(ISOLATE));
done;

/* not found
(kill(allbut(props)),example(LAMBDA));
done; */

(kill(allbut(props)),example(LAPLACE));
done;

(kill(allbut(props)),example(LASSOCIATIVE));
done;

(kill(allbut(props)),example(LET));
done;

(kill(allbut(props)),example(LETRULES));
done;

(kill(allbut(props)),example(LIMIT));
done;

(kill(allbut(props)),example(LINEAR));
done;

(kill(allbut(props)),example(LINSOLVE));
done;

(kill(allbut(props)),example(LISTOFVARS));
done;

(kill(allbut(props)),example(LISTS));
done;

(kill(allbut(props)),example(LOGCONTRACT));
done;

(kill(allbut(props)),example(MAP));
done;

(kill(allbut(props)),example(MATCHDECLARE));
done;

(kill(allbut(props)),example(MATRICES));
done;

(kill(allbut(props)),example(MINFACTORIAL));
done;

(kill(allbut(props)),example(MULTIPLICATIVE));
done;

(kill(allbut(props)),example(MULTTHRU));
done;

(kill(allbut(props)),example(NARY));
done;

(kill(allbut(props)),example(NOUNIFY));
done;

(kill(allbut(props)),example(NROOTS));
done;

(kill(allbut(props)),example(NUMFACTOR));
done;

(kill(allbut(props)),example(NUSUM));
done;

(kill(allbut(props)),example(ODDFUN));
done;

(kill(allbut(props)),example(ODE2));
done;

(kill(allbut(props)),example(OPTIMIZE));
done;

(kill(allbut(props)),example(ORDERGREAT));
done;

(kill(allbut(props)),example(ORDERLESS));
done;

(kill(allbut(props)),example(OUTATIVE));
done;

(kill(allbut(props)),example(PART));
done;

(kill(allbut(props)),example(PARTFRAC));
done;

(kill(allbut(props)),example(PARTITION));
done;

(kill(allbut(props)),example(PICKAPART));
done;

(kill(allbut(props)),example(POISSIMP));
done;

(kill(allbut(props)),example(POLARFORM));
done;

(kill(allbut(props)),example(POLY_DISCRIMINANT));
done;

(kill(allbut(props)),example(POSFUN));
done;

(kill(allbut(props)),example(POWERSERIES));
done;

(kill(allbut(props)),example(PRINTPROPS));
done;

(kill(allbut(props)),example(PRODUCT));
done;

(kill(allbut(props)),example(PROPERTIES));
done;

(kill(allbut(props)),example(PROPVARS));
done;

(kill(allbut(props)),example(QUNIT));
done;

(kill(allbut(props)),example(RADCAN));
done;

(kill(allbut(props)),example(RANK));
done;

(kill(allbut(props)),example(RASSOCIATIVE));
done;

/* not found
(kill(allbut(props)),example(RATCOEFF));
done; */

(kill(allbut(props)),example(RATDIFF));
done;

(kill(allbut(props)),example(RATEXPAND));
done;

(kill(allbut(props)),example(RATSIMP));
done;

(kill(allbut(props)),example(RATSUBST));
done;

(kill(allbut(props)),example(RATWEIGHT));
done;

(kill(allbut(props)),example(REALPART));
done;

(kill(allbut(props)),example(REALROOTS));
done;

(kill(allbut(props)),example(RESIDUE));
done;

(kill(allbut(props)),example(RESULTANT));
done;

(kill(allbut(props)),example(REVEAL));
done;

(kill(allbut(props)),example(REVERSE));
done;

(kill(allbut(props)),example(RISCH));
done;

(kill(allbut(props)),example(ROOTSCONTRACT));
done;

(kill(allbut(props)),example(SCANMAP));
done;

(kill(allbut(props)),example(SCSIMP));
done;

(kill(allbut(props)),example(SOLVE));
done;

(kill(allbut(props)),example(SPECINT));
done;

(kill(allbut(props)),example(SQFR));
done;

/* requires input
(kill(allbut(props)),example(SUBST));
done; */

(kill(allbut(props)),example(SUBSTINPART));
done;

(kill(allbut(props)),example(SUBSTPART));
done;

(kill(allbut(props)),example(SUM));
done;

(kill(allbut(props)),example(SYMMETRIC));
done;

(kill(allbut(props)),example(SYNTAX));
done;

(kill(allbut(props)),example(TAYLOR));
done;

(kill(allbut(props)),example(TAYTORAT));
done;

(kill(allbut(props)),example(TELLRAT));
done;

(kill(allbut(props)),example(TELLSIMP));
done;

(kill(allbut(props)),example(TRIANGULARIZE));
done;

(kill(allbut(props)),example(TRIG));
done;

(kill(allbut(props)),example(TRIGEXPAND));
done;

(kill(allbut(props)),example(TRIGREDUCE));
done;

(kill(allbut(props)),example(UNORDER));
done;

(kill(allbut(props)),example(XTHRU));
done;

(kill(allbut(props)),example(ZEROEQUIV));
done;

