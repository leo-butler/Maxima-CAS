/******************************************************************************
  rtest_gamma.mac
  Test for Factorial, Gamma function and related functions ...
******************************************************************************/

kill(all);
done;

(oldfpprec:fpprec, fpprec:16, done);
done;

/* Two definitions for numerical test functions
   For big results relerror is used */

(closeto(value,compare,tol):=
  block(
    [abse],
    abse:abs(value-compare),if(abse<tol) then true else abse),
    done);
done;

(relerror(value,compare,tol):=
  block(
    [abse],
    abse:abs((value-compare)/compare),
    if(abse<tol) then true else abse),
    done);
done;

/******************************************************************************
  Factorial
******************************************************************************/

/* Factorial has mirror symmetrie */

declare(z,complex);
done;

conjugate(factorial(z));
factorial(conjugate(z));

conjugate(factorial(x+%i*y));
factorial(x-%i*y);

/* some small positive integers or the real representation */

fpprec:16;
16;

map(factorial, [0,1,2,3,4]);
[1,1,2,6,24];

closeto(factorial(0.0),1.0,1e-13);
true;
closeto(factorial(1.0),1.0,1e-13);
true;
closeto(factorial(2.0),2.0,1e-13);
true;
closeto(factorial(3.0),6.0,1e-13);
true;
closeto(factorial(4.0),24.0,1e-13);
true;

closeto(factorial(0.0b0),1.0b0,1e-13);
true;
closeto(factorial(1.0b0),1.0b0,1e-13);
true;
closeto(factorial(2.0b0),2.0b0,1e-13);
true;
closeto(factorial(3.0b0),6.0b0,1e-13);
true;
closeto(factorial(4.0b0),24.0b0,1e-13);
true;

/* negatvie integers or there real representation */

errcatch(factorial(-1));
[];

errcatch(factorial(-1.0));
[];

errcatch(factorial(-1.0b0));
[];

errcatch(factorial(-10));
[];

errcatch(factorial(-10.0));
[];

errcatch(factorial(-10.0b0));
[];

/* half integral values */

factorial(1/2);
sqrt(%pi)/2;
factorial(-1/2);
sqrt(%pi);
factorial(3/2);
3*sqrt(%pi)/4;
factorial(-3/2);
-2*sqrt(%pi);
factorial(5/2);
15*sqrt(%pi)/8;
factorial(-5/2);
4*sqrt(%pi)/3;

/* Expansion for factorial(z+n) and integer n */

factorial_expand:true;
true;

factorial(z+1);
(z+1)*factorial(z);

factorial(z+2);
(z+1)*(z+2)*factorial(z);

factorial(z+3);
(z+1)*(z+2)*(z+3)*factorial(z);

factorial(z-1);
factorial(z)/z;

factorial(z-1);
factorial(z)/z;

factorial(z-2);
factorial(z)/(z*(z-1));

factorial(z-3);
factorial(z)/(z*(z-1)*(z-2));

/* Nested factorials simplifies too, see SF[1486452] */

factorial(factorial(n)/factorial(n-1));
factorial(n);

factorial(sin(factorial(n)/factorial(n-1)));
factorial(sin(n));

factorial_expand:false;
false;

/* minfactorial does not do this job */

minfactorial(factorial(factorial(n)/factorial(n-1)));
factorial(factorial(n)/factorial(n-1));

/* factcomb is the inverse operation to minfactorial 
   factorial_expand has to be false 
*/

factcomb((n+1)*(n+2)*(n+3)*n!);
(n+3)!;

factcomb(n!/(n*(n-1)*(n-2)));
(n-3)!;

/* No simplifcation for infinities and undeterminates 
   with the exception of inf: inf! -> inf */

map(factorial, [inf,minf,infinity,und,ind]);
[inf,factorial(minf),factorial(infinity),factorial(und),factorial(ind)];

/* factlim is set to the value 100,000. This should work.  */

fpprec:64;
64;

relerror(
  factorial(factlim),
  factorial(bfloat(factlim)),
  1b-58);                      /* We loose a lost of digits in relerror */
true;

factorial(factlim+1);
factorial(100000+1);

/* Some real values in double float and bigfloat precision */

fpprec:64;
64;

closeto(
  factorial(1.3),
  1.166711905198160345041881441202917938533994349719468893970206664b0,
  1e-14);
true;

closeto(
  factorial(2.3),
  2.683437381955768793596327314766711258628187004354778456131475327b0,
  1e-14);
true;

closeto(
  factorial(3.3),
  8.855343360454037018867880138730147153473017114370768905233868579b0,
  1e-14);
true;

closeto(
  factorial(1.3b0),
  1.166711905198160345041881441202917938533994349719468893970206664b0,
  1e-62);
true;

closeto(
  factorial(2.3b0),
  2.683437381955768793596327314766711258628187004354778456131475327b0,
  1e-62);
true;

closeto(
  factorial(3.3b0),
  8.855343360454037018867880138730147153473017114370768905233868579b0,
  1e-61);
true;

/* some complex values in double float and bigfloat precision */

closeto(
  factorial(1.3+%i),
  (0.7191409365372817791473038599462048083254863806205029128993808432b0 
  +0.5406144679098492753783510221774150545811250310680842509749769021b0*%i),
  1e-14);
true;

closeto(
  factorial(2.3+%i),
  (1.113409686125898816660447855698856004567493644359072448693599037b0 
  +1.962554212729935112517511210954259433862073952077096690141827718b0*%i),
  1e-14);
true;

closeto(
  factorial(3.3+%i),
  (1.711697751485530982461966712851965381210655074307842390547049105b0 
  +7.589838588134684687968234851847912136312337686213491526161630507b0*%i),
  1e-14);
true;

closeto(
  factorial(1.3b0+%i),
  (0.7191409365372817791473038599462048083254863806205029128993808432b0 
  +0.5406144679098492753783510221774150545811250310680842509749769021b0*%i),
  1e-62);
true;

closeto(
  factorial(2.3b0+%i),
  (1.113409686125898816660447855698856004567493644359072448693599037b0 
  +1.962554212729935112517511210954259433862073952077096690141827718b0*%i),
  1e-62);
true;

closeto(
  factorial(3.3b0+%i),
  (1.711697751485530982461966712851965381210655074307842390547049105b0 
  +7.589838588134684687968234851847912136312337686213491526161630507b0*%i),
  1e-61);
true;

/******************************************************************************
  General factorial: Tests for genfact(x,y,z)
******************************************************************************/

genfact(0,0,1);
1;
genfact(1,1,1);
1;
genfact(2,2,1);
2;
genfact(3,3,1);
6;
genfact(4,4,1);
24;

genfact(0,0/2,2);
1;
genfact(1,1/2,2);
1;
genfact(2,2/2,2);
2;
genfact(3,3/2,2);
3;
genfact(4,4/2,2);
8;

genfact(10,10,1);
3628800;
genfact(10,9,1);
3628800;
genfact(10,8,1);
1814400;
genfact(10,7,1);
604800;
genfact(10,6,1);
151200;
genfact(10,5,1);
30240;
genfact(10,4,1);
5040;
genfact(10,3,1);
720;
genfact(10,2,1);
90;
genfact(10,1,1);
10;
genfact(10,0,1);
1;

genfact(10,5,2);
3840;
genfact(10,4,2);
1920;
genfact(10,3,2);
480;
genfact(10,2,2);
80;
genfact(10,1,2);
10;
genfact(10,0,2);
1;

/* for non valid integers we get an error */
errcatch(genfact(-2,-2,1));
[];
errcatch(genfact(2,5,2));
[];

/* for all other numbers we get a noun form */
(3/2)!!;
genfact(3/2,0,2);
(2.5)!!;
genfact(2.5,1,2);
(2.5b0)!!;
genfact(2.5b0,1,2);

/******************************************************************************
  Double factorial
******************************************************************************/

/* Double factorial has mirror symmetry */

declare(z,complex);
done;

conjugate(factorial_double(z));
factorial_double(conjugate(z));

conjugate(factorial_double(x+%i*y));
factorial_double(x-%i*y);

/* No simplifcation for infinities and undeterminates 
   with the exception of inf: inf! -> inf */

map(factorial, [inf,minf,infinity,und,ind]);
[inf,factorial(minf),factorial(infinity),factorial(und),factorial(ind)];

/* Test the expansion of Double factorial */

factorial_double(n+1);
factorial_double(n+1);

factorial_double(n+2),factorial_expand:true;
(n+2)*factorial_double(n);

factorial_double(n+3),factorial_expand:true;
factorial_double(n+3);

factorial_double(n+4),factorial_expand:true;
(n+2)*(n+4)*factorial_double(n);

factorial_double(n-1),factorial_expand:true;
factorial(n)/factorial_double(n);

factorial_double(n-2),factorial_expand:true;
factorial_double(n)/n;

factorial_double(n-3),factorial_expand:true;
factorial_double(n-3);

factorial_double(n-4),factorial_expand:true;
factorial_double(n)/(n*(n-2));

/* Some small numbers */

factorial_double(-3);
-1;
errcatch(factorial_double(-2));
[];
factorial_double(-1);
1;
factorial_double(0);
1;
factorial_double(1);
1;
factorial_double(2);
2;
factorial_double(3);
3;
factorial_double(4);
8;
factorial_double(5);
15;
factorial_double(6);
48;
factorial_double(7);
105;
factorial_double(8);
384;
factorial_double(9);
945;
factorial_double(10);
3840;

/* The same for double float */

closeto(
  factorial_double(-3.0),
  -1.0,
  1e-13);
true;

errcatch(factorial_double(-2.0));
[];

closeto(
  factorial_double(-1.0),
  1.0,
  1e-13);
true;

closeto(
  factorial_double(0.0),
  1.0,
  1e-13);
true;

closeto(
  factorial_double(1.0),
  1.0,
  1e-13);
true;

closeto(
  factorial_double(2.0),
  2.0,
  1e-13);
true;

closeto(
  factorial_double(3.0),
  3.0,
  1e-13);
true;

closeto(
  factorial_double(4.0),
  8.0,
  1e-13);
true;

closeto(
  factorial_double(5.0),
  15.0,
  1e-13);
true;

closeto(
  factorial_double(6.0),
  48.0,
  1e-13);
true;

closeto(
  factorial_double(7.0),
  105.0,
  1e-13);
true;

closeto(
  factorial_double(8.0),
  384.0,
  1e-12);
true;

closeto(
  factorial_double(9.0),
  945.0,
  1e-11);
true;

closeto(
  factorial_double(10.0),
  3840.0,
  1e-12);
true;

/* The same with bigfloat */
fpprec:64;
64;

closeto(
  factorial_double(-3.0b0),
  -1.0b0,
  1e-13);
true;

errcatch(factorial_double(-2.0b0));
[];

closeto(
  factorial_double(-1.0b0),
  1.0b0,
  1e-13);
true;

closeto(
  factorial_double(0.0b0),
  1.0b0,
  1e-13);
true;

closeto(
  factorial_double(1.0b0),
  1.0b0,
  1e-13);
true;

closeto(
  factorial_double(2.0b0),
  2.0b0,
  1e-13);
true;

closeto(
  factorial_double(3.0b0),
  3.0b0,
  1e-13);
true;

closeto(
  factorial_double(4.0b0),
  8.0b0,
  1e-13);
true;

closeto(
  factorial_double(5.0b0),
  15.0b0,
  1e-13);
true;

closeto(
  factorial_double(6.0b0),
  48.0b0,
  1e-13);
true;

closeto(
  factorial_double(7.0b0),
  105.0b0,
  1e-13);
true;

closeto(
  factorial_double(8.0b0),
  384.0b0,
  1e-13);
true;

closeto(
  factorial_double(9.0b0),
  945.0b0,
  1e-13);
true;

closeto(
  factorial_double(10.0b0),
  3840.0b0,
  1e-13);
true;

/* Some real and complex values */

closeto(
  factorial_double(-3.5),
  -1.283770376595223397225456287264697304361344685971440894669095353b0,
  1e-13);
true;

closeto(
  factorial_double(-3.5b0),
  -1.283770376595223397225456287264697304361344685971440894669095353b0,
  1e-60);
true;

closeto(
  factorial_double(-3.5+%i),
  (-0.0026442534512730229977827874410755514695008373007370518369259413b0 
   +0.4140148090845355309500755922424659939330568167751526009311942842b0*%i),
  1e-13);
true;

closeto(
  factorial_double(3.5),
  4.832319386136852665658314936437452651454869331098044546829825309b0,
  1e-13);
true;

closeto(
  factorial_double(3.5b0),
  4.832319386136852665658314936437452651454869331098044546829825309b0,
  1e-60);
true;

closeto(
  factorial_double(3.5+%i),
  (-2.165793510810110416038389252512222520262890874310470919228355939b0 
   +4.032141259508464573377851775093179996368679285808989461893416849b0*%i),
  1e-13);
true;

closeto(
  factorial_double(-3.5b0+%i),
  (-0.0026442534512730229977827874410755514695008373007370518369259413b0 
   +0.4140148090845355309500755922424659939330568167751526009311942842b0*%i),
  1e-60);
true;

closeto(
  factorial_double(3.5b0+%i),
  (-2.165793510810110416038389252512222520262890874310470919228355939b0 
   +4.032141259508464573377851775093179996368679285808989461893416849b0*%i),
  1b-60);
true;

closeto(
  factorial_double(3.3b0+%i),
  (-0.401169963963553982868990904015984192029807700247132080411340721b0 
  + 1.778201955902329072861901606357849890890501421219437116360540910b0*%i),
  1b-60);
true;

/******************************************************************************
  Gamma function
******************************************************************************/

/* The Gamma function has mirror symmetry */

declare(z,complex);
done;

conjugate(gamma(z));
gamma(conjugate(z));

conjugate(gamma(x+%i*y));
gamma(x-%i*y);

/* Check simple values for integer, float and bigfloat */

map('gamma,[1,2,3,4,5]);
[1,1,2,6,24];

closeto(gamma(1.0),1.0,1e-13);
true;

closeto(gamma(2.0),1.0,1e-13);
true;

closeto(gamma(3.0),2.0,1e-13);
true;

closeto(gamma(4.0),6.0,1e-13);
true;

closeto(gamma(5.0),24.0,5e-13);  
true;

closeto(gamma(1.0b0),1.0b0,1e-13);
true;

closeto(gamma(2.0b0),1.0b0,1e-13);
true;

closeto(gamma(3.0b0),2.0b0,1e-13);
true;

closeto(gamma(4.0b0),6.0b0,1e-13);
true;

closeto(gamma(5.0b0),24.0b0,1e-13);
true;

/* Check for a zero argument */

errcatch(gamma(0));
[];
errcatch(gamma(0.0));
[];
errcatch(gamma(0.0b0));
[];

/* Check test for negative integer or a representation of a negative integer */

errcatch(gamma(-2));
[];
errcatch(gamma(-2.0));
[];
errcatch(gamma(-2.b0));
[];

/* Check half integral integers as values */

gamma(1/2);
sqrt(%pi);
gamma(-1/2);
-2*sqrt(%pi);
gamma(3/2);
sqrt(%pi)/2;
gamma(-3/2);
4*sqrt(%pi)/3;
gamma(5/2);
3*sqrt(%pi)/4;
gamma(-5/2);
-8*sqrt(%pi)/15;

/* We do not test the default value $gammalim and try not do test
   for big integers, the results are unpredictable.
   Perhaps we can set $gammalim and $factlim to default values which will
   work for most (all) systems.
   Here an attempt for big values which might work generally */

(x:gamma(100000),  /* Try this as the biggest integer */
 relerror(
   bfloat(x),
   gamma(100000.0b0),
   1e-10));
true;

(x:gamma(20001/2),   /* Try this as the biggest half integral value        */
 relerror(           /* perhaps such a big value is not very useful and we */
   bfloat(x),        /* should further reduce the default value eg. to 100 */
   gamma(bfloat(20001/2)),
   1e-10));
true;

kill(x);
done;

/* Check test for overflow in flonum routine gamma-lanczos */
   
relerror(
  gamma(170.0),          /* should not overflow. For GCL 2.6.8 and */
  gamma(170),            /* and CLISP 2.46 the limit is ~171.6243  */
  1e-10);
true;       

errcatch(gamma(175.0));  /* should overflow */
[];

errcatch(gamma(250.0));  /* should overflow */
[];

/* No simplifcation for infinities and undeterminates */

map('gamma, [inf,minf,infinity,und,ind]);
[gamma(inf),gamma(minf),gamma(infinity),gamma(und),gamma(ind)];

/* Check real and complex arguments for double float. 
   This is a check for the numerical routine gamma-lanczos */

closeto(
  gamma(0.5),
  1.772453850905516027298167483341145182797549456122387128213807790b0,
  1e-14);
true;

closeto(
  gamma(1.5),
  0.8862269254527580136490837416705725913987747280611935641069038949b0,
  1e-14);
true;

closeto(
  gamma(2.5),
  1.329340388179137020473625612505858887098162092091790346160355842b0,
  1e-14);
true;

closeto(
  gamma(3.5),
  3.323350970447842551184064031264647217745405230229475865400889606b0,
  1e-14);
true;

relerror(
  gamma(75.5),
  2.859942315653572214189951793671955438617013849084406338093590075b108,
  5e-14);
true;

closeto(
  gamma(0.5+%i),
  (0.3006946172606558162173894638352104402306759641691949986162475934b0 
  -0.4249678794331238126098496402574059704734842223340586518754297249b0*%i),
  1e-14);
true;

closeto(
  gamma(1.5+%i),
  (0.5753151880634517207185443721750111905888222044186561511835535216b0 
  +0.0882106775440939099124646437065074549939338530021656726785327309b0*%i),
  1e-14);
true;

closeto(
  gamma(2.5+%i),
  (0.7747621045510836711653519145560093308892994536258185540967975514b0 
  +0.7076312043795925855872413377347723730797229839219046602013526179b0*%i),
  1e-14);
true;

closeto(
  gamma(3.5+%i),
  (1.229274056998116592326138448655250954143525650142641725040641261b0 
  +2.543840115500065135133455258892940263588606913430580204600179096b0*%i),
  1e-14);
true;

relerror(
  gamma(75.5+%i),
  (-1.092860022497734443706055997676557155572470037327121860702819811b108 
   -2.622326961675321010452173874453854546607804545768376326095021243b108*%i),
  5e-14);
true;

/* Check negative real arguments in double float precision. 
   This is a check for the reflection formula of gamma-lanzos */

closeto(
  gamma(-0.5b0),
  -3.544907701811032054596334966682290365595098912244774256427615580b0,
  1e-14);
true;

closeto(
  gamma(-1.5b0),
  2.363271801207354703064223311121526910396732608163182837618410386b0,
  1e-14);
true;

closeto(
  gamma(-2.5b0),
  -0.9453087204829418812256893244486107641586930432652731350473641546b0,
  1e-14);
true;

/* Check real arguments up to 64 digits. 
   This is a check for the numerical routine bffac */

closeto(
  gamma(0.5b0),
  1.772453850905516027298167483341145182797549456122387128213807790b0,
  1e-61);
true;

closeto(
  gamma(1.5b0),
  0.8862269254527580136490837416705725913987747280611935641069038949b0,
  1e-61);
true;

closeto(
  gamma(2.5b0),
  1.329340388179137020473625612505858887098162092091790346160355842b0,
  1e-61);
true;

closeto(
  gamma(3.5b0),
  3.323350970447842551184064031264647217745405230229475865400889606b0,
  1e-61);
true;

relerror(
  gamma(75.5b0),
  2.859942315653572214189951793671955438617013849084406338093590075b108,
  1e-61);
true;

/* Check negative real arguments up to 64 digits. 
   This is a check for the reflection formula of bffac */

closeto(
  gamma(-0.5b0),
  -3.544907701811032054596334966682290365595098912244774256427615580b0,
  1e-61);
true;

closeto(
  gamma(-1.5b0),
  2.363271801207354703064223311121526910396732608163182837618410386b0,
  1e-61);
true;

closeto(
  gamma(-2.5b0),
  -0.9453087204829418812256893244486107641586930432652731350473641546b0,
  1e-61);
true;

/* Check complex arguments up to 64 digits. 
   This is a check for the numerical routine cbffac */

closeto(
  gamma(0.5b0+%i),
  (0.3006946172606558162173894638352104402306759641691949986162475934b0 
  -0.4249678794331238126098496402574059704734842223340586518754297249b0*%i),
  1e-61);
true;

closeto(
  gamma(1.5b0+%i),
  (0.5753151880634517207185443721750111905888222044186561511835535216b0 
  +0.0882106775440939099124646437065074549939338530021656726785327309b0*%i),
  1e-61);
true;

closeto(
  gamma(2.5b0+%i),
  (0.7747621045510836711653519145560093308892994536258185540967975514b0 
  +0.7076312043795925855872413377347723730797229839219046602013526179b0*%i),
  1e-61);
true;

closeto(
  gamma(3.5b0+%i),
  (1.229274056998116592326138448655250954143525650142641725040641261b0 
  +2.543840115500065135133455258892940263588606913430580204600179096b0*%i),
  1e-61);
true;

relerror(
  gamma(75.5b0+%i),
  (-1.092860022497734443706055997676557155572470037327121860702819811b108 
   -2.622326961675321010452173874453854546607804545768376326095021243b108*%i),
  1e-61);
true;

(fpprec:oldfpprec,done);
done;

/******************************************************************************

  Test the Incomplete Gamma function

******************************************************************************/

(oldfpprec : fpprec,done);
done;

/* Some special values */

gamma_incomplete(a,0);
gamma_incomplete(a,0);

(assume(am < 0, ap > 0),done);
done;

errcatch(gamma_incomplete(-1,0));
[];
errcatch(gamma_incomplete(-2,0));
[];
errcatch(gamma_incomplete(am,0));
[];
gamma_incomplete(1,0);
1;
gamma_incomplete(2,0);
1;
gamma_incomplete(3,0);
2;
gamma_incomplete(ap,0);
gamma(ap);

gamma_incomplete(a,inf);
0;

/* Expansion of the Incomplete Gamma function */

gamma_expand:true;
true;

gamma_incomplete(0,z);
-expintegral_ei(-z)+1/2*(log(-z)-log(-1/z))-log(z);

gamma_incomplete(1/2,z);
sqrt(%pi)*erfc(sqrt(z));

gamma_incomplete(-1/2,z);
2*%e^(-z)/sqrt(z)-2*sqrt(%pi)*erfc(sqrt(z));

gamma_expand:false;
false;

/* The Incomplete Gamma function has mirror symmetry */

declare(ac, complex, zc,complex);
done;

conjugate(gamma_incomplete(ac,zc));
gamma_incomplete(conjugate(ac), conjugate(zc));

conjugate(gamma_incomplete(a+b*%i,x+y*%i));
gamma_incomplete(a-b*%i,x-y*%i);

/* Numerical tests for the Incomplete Gamma function */

/* Test gamma_incomplete(0.25,2.5) for Float and Bigfloat */

closeto(
  gamma_incomplete(0.25,2.5),
  0.03340545777928488523612480546612030546638337899458717728445920914b0,
  1e-14);
true;

fpprec:32;
32;

closeto(
  gamma_incomplete(0.25b0,2.5b0),
  0.03340545777928488523612480546612030546638337899458717728445920914b0,
  1e-30);
true;

fpprec:64;
64;

closeto(
  gamma_incomplete(0.25b0,2.5b0),
  0.03340545777928488523612480546612030546638337899458717728445920914b0,
  1e-62);
true;

/* Test gamma_incomplete(0.25,0.25) for Float and Bigfloat */

closeto(
  gamma_incomplete(0.25,0.25),
  0.9293237832774184425973508042578251762794944752213875213176435274b0,
  1e-14);
true;

fpprec:32;
32;

closeto(
  gamma_incomplete(0.25b0,0.25b0),
  0.9293237832774184425973508042578251762794944752213875213176435274b0,
  1.1e-30);
true;

fpprec:64;
64;

closeto(
  gamma_incomplete(0.25b0,0.25b0),
  0.9293237832774184425973508042578251762794944752213875213176435274b0,
  1.1e-60);
true;

/* Test gamma_incomplete(0.25,0.50) for Float and Bigfloat */

closeto(
  gamma_incomplete(0.25,0.50),
  0.55658041400942713438787175086207b0,
  1e-14);
true;

fpprec:32;
32;

closeto(
  gamma_incomplete(0.25b0,0.50b0),
  0.55658041400942713438787175086207b0,
  1e-30);
true;

fpprec:64;
64;

closeto(
  gamma_incomplete(0.25b0,0.50b0),
  0.5565804140094271343878717508620650091658338999776480841533264361b0,
  2e-62);
true;

fpprec:128;
128;

/* We have a problem with this test.
   The result is equal up to about 90 digits. Not more.
   But for other arguments we can verify the result within the accuracy.
   Furthermore we can verify the calculation against the result
   of the evaluation of expintegral_e. So what is wrong?
*/

/* Exlude this test for now
closeto(
  gamma_incomplete(0.25b0,0.50b0),
  0.55658041400942713438787175086206500916583389997764808415332643613122015052649897833312327325822333229784708198027750127190766504b0,  
  1.0b-124);
true;
*/

/* Test against expintegral_e. This test work! */
closeto(
  gamma_incomplete(0.25b0,0.50b0),
  0.50b0^0.25b0*expintegral_e(1.0b0-0.25b0,0.50b0),
  1e-127);
true;

/* Test gamma_incomplete(0.25,1.50) for Float and Bigfloat */

closeto(
  gamma_incomplete(0.25,1.50),
  0.12115499104033848614860340878369b0,
  1e-15);
true;

fpprec:32;
32;

closeto(
  gamma_incomplete(0.25b0,1.50b0),
  0.12115499104033848614860340878369b0,
  1e-30);
true;

fpprec:64;
64;

closeto(
  gamma_incomplete(0.25b0,1.50b0),
  0.1211549910403384861486034087836891246955052387140720625064500006b0,
  1e-62);
true;

fpprec:128;
128;

closeto(
  gamma_incomplete(0.25b0,1.50b0),
  0.12115499104033848614860340878368912469550523871407206250645000059332022509505923467877887847273887882437030555876962014143410940b0,
  1e-124);
true;

closeto(
  gamma_incomplete(0.25b0,1.50b0),
  1.5b0^0.25b0*expintegral_e(1.0b0-0.25b0,1.50b0),
  1e-128);
true;

fpprec:40;
40;

relerror(
  gamma_incomplete(1000b0,1000b0),
  1.995014933549148239529838438260433407652488769526598301696165147b2564, 
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,100b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,10b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,1b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,-1b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,-10b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,-100b0),
  4.023872600770937735437024339230039857193748642107146325437999104b2564,
  1e-32);
true;

relerror(
  gamma_incomplete(1000b0,-1000b0),
  -9.852818774470566937423668137175694874333788729537950495924821627b3430,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,100b0),
  4.542198120862669429369147083086235039624517049342017449058357596b155,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,10b0),
  9.332621544394415268169923885626670049071596826438162146859296339b155,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,1b0),
  9.332621544394415268169923885626670049071596826438162146859296390b155,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,-1b0),
  9.332621544394415268169923885626670049071596826438162146859296390b155,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,-10b0),
  9.332621544394415268169923885626670049071596826438162126818796880b155,
  1e-32);
true;

relerror(
  gamma_incomplete(100b0,-100b0),
  -1.3474270960118181325667224386845432493096383414519386259680854024b241,
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+10.0*%i,10.0+10.0*%i),
  (712.747910954771249931938579893612285083502899995529160358791610b0 
  -1614.519712336984904341104157868496978481416095290952330318983747b0*%i),
  1e-11);
true;

relerror(
  gamma_incomplete(10b0+10b0*%i,10b0+10b0*%i),
  (712.747910954771249931938579893612285083502899995529160358791610b0 
  -1614.519712336984904341104157868496978481416095290952330318983747b0*%i),
  4e-36);
true;

relerror(
  gamma_incomplete(10.0+10*%i,10.0+5*%i),
  (3795.479456353067145208395441052660229834399956460948716792241863b0 
  -1859.399046776284485239753978633491801182777480033526406270435152b0*%i),
  1e-10);
true;

relerror(
  gamma_incomplete(10.0b0+10*%i,10.0b0+5*%i),
  (3795.479456353067145208395441052660229834399956460948716792241863b0 
  -1859.399046776284485239753978633491801182777480033526406270435152b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+5*%i,10.0+5*%i),
  (22616.57428441264599471916533645601396385068769401974320192387776b0 
  -41760.26634389514228374497096679850877647381173070930602051580693b0*%i),
  5e-10);
true;

relerror(
  gamma_incomplete(10.0b0+5*%i,10.0b0+5*%i),
  (22616.57428441264599471916533645601396385068769401974320192387776b0 
  -41760.26634389514228374497096679850877647381173070930602051580693b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10+5*%i,10+2.5*%i),
  (55884.99767768350551452192526458363894624371018195106017631282130b0 
  -30587.35558698211815103119732529095917842073159139555085583572089b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10b0+5*%i,10b0+2.5*%i),
  (55884.99767768350551452192526458363894624371018195106017631282130b0 
  -30587.35558698211815103119732529095917842073159139555085583572089b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+2.5*%i,10.0+2.5*%i),
  (98307.31859173691954817642978681043594336734907098079356276769738b0 
  -69378.82767710646665454093742183442049572498499915146277510648781b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10.0b0+2.5*%i,10.0b0+2.5*%i),
  (98307.31859173691954817642978681043594336734907098079356276769738b0 
  -69378.82767710646665454093742183442049572498499915146277510648781b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+2.5*%i,10.0+1.5*%i),
  (119713.97958915216843109406780063078781556428789769599762881675530b0 
  -44021.05551717694140528840726282083152859527358436513276174120234b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10.0b0+2.5*%i,10.0b0+1.5*%i),
  (119713.97958915216843109406780063078781556428789769599762881675530b0 
  -44021.05551717694140528840726282083152859527358436513276174120234b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+1.5*%i,10.0+1.5*%i),
  (-143260.5455945276009736506823530548923946268185687353440779787855b0 
  -36427.8601104063533811294405176711748076293661563594190640674077b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10.0b0+1.5*%i,10.0b0+1.5*%i),
  (-143260.5455945276009736506823530548923946268185687353440779787855b0 
  -36427.8601104063533811294405176711748076293661563594190640674077b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10.0+1.5*%i,10.0+0.5*%i),
  (-134422.2837349310843015830622649231296922981730868773827217434186b0 
  -76495.4696532860249045908863041952283847028641854696387454419024b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10.0b0+1.5*%i,10.0b0+0.5*%i),
  (-134422.2837349310843015830622649231296922981730868773827217434186b0 
  -76495.4696532860249045908863041952283847028641854696387454419024b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(10+0.5*%i,10+0.5*%i),
  (70217.4190738045440197722508789471776325390496700488861347101465b0 
  +148228.5649085354026330085827685305718428914334429314381378279173b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(10b0+0.5*%i,10b0+0.5*%i),
  (70217.4190738045440197722508789471776325390496700488861347101465b0 
  +148228.5649085354026330085827685305718428914334429314381378279173b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(5.0+5*%i,5.0+5*%i),
  (-0.4806117328699535298510981197039733622773799503543787399412087606b0 
   +0.8919199556012029365414433316086474496955099800079200844577588174b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(5.0b0+5*%i,5.0b0+5*%i),
  (-0.4806117328699535298510981197039733622773799503543787399412087606b0 
   +0.8919199556012029365414433316086474496955099800079200844577588174b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(5.0+5*%i,5.0+2.5*%i),
  (-1.564618625118515702134408016446776958254116141951281337045968096b0 
   +0.763213115623024892186357289469889653460737525026968402880536542b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(5.0b0+5*%i,5.0b0+2.5*%i),
  (-1.564618625118515702134408016446776958254116141951281337045968096b0 
   +0.763213115623024892186357289469889653460737525026968402880536542b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(5.0+2.5*%i,5.0+2.5*%i),
  (-3.966094476128530812031476427059327525923710898646502835891758741b0 
   -3.843825405733108837026233752472379492035828310495276258481876760b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(5.0b0+2.5*%i,5.0b0+2.5*%i),
  (-3.966094476128530812031476427059327525923710898646502835891758741b0 
   -3.843825405733108837026233752472379492035828310495276258481876760b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(5.0+2.5*%i,5.0-2.5*%i),
  (24.28851242625584709660092800462769890376139980405107830536077980b0
  -13.30717877353455881129062577273028018783505328101266063709140224b0*%i),
  1e-15);
true;

relerror(
  gamma_incomplete(5.0b0+2.5*%i,5.0b0-2.5*%i),
  (24.28851242625584709660092800462769890376139980405107830536077980b0
  -13.30717877353455881129062577273028018783505328101266063709140224b0*%i),
  1e-32);
true;

relerror(
  gamma_incomplete(5.0-2.5*%i,5.0-2.5*%i),
  (-3.966094476128530812031476427059327525923710898646502835891758741b0 
   +3.843825405733108837026233752472379492035828310495276258481876760b0*%i),
  1e-14);
true;

relerror(
  gamma_incomplete(5.0b0-2.5*%i,5.0b0-2.5*%i),
  (-3.966094476128530812031476427059327525923710898646502835891758741b0 
   +3.843825405733108837026233752472379492035828310495276258481876760b0*%i),
  1e-32);
true;

/******************************************************************************
  Test gamma_incomplete against expintegral_e
******************************************************************************/

block([badpoints : [], 
       ratprint : false,
       abserr : 0,
       maxerr : -1,
       zlimit : 5,
       eps    : 1e-12],
  for a:1 thru 2 step 0.1 do
  (
    for z: -zlimit thru zlimit step 1.0 do
    (
      if is(notequal(z,0.0) and notequal(a,0.0)) then
      (
        zf : float(z),
        af : float(a),
        result : gamma_incomplete(af,zf),
        answer : rectform(zf^af*expintegral_e(1.0-af,zf)),
        abserr : abs(result - answer),
	maxerr : max(maxerr, abserr),
        if abserr > eps then
        (
          badpoints : cons([[a, z], result, answer, abserr], badpoints)
        ) 
      )
    )
  ),
  /* 
   * For debugging, if there are any bad points, return the maximum error 
   * found as the first element.
   */
  if badpoints # [] then
    cons(maxerr, badpoints)
  else
    badpoints
);
[];


/******************************************************************************
  Test Generalized Incomplete Gamma function
******************************************************************************/

/* Some special values */

(kill(a), assume(a>0), done);
done;

gamma_incomplete_generalized(a,z1,0);
gamma_incomplete(a,z1)-gamma(a);

gamma_incomplete_generalized(a,z1,0.0);
gamma_incomplete(a,z1)-gamma(a);

gamma_incomplete_generalized(a,z1,0.0b0);
gamma_incomplete(a,z1)-gamma(a);

gamma_incomplete_generalized(a,0,z2);
gamma(a)- gamma_incomplete(a,z2);

gamma_incomplete_generalized(a,0.0,z2);
gamma(a)- gamma_incomplete(a,z2);

gamma_incomplete_generalized(a,0.0b0,z2);
gamma(a)- gamma_incomplete(a,z2);

gamma_incomplete_generalized(a,z1,inf);
gamma_incomplete(a,z1);

gamma_incomplete_generalized(a,inf,z2);
-gamma_incomplete(a,z2);

gamma_incomplete_generalized(a,0,inf);
gamma(a);

gamma_incomplete_generalized(a,x,x);
0;

gamma_incomplete_generalized(a,1.0,1.0b0);
0;

/* Mirror symmetry */

declare(a,complex, z1,complex, z2, complex);
done;

conjugate(gamma_incomplete_generalized(a,z1,z2));
gamma_incomplete_generalized(conjugate(a),conjugate(z1),conjugate(z2));

(kill(a,b,x1,x2,y1,x2),done);
done;

conjugate(gamma_incomplete_generalized(a+%i*b,x1+%i*y1,x2+%i*y2));
gamma_incomplete_generalized(a-%i*b,x1-%i*y1,x2-%i*y2);

/* Test numerical evaluation for some values */

closeto(
  gamma_incomplete_generalized(0.15,0.10,0.90),
  1.285210772938496575538196624140369253496313719924712338486508252b0,
  1e-14);
true;

fpprec:64;
64;

closeto(
  gamma_incomplete_generalized(0.15b0,0.10b0,0.90b0),
  1.285210772938496575538196624140369253496313719924712338486508252b0,
  1b-62);
true;

closeto(
  gamma_incomplete_generalized(0.15+%i,0.10+%i,0.90+%i),
  (-0.03956290928621934869542750861441673192206453223955788892863857789b0 
   -0.13316249485419500645510117515710482169661446536096647384481038655b0*%i),
  1e-14);
true;

closeto(
  gamma_incomplete_generalized(0.15b0+%i,0.10b0+%i,0.90b0+%i),
  (-0.03956290928621934869542750861441673192206453223955788892863857789b0 
   -0.13316249485419500645510117515710482169661446536096647384481038655b0*%i),
  1b-62);
true;

closeto(
  gamma_incomplete_generalized(-0.15+%i,0.10+%i,0.90+%i),
  (-0.07903699552278027449948116754698066920498863638107044857029927559b0 
   -0.10615739775378488990365404098165130400907362070260244159331987806b0*%i),
  1e-14);
true;

closeto(
  gamma_incomplete_generalized(-0.15b0+%i,0.10b0+%i,0.90b0+%i),
  (-0.07903699552278027449948116754698066920498863638107044857029927559b0 
   -0.10615739775378488990365404098165130400907362070260244159331987806b0*%i),
  1b-62);
true;

/******************************************************************************

  Test Regularized Incomplete Gamma function

******************************************************************************/

/* Specialized values */

gamma_incomplete_regularized(a,0);
gamma_incomplete_regularized(a,0);

(assume(ap>0,am<0),done);
done;

errcatch(gamma_incomplete_regularized(am,0));
[];
gamma_incomplete_regularized(ap,0);
1;
gamma_incomplete_regularized(0,z);
0;
gamma_incomplete_regularized(a,inf);
0;

/* Expand gamma_incomplete_regularized */

gamma_expand:true;
true;

gamma_incomplete_regularized(1,z);
%e^(-z);

gamma_incomplete_regularized(a+1,z);
gamma_incomplete_regularized(a,z)+%e^(-z)*z^a/gamma(a+1);

gamma_incomplete_regularized(a-1,z);
gamma_incomplete_regularized(a,z)-%e^(-z)*z^(a-1)/gamma(a);

gamma_incomplete_regularized(1/2,z);
erfc(sqrt(z));
gamma_incomplete_regularized(-1/2,z);
erfc(sqrt(z))-%e^(-z)/sqrt(%pi)/sqrt(z);
gamma_incomplete_regularized(3/2,z);
erfc(sqrt(z))+2*sqrt(z)*%e^(-z)/sqrt(%pi);
gamma_incomplete_regularized(-3/2,z);
erfc(sqrt(z))-3*(4*z/3-2/3)*%e^(-z)/(4*sqrt(%pi)*z^(3/2));

/* Test expansion for half integral values against expansion of 
   gamma_incomplete 
*/

expand(gamma_incomplete_regularized(5/2,z)-gamma_incomplete(5/2,z)/gamma(5/2));
0;
expand(gamma_incomplete_regularized(-5/2,z)-gamma_incomplete(-5/2,z)/gamma(-5/2));
0;
expand(gamma_incomplete_regularized(7/2,z)-gamma_incomplete(7/2,z)/gamma(7/2));
0;
expand(gamma_incomplete_regularized(-7/2,z)-gamma_incomplete(-7/2,z)/gamma(-7/2));
0;
expand(gamma_incomplete_regularized(9/2,z)-gamma_incomplete(9/2,z)/gamma(9/2));
0;
expand(gamma_incomplete_regularized(-9/2,z)-gamma_incomplete(-9/2,z)/gamma(-9/2));
0;

gamma_expand:false;
false;

/* Some numerical tests */

fpprec:64;
64;

closeto(
  gamma_incomplete_regularized(0.25,0.15),
  0.3331718023153566353128831003164180886983644245472471410932121590b0,
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(0.25b0,0.15b0),
  0.3331718023153566353128831003164180886983644245472471410932121590b0,
  1b-62);
true;

closeto(
  gamma_incomplete_regularized(-0.25,0.15),
   -0.3747953569677745583399657181155178573572870781780605755597341785b0,
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(-0.25b0,0.15b0),
   -0.3747953569677745583399657181155178573572870781780605755597341785b0,
  1b-61);
true;

closeto(
  gamma_incomplete_regularized(-0.25,-0.15),
  (0.1206888313473692669850487605186163406801228067412581029970643626b0 
  +0.8793111686526307330149512394813836593198771932587418970029356374b0*%i),
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(-0.25b0,-0.15b0),
  (0.1206888313473692669850487605186163406801228067412581029970643626b0 
  +0.8793111686526307330149512394813836593198771932587418970029356374b0*%i),
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(0.25,0.15+%i),
  (-0.0241833450538703040924257417951024895368614341619005659619193200b0 
   -0.1759768209797086273285777898669237251900625192446301525551431309b0*%i),
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(0.25b0,0.15b0+%i),
  (-0.0241833450538703040924257417951024895368614341619005659619193200b0 
   -0.1759768209797086273285777898669237251900625192446301525551431309b0*%i),
  1b-62);
true;

closeto(
  gamma_incomplete_regularized(0.25,0.15-%i),
  (-0.0241833450538703040924257417951024895368614341619005659619193200b0 
   +0.1759768209797086273285777898669237251900625192446301525551431309b0*%i),
  1e-15);
true;

closeto(
  gamma_incomplete_regularized(0.25b0,0.15b0-%i),
  (-0.0241833450538703040924257417951024895368614341619005659619193200b0 
   +0.1759768209797086273285777898669237251900625192446301525551431309b0*%i),
  1b-62);
true;

(fpprec:oldfpprec,done);
done;
