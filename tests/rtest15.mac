/* This file contains tests added since April 2002 */

kill(allbut(props));
done$

/* apropos function added 7 April 2002 */
apropos('TR_OPTIMIZE_MAX_LOOP);
[TR_OPTIMIZE_MAX_LOOP]$

/* Test introduced 7 April 2002. Bug fix incorporated 9 June 2002 */
integrate(3^log(x),x);
3^((1/LOG(3)+1)*LOG(x))/((1/LOG(3)+1)*LOG(3))$

/* Wester[1995] Problem 84 - Known failure - 7 April 2002 */
integrate(sqrt(x+1/x-2),x,0,1);
4/3$

/* Bug reported by Kevin Ellwood.  Fixed Mar 11 2004 */
integrate(exp(-k*t)/sqrt(k*t),t);
SQRT(%PI)*ERF(SQRT(k*t))/k$

/* A bug in CHEBYF.  Fixed 20 Apr 2004. */

kill(t,k);
DONE$
integrate(sqrt(k*t)*t,t);
2*t^2*SQRT(k*t)/5$
integrate(sqrt(k*t)*t^(1/3),t);
6*t^(4/3)*SQRT(k*t)/11$
integrate(sqrt(k*t)/t^(3/2),t);
SQRT(k*t)*LOG(t)/SQRT(t)$
integrate(sqrt(k*t)/sqrt(t),t);
SQRT(t)*SQRT(k*t)$
kill(t,k);
DONE$

/* second thru tenth code added 9 June 2002 */
l : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$
FIRST(l);
1$ 
SECOND(l);
2$
THIRD(l);
3$
FOURTH(l);
4$
FIFTH(l);
5$
SIXTH(l);
6$
SEVENTH(l);
7$
EIGHTH(l);
8$
NINTH(l);
9$
TENTH(l);
10$

/* ASSOC tests */
ASSOC(1,[x=2]);
FALSE$
ASSOC(x,[x=2]);
2$
ASSOC(1,[x=2],foobar);
foobar$

/* EVERY tests */
EVERY([]);
FALSE$
EVERY([FALSE]);
FALSE$
EVERY([FALSE,FALSE]);
FALSE$
EVERY(FALSE);
FALSE$
EVERY(FALSE,FALSE);
FALSE$
EVERY(TRUE);
TRUE$
EVERY([TRUE]);
TRUE$
EVERY([TRUE,TRUE]);
TRUE$
EVERY(TRUE,TRUE);
TRUE$
EVERY([TRUE,FALSE]);
FALSE$
EVERY(TRUE,FALSE);
FALSE$
/* Some older versions of GCL had a bug that resulted in a failure of the */
/* following. */
primep(80630964769);
TRUE$


/* Maxima has a bug causing an incorrect answer for the second integral. */
integrate(diff(f(x,y),x,1,y,1),x);
'DIFF(f(x,y),y,1)$
integrate(diff(f(x,y),x,1,y,1),y);
'DIFF(f(x,y),x,1)$
/* The same bug causes a bug with the second integral in this set. */
h(x,y):=x*y*diff(f(x,y),x,1,y,1);
h(x,y):=x*y*DIFF(f(x,y),x,1,y,1)$
integrate(h(x,y),x);
'INTEGRATE(x*'DIFF(f(x,y),x,1,y,1)*y,x)$
integrate(h(x,y),y);
'INTEGRATE(x*'DIFF(f(x,y),x,1,y,1)*y,y)$

/* Trigrat example from manual - Fixed June 2002 */
trigrat(sin(3*a)/sin(a+%pi/3));
sqrt(3)*sin(2*a)+cos(2*a)-1;

/* compile() will fail with gcl if gcc not installed */
f(x):=x+2;
f(x):=x+2;
f(2);
4;
compile(f);
[f];
f(2);
4;
/* Some tests for lambda expressions.
  We test for both TRANSLATE and COMPILE because there are some compiler
  macros for translated code (defined via DEFOPT) */
define_variable(qwerty,1,fixnum);
1;
/* m-tlambda */
f():=apply(lambda([u],u+qwerty),[1]);
f():=apply(lambda([u],u+qwerty),[1]);
f();
2;
translate(f);
[f];
f();
2;
compile(f);
[f];
f();
2;
/* m-tlambda&env */
f(x):=apply(lambda([u],u+x),[1]);
f(x):=apply(lambda([u],u+x),[1]);
f(1);
2;
translate(f);
[f];
f(1);
2;
compile(f);
[f];
f(1);
2;
/* m-tlambda&env */
f(x,qwerty):=apply(lambda([u],u+x+qwerty),[1]);
f(x,qwerty):=apply(lambda([u],u+x+qwerty),[1]);
f(1,0);
2;
translate(f);
[f];
f(1,0);
2;
compile(f);
[f];
f(1,0);
2;
/* m-tlambda&env (outer) and m-tlambda (inner) */
f(x):=apply(lambda([u],x+apply(lambda([v],v+qwerty),[u])),[-1]);
f(x):=apply(lambda([u],x+apply(lambda([v],v+qwerty),[u])),[-1]);
f(2);
2;
translate(f);
[f];
f(2);
2;
compile(f);
[f];
f(2);
2;
/* m-tlambda& */
f():=apply(lambda([u,[v]],[u+qwerty,v]),[0,2,3]);
f():=apply(lambda([u,[v]],[u+qwerty,v]),[0,2,3]);
f();
[1,[2,3]];
translate(f);
[f];
f();
[1,[2,3]];
compile(f);
[f];
f();
[1,[2,3]];
/* m-tlambda&env& */
f(x):=apply(lambda([u,[v]],[u+x,v]),[0,2,3]);
f(x):=apply(lambda([u,[v]],[u+x,v]),[0,2,3]);
f(1);
[1,[2,3]];
translate(f);
[f];
f(1);
[1,[2,3]];
compile(f);
[f];
f(1);
[1,[2,3]];
/* m-tlambda&env (from the sum), the inner lambda currently remains
  untranslated.  This is really a test for fungen&env-for-mevalsumarg. */
f(n):=sum(apply(lambda([x],i+x),[i]),i,1,n);
f(n):=sum(apply(lambda([x],i+x),[i]),i,1,n);
f(3);
12;
translate(f);
[f];
f(3);
12;
compile(f);
[f];
f(3);
12;
kill(qwerty,f);
done;
/* This should kill f, but doesn't which upsets subsequent tests
   Redefining it then killing it does the right thing */
f(x):=x+3;
f(x):=x+3;
kill(f);
done;

/* Trignometric and hyperbolic functions of complex arguments */
sin(%i*z);
%i*sinh(z);
cos(%i*z);
cosh(z);
tan(%i*z);
%i*tanh(z);
csc(%i*z);
-%i*csch(z);
sec(%i*z);
sech(z);
cot(%i*z);
-%i*coth(z);
sinh(%i*z);
%i*sin(z);
cosh(%i*z);
cos(z);
tanh(%i*z);
%i*tan(z);
csch(%i*z);
-%i*csc(z);
sech(%i*z);
sec(z);
coth(%i*z);
-%i*cot(z);

/* trigreduce(sinh(x)^n)) wrong for some cases.  Fixed 4 Oct 2003 */
trigreduce(sin(x)^2);
(1-cos(2*x))/2;
trigreduce(sin(x)^3);
(3*sin(x)-sin(3*x))/4;
trigreduce(sin(x)^4);
(cos(4*x)-4*cos(2*x)+3)/8;
trigreduce(sin(x)^5);
(sin(5*x)-5*sin(3*x)+10*sin(x))/16;
trigreduce(cos(x)^2);
(cos(2*x)+1)/2;
trigreduce(cos(x)^3);
(cos(3*x)+3*cos(x))/4;
trigreduce(cos(x)^4);
(cos(4*x)+4*cos(2*x)+3)/8;
trigreduce(cos(x)^5);
(cos(5*x)+5*cos(3*x)+10*cos(x))/16;
trigreduce(sinh(x)^2);
(cosh(2*x)-1)/2;
trigreduce(sinh(x)^3);
(sinh(3*x)-3*sinh(x))/4;
trigreduce(sinh(x)^4);
(cosh(4*x)-4*cosh(2*x)+3)/8;
trigreduce(sinh(x)^5);
(sinh(5*x)-5*sinh(3*x)+10*sinh(x))/16;
trigreduce(cosh(x)^2);
(cosh(2*x)+1)/2;
trigreduce(cosh(x)^3);
(cosh(3*x)+3*cosh(x))/4;
trigreduce(cosh(x)^4);
(cosh(4*x)+4*cosh(2*x)+3)/8;
trigreduce(cosh(x)^5);
(cosh(5*x)+5*cosh(3*x)+10*cosh(x))/16;

/* De Moivre's Theorem - Abramowitz & Stegun 4.3.48, 4.5.53 */
expand(trigreduce(expand((cos(x)+%i*sin(x))^2)));
%i*sin(2*x)+cos(2*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^3)));
%i*sin(3*x)+cos(3*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^4)));
%i*sin(4*x)+cos(4*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^5)));
%i*sin(5*x)+cos(5*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^6)));
%i*sin(6*x)+cos(6*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^7)));
%i*sin(7*x)+cos(7*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^8)));
%i*sin(8*x)+cos(8*x);
expand(trigreduce(expand((cos(x)+%i*sin(x))^9)));
%i*sin(9*x)+cos(9*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^2)));
sinh(2*x)+cosh(2*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^3)));
sinh(3*x)+cosh(3*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^4)));
sinh(4*x)+cosh(4*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^5)));
sinh(5*x)+cosh(5*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^6)));
sinh(6*x)+cosh(6*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^7)));
sinh(7*x)+cosh(7*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^8)));
sinh(8*x)+cosh(8*x);
expand(trigreduce(expand((cosh(x)+sinh(x))^9)));
sinh(9*x)+cosh(9*x);

/* bug 835287 */
solve('diff(y,x),'diff(y,x));
['diff(y,x,1)=0];
