;;; Compiled by f2cl version 2.0 beta on 2002/04/25 at 13:19:17
;;; 
;;; Options: ((:prune-labels nil) (:auto-save t) (:relaxed-array-decls t)
;;;           (:coerce-assigns :as-needed) (:array-type ':simple-array)
;;;           (:array-slicing nil) (:declare-common nil)
;;;           (:float-format double-float))

(in-package "SLATEC")


(let ((zeror 0.0) (zeroi 0.0))
  (declare (type double-float zeroi zeror))
  (defun zbinu (zr zi fnu kode n cyr cyi nz rl fnul tol elim alim)
    (declare (type (simple-array double-float (*)) cyr cyi)
             (type f2cl-lib:integer4 kode n nz)
             (type double-float zr zi fnu rl fnul tol elim alim))
    (f2cl-lib:with-array-data (cyi-%data% cyi-%offset% cyi)
      (declare (type f2cl-lib:integer4 cyi-%offset%)
               (type (simple-array double-float (*)) cyi-%data%)
               (ignorable cyi-%offset% cyi-%data%))
      (f2cl-lib:with-array-data (cyr-%data% cyr-%offset% cyr)
        (declare (type f2cl-lib:integer4 cyr-%offset%)
                 (type (simple-array double-float (*)) cyr-%data%)
                 (ignorable cyr-%offset% cyr-%data%))
        (prog ((cwr (make-array 2 :element-type 'double-float))
               (cwi (make-array 2 :element-type 'double-float)) (i 0) (inw 0)
               (nlast 0) (nn 0) (nui 0) (nw 0) (az 0.0) (dfnu 0.0))
          (declare (type (simple-array double-float (2)) cwr cwi)
                   (type double-float dfnu az)
                   (type f2cl-lib:integer4 nw nui nn nlast inw i))
          (setf nz 0)
          (setf az
                  (multiple-value-bind
                      (ret-val var-0 var-1)
                      (zabs zr zi)
                    (declare (ignore))
                    (when var-0 (setf zr var-0))
                    (when var-1 (setf zi var-1))
                    ret-val))
          (setf nn n)
          (setf dfnu (+ fnu (f2cl-lib:int-sub n 1)))
          (if (<= az 2.0) (go label10))
          (if (> (* az az 0.25) (+ dfnu 1.0)) (go label20))
         label10
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10)
              (zseri zr zi fnu kode nn cyr cyi nw tol elim alim)
            (declare (ignore var-5 var-6))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-4 (setf nn var-4))
            (when var-7 (setf nw var-7))
            (when var-8 (setf tol var-8))
            (when var-9 (setf elim var-9))
            (when var-10 (setf alim var-10)))
          (setf inw (f2cl-lib:int (abs nw)))
          (setf nz (f2cl-lib:int-add nz inw))
          (setf nn (f2cl-lib:int-sub nn inw))
          (if (= nn 0) (go end_label))
          (if (>= nw 0) (go label120))
          (setf dfnu (+ fnu (f2cl-lib:int-sub nn 1)))
         label20
          (if (< az rl) (go label40))
          (if (<= dfnu 1.0) (go label30))
          (if (< (+ az az) (* dfnu dfnu)) (go label50))
         label30
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10 var-11)
              (zasyi zr zi fnu kode nn cyr cyi nw rl tol elim alim)
            (declare (ignore var-5 var-6))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-4 (setf nn var-4))
            (when var-7 (setf nw var-7))
            (when var-8 (setf rl var-8))
            (when var-9 (setf tol var-9))
            (when var-10 (setf elim var-10))
            (when var-11 (setf alim var-11)))
          (if (< nw 0) (go label130))
          (go label120)
         label40
          (if (<= dfnu 1.0) (go label70))
         label50
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10 var-11)
              (zuoik zr zi fnu kode 1 nn cyr cyi nw tol elim alim)
            (declare (ignore var-4 var-6 var-7))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-5 (setf nn var-5))
            (when var-8 (setf nw var-8))
            (when var-9 (setf tol var-9))
            (when var-10 (setf elim var-10))
            (when var-11 (setf alim var-11)))
          (if (< nw 0) (go label130))
          (setf nz (f2cl-lib:int-add nz nw))
          (setf nn (f2cl-lib:int-sub nn nw))
          (if (= nn 0) (go end_label))
          (setf dfnu (+ fnu (f2cl-lib:int-sub nn 1)))
          (if (> dfnu fnul) (go label110))
          (if (> az fnul) (go label110))
         label60
          (if (> az rl) (go label80))
         label70
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8)
              (zmlri zr zi fnu kode nn cyr cyi nw tol)
            (declare (ignore var-5 var-6))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-4 (setf nn var-4))
            (when var-7 (setf nw var-7))
            (when var-8 (setf tol var-8)))
          (if (< nw 0) (go label130))
          (go label120)
         label80
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10 var-11)
              (zuoik zr zi fnu kode 2 2 cwr cwi nw tol elim alim)
            (declare (ignore var-4 var-5 var-6 var-7))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-8 (setf nw var-8))
            (when var-9 (setf tol var-9))
            (when var-10 (setf elim var-10))
            (when var-11 (setf alim var-11)))
          (if (>= nw 0) (go label100))
          (setf nz nn)
          (f2cl-lib:fdo (i 1 (f2cl-lib:int-add i 1))
                        ((> i nn) nil)
            (tagbody
              (f2cl-lib:fset
               (f2cl-lib:fref cyr-%data% (i) ((1 n)) cyr-%offset%)
               zeror)
              (f2cl-lib:fset
               (f2cl-lib:fref cyi-%data% (i) ((1 n)) cyi-%offset%)
               zeroi)
             label90))
          (go end_label)
         label100
          (if (> nw 0) (go label130))
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10 var-11 var-12)
              (zwrsk zr zi fnu kode nn cyr cyi nw cwr cwi tol elim alim)
            (declare (ignore var-5 var-6 var-8 var-9))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-4 (setf nn var-4))
            (when var-7 (setf nw var-7))
            (when var-10 (setf tol var-10))
            (when var-11 (setf elim var-11))
            (when var-12 (setf alim var-12)))
          (if (< nw 0) (go label130))
          (go label120)
         label110
          (setf nui (f2cl-lib:int (+ (- fnul dfnu) 1)))
          (setf nui
                  (max (the f2cl-lib:integer4 nui) (the f2cl-lib:integer4 0)))
          (multiple-value-bind
              (var-0 var-1 var-2 var-3 var-4 var-5 var-6 var-7 var-8 var-9
               var-10 var-11 var-12 var-13)
              (zbuni zr zi fnu kode nn cyr cyi nw nui nlast fnul tol elim alim)
            (declare (ignore var-5 var-6))
            (when var-0 (setf zr var-0))
            (when var-1 (setf zi var-1))
            (when var-2 (setf fnu var-2))
            (when var-3 (setf kode var-3))
            (when var-4 (setf nn var-4))
            (when var-7 (setf nw var-7))
            (when var-8 (setf nui var-8))
            (when var-9 (setf nlast var-9))
            (when var-10 (setf fnul var-10))
            (when var-11 (setf tol var-11))
            (when var-12 (setf elim var-12))
            (when var-13 (setf alim var-13)))
          (if (< nw 0) (go label130))
          (setf nz (f2cl-lib:int-add nz nw))
          (if (= nlast 0) (go label120))
          (setf nn nlast)
          (go label60)
         label120
          (go end_label)
         label130
          (setf nz -1)
          (if (= nw -2) (setf nz -2))
          (go end_label)
         end_label
          (return
           (values zr zi fnu kode nil nil nil nz rl fnul tol elim alim)))))))

