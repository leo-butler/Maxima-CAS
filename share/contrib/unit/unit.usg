

                 Unit Conversion and Definition Package

[Note:  as of version 0.03, there are almost no definitions for units present -
this is merely a framework for unit manipulation, with a couple test cases. 
Once the framework is finished and tested, then more unit definitions will be
added.]

This package gives the user the ability to convert between units and define all
units globally for a given property (i.e. define all length units in terms of
meters).

Converting between units:

The function unitfactor(unit1,unit2) returns the multiplication factor of the
form
                                     unit2
                                  %f -----
                                     unit1

For example, let's
say we have the quantity 45%min, and we want to know how many seconds that is.
We perform an operation like the following:

(C6) 45*unitfactor(%min,s);

(D6)                                 2700

Note this doesn't handle the %min and s parts in the expression itself -
unitfactor returns only the %f factor.  If you want to input %min and get 
s it must be done by hand:

(C5) 45*%min*unitfactor(%min,s)*s/%min;

(D5)                                2700 s

Also unit.mac provides an extra feature for metric units - if a metric unit is
defined, the system also knows how to automatically define the other units based
on that unit.  So, for example, if the example above works, we can also find out
how many milliseconds are in 45%min:

(C6) 45*%min*unitfactor(%min,%%ms)*%%ms/%min;

(D6)                             2700000 %%ms

TODO:  eventually, there should be a function called convert that will do more
than provide the conversion factor, but that is waiting on the incorporation of
dimension.mac's ability to break down the expression, in order to allow things
like recognizing N from kg*m/s^2.

Global units

If we are going to be doing this kind of conversion a lot, there exists a global
command which can do a lot of the dirty work for us.  This command, setunits,
will define in the system all units of a particular property in terms of one
selected unit.  It can take arguments either singly: setunits(s) or as a list:
setunits([g,s]).  The first command would define all time units in terms of
seconds, the second would also define all mass units in terms of grams.  Let's
say we want all of our operations involving time to come out in milliseconds:

(C12) setunits(%%ms);

(D12)                                DONE
(C13) %min;

(D13)                             60000 %%ms
(C14) 45*%min;

(D14)                            2700000 %%ms
(C15) 44*s+94*ds+26*%%ms;

(D15)                             53426 %%ms

In the case of setunits, defining ALL the metric unit possibilities for all the
metric quantities quickly gets to be a rather large set of definitions.  So
there exists a mechanism to tell the system how many to actually use, controlled
by a global variable called %unitexpand.  The makemetalist command respects this
variable, and can be rerun at any time to add or remove definitions.  The way
the settings break down:

	   0 none - only base units
	   1 kilo, centi, milli
(default)  2 giga, mega, kilo, hecto, deka, deci, centi, milli, micro, nano
	   3 peta, tera, giga, mega, kilo, hecto, deka, deci, centi, milli, 
  	     micro, nano, pico, femto
	   4 all

So if only wanted base units defined, one would say:

(C33) %unitexpand : 0;

(D33)                                  0
(C34) makemetalist();

(D34) [[%mass, [gram, 1, m], [grain, 0.0648, 0], [grams, 1, m], 

[grains, 0.0648, 0], [g, 1, m], [gr, 0.0648, 0]], 

[%time, [SECOND, 1, m], [minute, 60, 0], [seconds, 1, m], [minutes, 60, 0], 

[s, 1, m], [%min, 60, 0]]]

Clearing setunits

To clear global units for a particular property, one uses the killunits command:

(C34) killunits(%time);

(D34)                                DONE
