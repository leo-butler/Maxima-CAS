/*  
  GRAPHS - graph theory package for Maxima
  Copyright (C) 2007 Andrej Vodopivec <andrej.vodopivec@gmail.com>

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or	 
  (at your option) any later version. 

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

*/

dimacs_export(gr, file, [comments]) := block(
  [fl, names:hash_table(), i:0],
  if not(is_graph(gr)) then error("dimacs_export: first argument is not a graph:", gr),
  for v in vertices(gr) do (
    set_hash(v, names, i),
    i:i+1),
  fl:openw(file),
  printf(fl, "c graph exported from MAXIMA~%"),
  for c in comments do (
    printf(fl, "c ~a~%", c)),
  printf(fl, "p edges ~a ~a~%", graph_size(gr), graph_order(gr)),
  for e in edges(gr) do block(
    [u:get_hash(first(e), names), v:get_hash(second(e), names)],
    printf(fl, "e ~a ~a~%", min(u,v), max(u,v), names)),
  close(fl))$

dimacs_import(file) := block(
  [n, fl, line, elist:[], t],
  fl:openr(file),
  l:readline(fl),
  while l#false do (
    t:tokens(l),
    if t[1]="p" then n:eval_string(third(t)),
    if t[1]="e" then elist:cons(map(eval_string, [second(t), third(t)]), elist),
    l:readline(fl)),
  close(fl),
  if not(integerp(n)) then error("import_dimacs: wrong file format"),
  create_graph(n,elist))$
