kill (all);
done;

defstruct (foo ());
[foo ()];

f: new (foo);
foo ();

defstruct (bar (aa, bb), baz (aa), quux (aa));
[bar (aa, bb), baz (aa), quux (aa)];

defstruct (foo (aa, bb, cc = bar (2, 3), dd = baz (5), ee = quux (7)));
[foo (aa, bb, cc = bar (2, 3), dd = baz (5), ee = quux (7))];

f: new (foo);
foo (aa, bb, bar (2, 3), baz (5), quux (7));

g: f@cc;
bar (2, 3);

g@bb: blurf (11);
blurf (11);

f;
foo (aa, bb, bar (2, blurf (11)), baz (5), quux (7));

g: new (''f);
foo (aa, bb, bar (2, blurf (11)), baz (5), quux (7));

g@bb: [1, 2, 3];
[1, 2, 3];

g;
foo (aa, [1, 2, 3], bar (2, blurf (11)), baz (5), quux (7));

f;
foo (aa, bb, bar (2, blurf (11)), baz (5), quux (7));

f@4@1: %pi - 3;
%pi - 3;

f;
foo (aa, bb, bar (2, blurf (11)), baz (%pi - 3), quux (7));

propvars (defstruct_default);
[foo, bar, baz, quux];

map (lambda ([a], get (a, defstruct_default)), propvars (defstruct_default));
[foo(aa, bb, bar(2, 3), baz(5), quux(7)), bar(aa, bb), baz(aa), quux(aa)];

map (lambda ([a], get (a, defstruct_template)), propvars (defstruct_default));
[foo(aa, bb, cc, dd, ee), bar(aa, bb), baz(aa), quux(aa)];

kill (foo, bar, baz);
done;

errcatch (new (baz));
[];

propvars (defstruct_default);
[quux];

new (quux);
quux (aa);

/* begin stuff to test parallel multiple assignment */

[a, b, c]: [x, y, z];
[x, y, z];

[x, y, z]: [11, 22, 33];
[11, 22, 33];

[''a, ''b, ''c];
[11, 22, 33];

[x, y, z]: x*y*z;
[7986, 7986, 7986];

[x, y, z];
[7986, 7986, 7986];

[aa, bb]: [bb, 2*aa];
[bb, 2*aa];

([aa, bb]: [bb, 2*aa], [aa, bb]: [bb, 2*aa], [aa, bb]: [bb, 2*aa], [aa, bb]: [bb, 2*aa]);
[4*bb, 8*aa];

(kgcd (a, b) := (while b#0 do [a, b]: [b, remainder (a, b)], abs(a)), 0);
0;

kgcd (123456, 123);
gcd (123456, 123);

