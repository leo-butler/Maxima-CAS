(load("nset"),0);
0$

adjoin(set(),set());
set(set())$

adjoin(set(),set(a));
set(set(),a)$

adjoin(a,set());
set(a)$

adjoin(a,set(set()));
set(set(),a)$

adjoin(a,set(a));
set(a)$

adjoin(set(a),set(a));
set(a,set(a))$

adjoin(a,set(a,b));
set(a,b)$

adjoin(a,set(b,a));
set(a,b)$

adjoin(z,set(a,b));
set(a,b,z)$

errcatch(adjoin(a,b));
[]$

set(a,a,c);
set(a,c)$

set(a,c,a);
set(a,c)$

set(a,a,a);
set(a)$

set(set(a,b),set(a,b),z);
set(set(a,b),z)$

union();
set()$

union(set(6));
set(6)$

union([8,8,1932]);
set(8,1932)$

union(set(a),set(a,b),set(a,b,c));
set(a,b,c)$

union(set(),set(a));
set(a)$

union(set(a),set(b),set(c));
set(a,b,c)$

union(set(set(a)),set(a))$
set(a,set(a))$

errcatch(union(set(a),set(b),x));
[]$

union(set(a),set());
set(a)$

union(set(),set(set()));
set(set())$

setdifference(set(a,b),set());
set(a,b)$

setdifference(set(a,b),set(a));
set(b)$

setdifference(set(a,b),set(b));
set(a)$

setdifference(set(a,b),set(x));
set(a,b)$

setdifference(set(a,b),set());
set(a,b)$

setdifference(set(),set(x));
set()$

setdifference(set(a),set(x));
set(a)$

setdifference(set(a,b),set(x));
set(a,b)$

errcatch(setdifference(a,b));
[]$

errcatch(setdifference(set(a),b));
[]$

errcatch(setdifference(a,set(b)));
[]$

errcatch(intersection());
[]$

intersection(set(x));
set(x)$

intersection(set(),set());
set()$

intersection(set(set()),set());
set()$

intersection(set(set()),set(set(),set(set())));
set(set())$

intersection(set(a,b),set(a,b,c));
set(a,b)$

intersection(set(a,b),set(x,y,z));
set()$

intersection(set(a,b,c),set(a,y,x),set(z,a),set(p,q,a));
set(a)$


subsetp(set(),set());
TRUE$

subsetp(set(),set(a));
TRUE$

subsetp(set(a),set())$
FALSE$

subsetp(set(),set(set()));
TRUE$

subsetp(set(set()),set(set()));
TRUE$

subsetp(set(a,b),set(a,b,c));
TRUE$

subsetp(set(a,b,c),set(a,b));
FALSE$

errcatch(subsetp(a,b));
[]$

errcatch(subsetp(a,set(b)));
[]$

errcatch(subsetp(set(a),b));
[]$


dupe(a,0);
[]$

dupe(a,1);
[a]$

dupe(a,2);
[a,a]$

dupe(set(),2);
[set(),set()]$

errcatch(dupe(a,-2));
[]$

errcatch(dupe(a,b));
[]$

errcatch(dupe(a,%pi));
[]$

errcatch(dupe(a,set(23)));
[]$

disjointp(set(),set());
TRUE$

disjointp(set(set()),set());
TRUE$

errcatch(disjointp(a,a+b));
[]$

errcatch(disjointp(set(a),a+b));
[]$

errcatch(disjointp(a,set(a+b)));
[]$

disjointp(set(a),set(b));
TRUE$

disjointp(set(b,a),set(a));
FALSE$

subset(set(),evenp);
set()$

subset(set(3,5,8),evenp);
set(8)$

errcatch(subset(a,oddp));
[]$

subset(set(a,b,4,sin(x)), evenp);
set(4)$

symmdifference(set(),set());
set()$

symmdifference(set(set()),set());
set(set())$

errcatch(symmdifference(a,set(b)));
[]$

errcatch(symmdifference(set(a),b));
[]$

errcatch(symmdifference(a,set(b)));
[]$

symmdifference(set(a,b),set(a));
set(b)$


subsetp(set(),set());
true$

subsetp(set(set()),set());
false$

subsetp(set(),set(set()));
true$

subsetp(set(x),set(set(x)));
false$

subsetp(set(a,b),set(a,y));
false$

subsetp(set(a,b),set(a,b));
true$

subsetp(set(set(a)),set(x,y,set(a)));
true$

subsetp(set(rat(x)),set(x));
true$

subsetp(set(a,a,a,x),set(a,x));
true$

setequality(set(),set());
true$

setequality(set(set()),set(set()));
true$

setequality(set(),set(set()));
false$

setequality(set(x),set(rat(x)));
true$

setequality(set(rat(x),y),set(y,rat(x)));
true$

errcatch(setequality(a+b=c,[1]));
[]$

adjoin(x,set());
set(x)$

setequality(adjoin(x,set(set())),set(x,set()));
true$

setequality(adjoin(x=7,set(x=7)),set(x=7));
true$

setequality(adjoin(x=1,set(y=7)),set(x=1,y=7));
true$

setequality(adjoin(rat(x),set(x)),set(x));
true$

set(x,rat(x),x,x,x);
set(x)$

union(set(),set());
set()$

union(set(),set(8));
set(8)$

union(set(1932),set());
set(1932)$

union(set(set(8)),set(8));
set(set(8),8)$

setequality(union(set(a),set(b),set(c)),set(a,b,c));
true$

setequality(union(set(set()),set(b),set()),set(b,set()));
true$

setequality(union(set(x=6),set(y=3),set(z=-8)), set(z=-8,y=3,x=6));
true$

setify([]);
set()$

setify([a,b]);
set(a,b)$

setify([[a]]);
set([a])$

setify([set(a)]);
set(set(a))$

listify(set());
[]$

listify(set(a));
[a]$

listify(set(set(a)));
[set(a)]$

listify(set(set()));
[set()]$

full_listify(set());
[]$

full_listify(set(x));
[x]$

full_listify(set(set()));
[[]]$

full_listify(set(a,set(b),set(set(c))));
[a,[b],[[c]]]$

full_listify(a+b=c);
a+b=c$

full_listify(matrix([1,2],[3,4]));
matrix([1,2],[3,4])$

subst(b=a,set(a,b));
set(a)$

subst(b=a,set());
set()$

subst([a=x,b=x,c=x],set(a,b,c));
set(x)$

union([x],[y]);
set(x,y)$

union([x],set(y));
set(x,y)$

union(set(x),[y]);
set(x,y)$

union([],[]);
set();

union([],set(x));
set(x)$

errcatch(intersect());
[]$

intersect(set(a));
set(a)$

intersect(set(a),set(a,b));
set(a)$

elementp(x,set());
false$

elementp(x,set(x));
true$

elementp(rat(x),set(x));
true$

elementp(x,set([x]));
false$

elementp(false, set(false));
true$

union(set(false),set(true));
set(false,true)$

union(setify([true,false]), set(x));
set(x,true,false)$

fullsetify([]);
set()$

fullsetify([[]]);
set(set())$

fullsetify([a,b,c]);
set(a,b,c)$

fullsetify([a,[b]]);
set(a,set(b))$

fullsetify(f[0,1]);
f[0,1]$

fullsetify(f[5](x));
f[5](x)$

fullsetify(matrix([1,2],[3,4]));
matrix([1,2],[3,4])$


flatten(3);
3$

flatten(-3);
-3$

flatten(2/3);
2/3$

flatten(-2/3);
-2/3$

flatten(1.4d2);
1.4d2$

flatten(-3.4d0);
-3.4d0$

flatten(x);
x$

flatten(abc);
abc$

flatten(%pi);
%pi$

flatten(rat(x));
x$

flatten(x[5]);
x[5]$

flatten(x[8,32]);
x[8,32]$

flatten(-x);
-x$

flatten(rat(-x));
-x$

flatten(a+b);
a+b$

flatten(rat(a+b));
a+b$

flatten(a*b);
a*b$

flatten(a/b);
a/b$

flatten(a*b*c);
a*b*c$

flatten(a^b);
a^b$

flatten(a^(a^b));
a^(a^b)$

flatten([]);
[]$

flatten([[]]);
[]$

flatten([x]);
[x]$

flatten([[x]]);
[x]$

flatten(f(g(f(f(x)))));
f(g(f(f(x))))$

flatten(f(f(g(f(x)))));
f(g(f(x)))$

/* Examples from Macsyma 422 */

flatten([a,b,[c,[d]],e,[[f],g,h]]);
[a,b,c,d,e,f,g,h]$

flatten([a,b([c]),[d]]);
[a,b([c]),d]$

flatten(f(f(a,b), f(c,d)));
f(a,b,c,d)$

flatten(f[1](f[1](a,b), f[1](c,d)));
f[1](a,b,c,d)$

elementp(false,set());
false$

elementp(false,set(1));
false$

elementp(false,set(false));
true$

elementp(0,set());
false$

elementp(1,set(1));
true$

elementp(0,set(1));
false$

elementp(2,set(1));
false$

elementp(1,set(0,2));
false$


adjoin(false,set());
set(false)$

adjoin(false,set(1));
set(false,1)$

adjoin(false,set(false));
set(false)$

adjoin(0,set());
set(0)$

adjoin(1,set(1));
set(1)$

adjoin(0,set(1));
set(1,0)$

adjoin(2,set(1));
set(2,1)$

adjoin(1,set(0,2));
set(0,1,2)$

cardinality(set());
0$

cardinality([]);
0$

cardinality([[]]);
1$

cardinality([8,8,1932]);
2$

errcatch(cardinality(x+y));
[]$

setp([]);
false$

setp(a+b);
false$

setp([x]);
false$

setp(set());
true$

setp(set(set(a+b=c)));
true$

setp(rat(x));
false$

setp(1.5b34);
false$

errcatch(setp());
[]$

listify(adjoin(-1,[2,4,6]));
[-1,2,4,6]$

listify(adjoin(2,[2,4,6]));
[2,4,6]$

listify(adjoin(3,[2,4,6]));
[2,3,4,6]$

listify(adjoin(6,[2,4,6]));
[2,4,6]$

listify(adjoin(7,[2,4,6]));
[2,4,6,7]$

complement(set(),set());
set()$

complement(set(a),set(a));
set()$

complement(set(a),set(a,b));
set(b)$

powerset(set());
set(set())$

powerset(set(x));
set(set(),set(x))$

powerset(set(x,y));
set(set(),set(x),set(y),set(x,y))$

errcatch(powerset(a+b=c));
[]$

errcatch(powerset(rat(a)));
[]$

subpowerset(set(),0);
set(set())$

subpowerset(set(),1);
set()$

subpowerset(set(a+b=c),1);
set(set(a+b=c))$

subpowerset(set(1,2,3),2);
set(set(1,2),set(1,3),set(2,3))$

errcatch(subpowerset(a+b=c));
[]$

setequality(subset(powerset(set(a,b,c,d,e)),lambda([x],is(cardinality(x)=3))),
subpowerset(set(a,b,c,d,e),3));
true$

setequality(subset(powerset(set(a,b,c,d,e)),lambda([x],is(cardinality(x)=5))),
subpowerset(set(a,b,c,d,e),5));
true$

setequality(subset(powerset(set(a,b,c,d,e)),lambda([x],is(cardinality(x)=7))),
subpowerset(set(a,b,c,d,e),7));
true$

extremal_subset(set(),lambda([x],x^2));
set()$

extremal_subset(set(-1,0,1),lambda([x],x^2));
set(-1,1)$

extremal_subset(set(1,sqrt(2),3,%pi),log);
set(%pi)$

extremal_subset(set(sqrt(2),sqrt(3),sqrt(5)),exp);
set(sqrt(5))$

extremal_subset(set(1+%i,sqrt(2),1-%i),abs);
set(1+%i,sqrt(2),1-%i)$

extremal_subset(set(a,a+b,1.4b0,sqrt(28)),lambda([x],if atom(x) then 0 else 1));
set(a+b,sqrt(28))$

cartesian_product(set());
set()$

cartesian_product(set(a));
set([a])$

cartesian_product(set(),set(),set());
set()$

cartesian_product(set(a),set(b));
set([a,b])$

cartesian_product(set(u,n,k),set());
set()$

cartesian_product(set(), set(u,n,k));
set()$

cartesian_product(set(u,n,k),set(1));
set([u,1],[n,1],[k,1])$

cartesian_product(set(a,b),set(1,2));
set([a,1],[a,2],[b,1],[b,2])$

equiv_classes(set(),"=");
set()$

equiv_classes(set(),"#");
set()$

equiv_classes(set(a,b,c),"=");
set(set(a),set(b),set(c))$

equiv_classes(set(a,b,c),"#");
set(set(a,b,c))$

equiv_classes(set(1,2,3,4,5),lambda([x,y],remainder(x-y,2)=0));
set(set(1,3,5),set(2,4))$

partition_set(set(),evenp);
[set(),set()]$

partition_set(set(9),evenp);
[set(9), set()]$

partition_set(set(2,4),evenp);
[set(), set(2,4)]$

partition_set(set(a,b,c),lambda([x],false));
[set(a,b,c), set()]$

partition_set(set(a,b,c),lambda([x],true));
[set(),set(a,b,c)]$

partition_set(set(a,b,c),lambda([x],orderlessp(x,b)));
[set(b,c), set(a)]$















