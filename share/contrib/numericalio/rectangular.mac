/* Maxima script to test reading & writing a rectangular data file.
 * In Maxima: batchload("rectangular.mac")$
 * If test succeeds, prints several messages, all of which mention success.
 */

kill(all)$

load("numericalio.lisp")$
load("my_flatten.mac")$

l_nested: [[KEY, XX, YY, ZZ, FOO, Bar, baz],
  [aa46, 7, 7, 16, FOO3, 2.71, 2.88],
  [aA31, 31, 61, 25, 9/16, 6.10, 7/41],
  [AA22, 61, 40, 13, 3/2+6/7*%i, Bar2, 9.12],
  [AA16, 19, 25, 31, FOO7, 4.80, 6/97],
  [AA16, 13, 49, 7, 5.67, 2.54, 4.54],
  [AA58, 19, 28, 43, 4.04, 0.90, baz8],
  [AA34, 16, 22, 19, 4.87, 4.90, 2.85],
  [AA52, 28, 34, 7, FOO9, Bar4, 2/93],
  [AA52, 10, 43, 13, 1/2+1/7*%i, 5.69, 0.00],
  [AA40, 7, 25, 40, 3.15, 7.54, 6.11]]$

m: apply(matrix, l_nested)$

kill(h)$
for i:1 thru length(l_nested) do
  h[l_nested[i][1]]: rest(l_nested[i])$

l: my_flatten(l_nested)$

m2: read_matrix("rectangular.data")$

kill(h2)$
read_hashed_array("rectangular.data", h2)$

l2_nested: read_nested_list("rectangular.data")$

l2: read_list("rectangular.data")$

prederror:false$

if is(equal(l, l2)) = true
  then print("success: rectangular.data loaded as flat list")
  else print("FAILED to load rectangular.data as flat list")$

if is(equal(l_nested, l2_nested)) = true
  then print("success: rectangular.data loaded as nested list")
  else print("FAILED to load rectangular.data as nested list")$

if is(equal(arrayinfo(h), arrayinfo(h2))) = true
  then print("success: rectangular.data keys loaded")
  else print("FAILED to load rectangular.data keys")$

if is(equal(listarray(h), listarray(h2))) = true
  then print("success: rectangular.data records loaded as hashed array")
  else print("FAILED to load rectangular.data records as hashed array")$

if is(equal(m, m2)) = true
  then print("success: rectangular.data records loaded as matrix")
  else print("FAILED to load rectangular.data records as matrix")$

write_data(m2, "tmp-matrix.data")$
write_data(h2, "tmp-hashed-array.data")$
write_data(l2_nested, "tmp-nested-list.data")$
write_data(l2, "tmp-list.data")$

/* Can't guarantee that hash keys are output in same order as input,
 * so we won't necessarily get the same matrix or nested list from
 * tmp-hashed-array.data. Too bad, it would be a better test to write
 * as one type and read back as another.
 */
m3: read_matrix("tmp-nested-list.data")$
read_hashed_array("tmp-hashed-array.data", h3)$
l3_nested: read_nested_list("tmp-matrix.data")$
l3: read_list("tmp-list.data")$

if is(equal(l2, l3)) = true
  then print("success: wrote, read again rectangular.data as flat list")
  else print("FAILED to write, read again rectangular.data as flat list")$

if is(equal(l2_nested, l3_nested)) = true
  then print("success: wrote, read again rectangular.data as nested list")
  else print("FAILED to write, read again rectangular.data as nested list")$

if is(equal(arrayinfo(h2), arrayinfo(h3))) = true
  then print("success: wrote, read again rectangular.data hashed array keys")
  else print("FAILED to write, read again rectangular.data hashed array keys")$

if is(equal(listarray(h2), listarray(h3))) = true
  then print("success: wrote, read again rectangular.data hashed array values")
  else print("FAILED to write, read again rectangular.data hashed array values")$

if is(equal(m2, m3)) = true
  then print("success: wrote, read again rectangular.data as matrix")
  else print("FAILED to write, read again rectangular.data as matrix")$


KEY: -2.5$
XX: 3.25$
YY: 1.75$
ZZ: 5.5$
FOO: %pi$
Bar: 17/5$
baz: 21/19$

aa46: 46$
aA31: 31$
AA22: 22$
AA16: 16$
AA58: 58$
AA34: 34$
AA52: 52$
AA40: 40$

FOO3: 6/11$
Bar2: 19/17$
FOO7: 6$
baz8: -5$
FOO9: -1.5$
Bar4: -3.75$

m_dot_m: transpose(m) . m$
s: 0$
for i:1 thru length(m_dot_m) do s: s + m_dot_m[i, i]$

m2_dot_m2: transpose(m2) . m2$
s2: 0$
for i:1 thru length(m2_dot_m2) do s2: s2 + m2_dot_m2[i, i]$

if is(equal(s, s2)) = true
  then print("success: assigned values to variables in matrix")
  else print("FAILED to assign values to values in matrix")$


