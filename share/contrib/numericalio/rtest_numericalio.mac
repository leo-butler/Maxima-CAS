/* Test read/write array */

(kill (all),
 l :
   [7, 12, FOO, 45, 91,
    2, -8, 123, -9, -1,
    8, 18, Bar, -5, 17,
    6, 13, -57, 28, 53,

    2.5, 19.7, 1.2, 9.1, 1.7,
    3.5, -8.2, 3.1, 7.2, 7.1,
    5.4, -5.3, 9.8, 1.8, 6.2,
    0.8, 52.9, 7.1, 0.2, 1.8,

    baz, 79, 112, 173, 311,
    18, 97, 211, 317, 113,
    29, 32, 925, 512, 713,
    87, 53, 133, 127, 158],
 a : make_array ('any, 3, 4, 5),
 fillarray (a, l),

 /* Note that this makes b the same size as a,
  * despite the different arguments ... <sigh>
  */
 array (b, 2, 3, 4),

 fillarray (b, l),

 a2 : make_array ('any, 3, 4, 5),
 array (b2, 2, 3, 4),
 0);
0;

(read_lisp_array (file_search ("array.data"), a2),
 is (a = a2));
true;

(read_maxima_array (file_search ("array.data"), b2),
 [is (arrayinfo (b) = arrayinfo (b2)), is (listarray (b) = listarray (b2))]);
[true, true];

(write_data (a2, "tmp-lisp-array.data"),
 a3: make_array('any, 3, 4, 5),
 read_lisp_array ("tmp-lisp-array.data", a3), 
 is (a2 = a3));
true;

(write_data (b2, "tmp-maxima-array.data"),
 array (b3, 2, 3, 4),
 read_maxima_array ("tmp-maxima-array.data", b3),
 [is (arrayinfo (b2) = arrayinfo (b3)), is (listarray (b2) = listarray (b3))]);
[true, true];

/* Test read/write comma-separated data */

(kill (all),
 l_nested :
  [[KEY, XX, YY, ZZ, FOO, Bar, baz],
   [aa46, 7, 7, 16, FOO3, 2.71, 2.88],
   [aA31, 31, 61, 25, 916, 6.10, 741],
   [AA22, 61, 40, 13, 32.75, Bar2, 9.12],
   [AA16, 19, 25, 31, FOO7, 4.80, 697],
   [AA16, 13, 49, 7, 5.67, 2.54, 4.54],
   [AA58, 19, 28, 43, 4.04, 0.90, baz8],
   [AA34, 16, 22, 19, 4.87, 4.90, 2.85],
   [AA52, 28, 34, 7, FOO9, Bar4, 293],
   [AA52, 10, 43, 13, 12.125, 5.69, 0.00],
   [AA40, 7, 25, 40, 3.15, 7.54, 6.11]],
 m : apply(matrix, l_nested),
 0);
0;

(m2 : read_matrix (file_search ("rectangular.csv")),
 is (m = m2));
true;

(m3 : read_matrix (file_search ("really-csv.data"), 'comma),
 is (m = m3));
true;

(m4 : read_matrix (file_search ("really-space-separated.csv"), 'space),
 is (m = m4));
true;

(write_data (m2, "tmp-matrix.csv"),
 m5 : read_matrix("tmp-matrix.csv"),
 is (m2 = m5));
true;

(write_data (m2, "tmp-matrix.data", 'comma),
 m6 : read_matrix("tmp-matrix.data", 'comma),
 is (m2 = m6));
true;

(write_data (m2, "tmp-matrix-2.csv", 'space),
 m7 : read_matrix("tmp-matrix-2.csv", 'space),
 is (m2 = m7));
true;

(array (a, 10, 6),
 read_maxima_array (file_search ("rectangular.data"), a),
 write_data (a, "tmp-array.csv"),
 array (a2, 10, 6),
 read_maxima_array ("tmp-array.csv", a2),
 [is (arrayinfo (a) = arrayinfo (a2)), is (listarray (a) = listarray (a2))]);
[true, true];

/* Test read/write variable-length lines */

(kill (all),
 l_nested :
  [[aa46,7,7,16,FOO3],
   [aA31,31,61,25,9.16,513],
   [AA16,13,49,7,5.67,2.54,4.54],
   [AA52,7,FOO9,Bar4,2.93],
   [AA40,7,25,40,3.15,7.54,0.00],
   [aa46,1325,7,16,FOO3,2.71,2.88],
   [aA31,31,61,25,9.16],
   [AA58,19,28,43,4.04,0.90,baz8],
   [AA34,16,175.25,2.85],
   [AA40,7,25],
   [AA22,617,40,Bar2,9.12],
   [zz7b,12375e-003,12375s-003,12375d-003,123b-001],
   [w23q,123.375e-001,123.375s-001,123.375d-001,123.456b-001],
   [q32w,12375E-003,12375S-003,12375D-003,123B-001],
   [t5u7,123.375E-001,123.375S-001,123.375D-001,123.456B-001],
   [q129,"Foo","BAR","Foo \\ BAR \"baz quux\""]],
 l : flatten (l_nested),
 h[aa46] : [7,7,16,FOO3],
 h[aA31] : [31,61,25,9.16,513],
 h[AA16] : [13,49,7,5.67,2.54,4.54],
 h[AA52] : [7,FOO9,Bar4,2.93],
 h[AA40] : [7,25,40,3.15,7.54,0.00],
 h[aa46] : [1325,7,16,FOO3,2.71,2.88],
 h[aA31] : [31,61,25,9.16],
 h[AA58] : [19,28,43,4.04,0.90,baz8],
 h[AA34] : [16,175.25,2.85],
 h[AA40] : [7,25],
 h[AA22] : [617,40,Bar2,9.12],
 h[zz7b] : [12375e-003,12375s-003,12375d-003,123b-001],
 h[w23q] : [123.375e-001,123.375s-001,123.375d-001,123.456b-001],
 h[q32w] : [12375E-003,12375S-003,12375D-003,123B-001],
 h[t5u7] : [123.375E-001,123.375S-001,123.375D-001,123.456B-001],
 h[q129] : ["Foo","BAR","Foo \\ BAR \"baz quux\""],
 0);
0;

(l2 : read_list (file_search ("ragged.data")),
 is (l = l2));
true;

(l2_nested: read_nested_list (file_search ("ragged.data")),
 is (l_nested = l2_nested));
true;

(read_hashed_array (file_search ("ragged.data"), h2),
 [is (arrayinfo(h) = arrayinfo(h2)), is (listarray(h) = listarray(h2))]);
[true, true];

(AA16: 16,
 AA22: 22,
 aA31: 31,
 AA34: 34,
 AA40: 40,
 aa46: 46,
 AA52: 52,
 AA58: 58,
 FOO3: 13,
 
 FOO9: 27.25,
 Bar4: %pi,
 baz8: -5.75,
 Bar2: -1217,
 is (ev (l) = ev (l2)));
true;

/* Test read/write rectangular (same number of items on each line) data */

(kill (all),
 l_nested :
  [[KEY, XX, YY, ZZ, FOO, Bar, baz],
   [aa46, 7, 7, 16, FOO3, 2.71, 2.88],
   [aA31, 31, 61, 25, 916, 6.10, 741],
   [AA22, 61, 40, 13, 32.75, Bar2, 9.12],
   [AA16, 19, 25, 31, FOO7, 4.80, 697],
   [AA16, 13, 49, 7, 5.67, 2.54, 4.54],
   [AA58, 19, 28, 43, 4.04, 0.90, baz8],
   [AA34, 16, 22, 19, 4.87, 4.90, 2.85],
   [AA52, 28, 34, 7, FOO9, Bar4, 293],
   [AA52, 10, 43, 13, 12.125, 5.69, 0.00],
   [AA40, 7, 25, 40, 3.15, 7.54, 6.11]],
 m : apply (matrix, l_nested),
 for i:1 thru length (l_nested)
  do h [l_nested [i] [1]] : rest (l_nested [i]),
 l: flatten (l_nested),
 0);
0;

(m2: read_matrix (file_search ("rectangular.data")),
 is (m = m2));
true;

(read_hashed_array (file_search ("rectangular.data"), h2),
 [is (arrayinfo (h) = arrayinfo (h2)), is (listarray (h) = listarray (h2))]);
[true, true];

(l2_nested : read_nested_list (file_search ("rectangular.data")),
 is (l_nested = l2_nested));
true;

(l2 : read_list (file_search ("rectangular.data")),
 is (l = l2));
true;

(write_data (m2, "tmp-matrix.data"),
 l3_nested : read_nested_list ("tmp-matrix.data"),
 is (l2_nested = l3_nested));
true;

(write_data (h2, "tmp-hashed-array.data"),
 read_hashed_array ("tmp-hashed-array.data", h3),
 [is (arrayinfo (h2) = arrayinfo (h3)), is (listarray (h2) = listarray (h3))]);
[true, true];

(write_data (l2_nested, "tmp-nested-list.data"),
 m3 : read_matrix ("tmp-nested-list.data"),
 is (m2 = m3));
true;

(write_data (l2, "tmp-list.data"),
 l3 : read_list ("tmp-list.data"),
 is (l2 = l3));
true;

(KEY: -2.5,
 XX: 3.25,
 YY: 1.75,
 ZZ: 5.5,
 FOO: %pi,
 Bar: 175,
 baz: 2119,
 
 aa46: 46,
 aA31: 31,
 AA22: 22,
 AA16: 16,
 AA58: 58,
 AA34: 34,
 AA52: 52,
 AA40: 40,
 
 FOO3: 611,
 Bar2: 1917,
 FOO7: 6,
 baz8: -5,
 FOO9: -1.5,
 Bar4: -3.75,

 is (ev (m) = ev (m2)));
true;

/* Test read/write with different separator characters */

(kill (all),
 l_nested :
  [[false],
   [false, false],
   [false, false, false],
   [false, false, false, false],
   [Foo],
   [Foo, false],
   [false, Foo],
   [Foo, false, false],
   [false, Foo, false],
   [false, false, Foo],
   [Foo, BAR, false],
   [Foo, false, BAR],
   [false, Foo, BAR],
   [Foo, BAR, baz, embedded\ space\ and\ \$p\*cia\!\ c\#\@rs],
   [12.34, Foo, 12375e-3, BAR, 1234b-2, baz, 1234],
   ["tab	space comma, semicolon; pipe| dollar$", "quux \"blart\"", ?a\-lisp\-symbol]],
 0);
0;

(l_nested_2 : read_nested_list (file_search ("semicolon.data"), 'semicolon),
 is (l_nested = l_nested_2));
true;

(l_nested_3 : read_nested_list (file_search ("pipe.data"), 'pipe),
 is (l_nested = l_nested_3));
true;

(write_data (l_nested_2, "tmp-tab.data", 'tab),
 l_nested_4: read_nested_list ("tmp-tab.data", 'tab),
 is (l_nested = l_nested_4));
true;

/* Test read/write on streams (instead of files) */

(kill (all),
 0);
0;

(a1 : make_array ('any, 3, 4, 5),
 read_lisp_array (file_search ("array.data"), a1),
 a2 : make_array ('any, 3, 4, 5),
 s : openr (file_search ("array.data")),
 read_lisp_array (s, a2),
 close (s),
 is (a1 = a2));
true;

(s : openw ("tmp-lisp-array.data"),
 write_data (a2, s),
 close (s),
 a3 : make_array ('any, 3, 4, 5),
 s : openr ("tmp-lisp-array.data"),
 read_lisp_array (s, a3),
 close (s),
 is (a1 = a3));
true;

(b1 : array (b, 2, 3, 4),
 read_maxima_array (file_search ("array.data"), b1),
 b2 : array (b, 2, 3, 4),
 s : openr (file_search ("array.data")),
 read_lisp_array (s, b2),
 close (s),
 is (b1 = b2));
true;

(s : openw ("tmp-maxima-array.data"),
 write_data (b2, s),
 close (s),
 b3 : array (b, 2, 3, 4),
 s : openr ("tmp-maxima-array.data"),
 read_maxima_array (s, b3),
 close (s),
 is (b1 = b3));
true;

(m1 : read_matrix (file_search ("rectangular.data")),
 s : openr (file_search ("rectangular.data")),
 m2 : read_matrix (s),
 close (s),
 is (m1 = m2));
true;

(s : openw ("tmp-matrix.data"),
 write_data (m2, s),
 close (s),
 s : openr ("tmp-matrix.data"),
 m3 : read_matrix (s),
 close (s),
 is (m1 = m3));
true;

(l1 : read_list (file_search ("ragged.data")),
 s : openr (file_search ("ragged.data")),
 l2 : read_list (s),
 close (s),
 is (l1 = l2));
true;

(s : openw ("tmp-list.data"),
 write_data (l2, s),
 close (s),
 s : openr ("tmp-list.data"),
 l3 : read_list (s),
 close (s),
 is (l1 = l3));
true;

(l1 : read_nested_list (file_search ("ragged.data")),
 s : openr (file_search ("ragged.data")),
 l2 : read_nested_list (s),
 close (s),
 is (l1 = l2));
true;

(s : openw ("tmp-nested-list.data"),
 write_data (l2, s),
 close (s),
 s : openr ("tmp-nested-list.data"),
 l3 : read_nested_list (s),
 close (s),
 is (l1 = l3));
true;

(read_hashed_array (file_search ("ragged.data"), h1),
 s : openr (file_search ("ragged.data")),
 read_hashed_array (s, h2),
 close (s),
 [is (arrayinfo (h1) = arrayinfo (h2)), is (listarray (h1) = listarray (h2))]);
[true, true];

(s : openw ("tmp-hashed-array.data"),
 write_data (h2, s),
 close (s),
 s : openr ("tmp-hashed-array.data"),
 read_hashed_array (s, h3),
 close (s),
 [is (arrayinfo (h1) = arrayinfo (h3)), is (listarray (h1) = listarray (h3))]);
[true, true];

