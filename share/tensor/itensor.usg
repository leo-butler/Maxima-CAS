This file describes  the way to work with maxima's indicial
tensor manipulation package.

The "itensor" package is considered, currently, as broken.
Indeed, some functions like, 
components(tensor1,tensor2), remcomponents(tensor), are broken.


Nevertheless, it is possible to use "itensor", at least for small
problems. The current ability of itensor is demonstrated by
"itensor.dem". I tested it on cvs maxima-5.9.0rc3 compiled vs 
clisp-2.29 and cmucl-18d+. To run the tensor packages on the gcl compiled
maxima you need to compile the sources (Just start Maxima and type
:lisp(compile-file "itensor.lisp"). Repeat it for "canten,gener & symtry.lisp"). 
and clisp-2.28. Note the cool feature provided by generate(eqs).
It make possible to use results obtained by "itensor" in
"ctensr" (express indexed terms via components).

To start the itensor use load(itensor).

Currently, it is recomended to use the switch bothcases:false. It gives
the better indexes representation. Also, you will safe from the upper-lower
cases conflict  in the case. It will be essential when you generate 
the components for particular tensor via generate() to use them 
with "ctensr". 

To assign some tensor expression for a particular tensor use the native
maxima abilities like
T(L1,L2):=E(L1,L2)+....
It is possible because in itensor the tensors are functions on indices.
This is a way around broken components(). Look in the "itensor.dem" to see
examples about it. 

The working demo files are 
"itensor.dem" - general review of itensor-ctensor abilities;
"ademo.dem" - proves the Balakram identity, relate to itensor;
"swartz.dem" - finds out the Swartzshild solution for black hole,
 relate to ctensr.   