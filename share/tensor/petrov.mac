/* Petrov classification scheme for diagonal metrics of dimension 4 */

setuptetrad():=block([],
    if dim # 4 then
        error("Dimension of space must be 4 to do this calculation"),
    array(%psi,complete,4),array(%tet,complete,4,4),
    if diagmetric then (tetradcaleq:true,
        %tet[1,1]:(-ug[1,1])^(1/2)*2^(-1/2),  %tet[1,2]:0,
            %tet[1,3]:0,  %tet[1,4]:ug[4,4]^(1/2)*2^(-1/2),
        %tet[2,1]:-(-ug[1,1])^(1/2)*2^(-1/2),  %tet[2,2]:0,
            %tet[2,3]:0,  %tet[2,4]:ug[4,4]^(1/2)*2^(-1/2),
        %tet[3,1]:0,  %tet[3,2]:%i*(-ug[2,2])^(1/2)*2^(-1/2),
            %tet[3,3]:(-ug[3,3])^(1/2)*2^(-1/2),  %tet[3,4]:0,
        %tet[4,1]:0,  %tet[4,2]:-%i*(-ug[2,2])^(1/2)*2^(-1/2),
            %tet[4,3]:(-ug[3,3])^(1/2)*2^(-1/2),  %tet[4,4]:0)
    else error("Metric not diagonal - cannot calculate tetrad"))$

contract4(l1,l2,l3,l4):=(modedeclare([l1,l2,l3,l4],fixnum),
    block([ans:0],
	  for i thru 4 do
	      (for j thru 4 do
		   (for k thru 4 do
		        (for l thru 4 do
			     ans:ans+w[i,j,k,l]*%tet[l1,i]*%tet[l2,j]
                                               *%tet[l3,k]*%tet[l4,l]))),
	  ratsimp(ans)))$

psi():=block([],if not tetradcaleq then setuptetrad(),
    psi[0]:-contract4(1,3,1,3),
    psi[1]:-contract4(1,2,1,3),
    psi[2]:-1/2*(contract4(1,2,1,2)+contract4(1,2,3,4)),
    psi[3]:contract4(1,2,2,4),
    psi[4]:-contract4(2,4,2,4))$


petrov():=block([ii,jj,gg,hh],psi(),
       ii:ratsimp(%psi[0]*%psi[4]-4*%psi[1]*%psi[3]+3*%psi[2]^2),
       jj:ratsimp(determinant(matrix([%psi[0],%psi[1],%psi[2]],
				     [%psi[1],%psi[2],%psi[3]],
				     [%psi[2],%psi[3],%psi[4]]))),
       if ratsimp(ii^3-27*jj^2) # 0 then "Type is I"
	   else (gg:ratsimp(%psi[0]^2*%psi[3]-3*%psi[0]*%psi[1]*%psi[2]
					     +2*%psi[1]^3),
		 if ii = 0 and jj = 0
		     then (if gg = 0
			       then (hh:ratsimp(%psi[0]*%psi[2]-%psi[1]^2),
				     if hh = 0
					 then (if 
					 %psi[0] = 0 and %psi[1] = 0
						     and %psi[2] = 0
						     and %psi[3] = 0
						     and %psi[4] = 0
					  then "Type is FLAT(0)"
					  else "Type is N")
					 else "Type is III")
			       else "Type is III")
		     else (hh:ratsimp(%psi[0]*%psi[2]-%psi[1]^2),
			   if ratsimp(gg-%psi[0]^2*ii-12*hh^2) # 0
			       then "Type is II" else "Type is D")))$
