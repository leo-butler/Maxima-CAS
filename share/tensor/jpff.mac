AUG 1

MODEDECLARE(I,INTEGER,J,INTEGER,K,INTEGER,L,INTEGER)$

MODEDECLARE(RICCISCALEQ,BOOLEAN,INVERTED,BOOLEAN,R,INTEGER)$

INVERTED:FALSE$

CHR1[I,J,K]:=IF I>=J THEN
    RATSIMP((1/2)*(DIFF(G[I,K],X[J])+DIFF(G[J,K],X[I])-DIFF(G[I,J],X[K]))) 
  ELSE CHR1[J,I,K]$

CHR2[I,J,L]:=IF I>=J THEN BLOCK([ANS],ANS:0,
       IF NOT INVERTED THEN [INVERTED:TRUE,H:G^^-1],
       FOR K:1 THRU 4 DO ANS:ANS+CHR1[I,J,K]*H[K,L],
       RATSIMP(ANS) ) 
    ELSE CHR2[J,I,K]$

RIEMANN[I,J,K,L]:=IF (I=J) OR (L=K) THEN 0
    ELSE IF I<J THEN -RIEMANN[J,I,K,L]
    ELSE IF K<L THEN -RIEMANN[I,J,L,K]
    ELSE IF I+4*J<K+4*L THEN RIEMAN[K,L,I,J]
    ELSE RATSIMP(RIE1(J,L,I,K)-RIE1(J,K,I,L)+RIE2(I,L,J,K)-RIE2(I,K,J,L))$

RIE2(I,J,K,L):=IF I<J THEN RIE2(J,I,K,L)
    ELSE IF K<L THEN RIE2(I,J,L,K)
    ELSE BLOCK([ANS], ANS:0,
        FOR R:1 THRU 4 DO ANS:ANS+CHR1[I,J,R]*CHR2[K,L,R], ANS)$

RIE1(I,J,K,L):=IF I>=J THEN DIFF(CHR1[I,J,K],X[L]) ELSE RIE1(J,I,K,L)$

RICCI[I,J]:=IF I>=J THEN BLOCK([ANS], ANS:0,
    IF NOT INVERTED THEN [INVERTED:TRUE,H:G^^-1],
    FOR K:1 THRU 4 DO 
        FOR L:1 THRU 4 DO ANS:ANS+RIEMANN[I,K,J,L]*H[K,L],
     RATSIMP(ANS))
  ELSE RICCI[J,I]$

RICCISCALEQ:FALSE$

CALSCAL():=(RICCISCALAR:0,
    IF NOT INVERTED THEN [INVERTED:TRUE,H:G^^-1],
    RICCISCALEQ:TRUE,
     FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        RICCISCALAR:RICCISCALAR+RICCI[I,J]*H[I,J],
    RICCISCALAR:RATSIMP(RICCISCALAR))$

EINSTEIN[I,J]:=IF I>=J THEN BLOCK( IF NOT RICCISCALEQ THEN CALSCAL(),
    RATSIMP(RICCI[I,J]-(1/2)*RICCISCALAR*G[I,J])) ELSE EINSTEIN[J,I]$

WEYL[I,J,K,L]:=IF (I=J) OR (K=L) THEN 0
    ELSE IF I<J THEN -WEYL[J,I,K,L]
    ELSE IF K<L THEN -WEYL[I,J,L,K]
    ELSE IF I+4*J<K+4*L THEN WEYL[K,L,I,J]
    ELSE ( IF NOT RICCISCALEQ THEN CALSCAL(),
        RATSIMP(RIEMANN[I,J,K,L]+(1/2)*(G[I,L]*RICCI[J,K]-G[I,K]*RICCI[L,J]
                               +G[J,K]*RICCI[L,I]-G[J,L]*RICCI[K,I])
                        -(1/6)*RICCISCALAR*(G[I,L]*G[K,J]-G[I,K]*G[L,J]))
        )$

CONTRACT(L1,L2,L3,L4):=BLOCK([ANS],ANS:0,
    FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        FOR K:1 THRU 4 DO FOR L:1 THRU 4 DO
            ANS:ANS+WEYL[I,J,K,L]*L1[I]*L2[J]*L3[K]*L4[L],
    RATSIMP(ANS)
    )$

PSI[I]:=( IF NOT TETRADCALEQ THEN SETUPTETRAD(),
    IF NOT TETRADCALEQ THEN "ERROR--NO TETRAD",
    IF I=0 THEN -CONTRACT(TET1,TET3,TET1,TET3)
    ELSE IF I=1 THEN -CONTRACT(TET1,TET2,TET1,TET3)
    ELSE IF I=2 THEN -(1/2)*(CONTRACT(TET1,TET2,TET1,TET2)+
                             CONTRACT(TET1,TET2,TET3,TET4))
    ELSE IF I=3 THEN CONTRACT(TET1,TET2,TET2,TET4)
    ELSE IF I=4 THEN -CONTRACT(TET2,TET4,TET2,TET4)
    ELSE UNDEFINED)$

PETROV():=BLOCK([II,JJ,GG,HH],
    II:RATSIMP(PSI[0]*PSI[4]-4*PSI[1]*PSI[3]+3*PSI[2]^2),
    JJ:RATSIMP(DETERMINANT(MATRIX(
        [PSI[0],PSI[1],PSI[2]],
        [PSI[1],PSI[2],PSI[3]],
        [PSI[2],PSI[3],PSI[4]]))),
    IF RATSIMP(II^3-27*JJ^2)#0 THEN "TYPE IS I"
    ELSE (GG:RATSIMP(PSI[0]^2*PSI[3]-3*PSI[0]*PSI[1]*PSI[2]+2*PSI[1]^3),
    IF (II=0)AND(JJ=0) THEN 
        IF GG=0 THEN ( HH:RATSIMP(PSI[0]*PSI[2]-PSI[1]^2),
            IF HH=0 THEN
                IF (PSI[0]=0)AND(PSI[1]=0)AND(PSI[2]=0)AND
                    (PSI[3]=0)AND(PSI[4]=0) THEN "TYPE IS FLAT(0)" ELSE
                 "TYPE IS N" ELSE "TYPE IS III")
            ELSE "TYPE IS III"
    ELSE (HH:RATSIMP(PSI[0]*PSI[2]-PSI[1]^2),
    IF RATSIMP(GG-PSI[0]^2*II-12*HH^2)#0 THEN "TYPE IS II" ELSE "TYPE IS D"
)))$
    

TETRADCALEQ:FALSE$

SETUPTETRAD():=BLOCK([DIAGQ],DIAG:TRUE,
    FOR I:1 THRU 4 DO FOR J:I+1 THRU 4 DO IF G[I,J]#0 THEN DIAGQ:FALSE,
    IF DIAG THEN ( TETRADCALEQ:TRUE,
        IF NOT INVERTED THEN H:G^^-1,
        TET1:[(-H[1,1])^(1/2),0,0,H[4,4]^(1/2)]*2^(-1/2),
        TET2:[-(-H[1,1])^(1/2),0,0,H[4,4]^(1/2)]*2^(-1/2),
        TET3:[0,%I*(-H[2,2])^(1/2),(-H[3,3])^(1/2),0]*2^(-1/2),
        TET4:[0,-%I*(-H[2,2])^(1/2),(-H[3,3])^(1/2),0]*2^(-1/2) )
    ELSE "CANNOT CALCULATE TETRAD????????")$

SETUP():=BLOCK([A], INVERTED:RICCISCALEQ:TETRADCALEQ:FALSE,
    REMVALUE(H,CHR1,CHR2,RIEMANN,RICCI,RICCISCALAR,WEYL,PSI),
    IF MATRIXP(G) THEN (PRINT("IS THIS THE CORRECT METRIC?",G),
        A:READ("0 FOR YES,1 FOR EDIT,2 FOR NEW:")) ELSE A:2,
        IF A=2 THEN (PRINT("DIAGIONAL?","0 FOR YES","1 FOR NO"),
            A:READ("?"),
            IF A=0 THEN (G:DIAGMATRIX(4,0),
                FOR I THRU 4 DO G[I,I]:READ("[",I,I,"]"))
            ELSE FOR I THRU 4 DO FOR J:I THRU 4 DO
                G[I,J]:G[J,I]:READ("[",I,J,"]"),
            PRINT("METRIC IS ",G))
        ELSE IF A=0 THEN DONE
        ELSE IF A=1 THEN BLOCK([VE],
            PRINT("GIVE VECTOR [I,J] (GIVE A ZERO I WHEN FINISHED)"),
  AGAIN,    VE:READ("?:-"),
            IF VE[1]=0 THEN GO(OUT),
            G[VE[1],VE[2]]:G[VE[2],VE[1]]:READ("G",VE,"?"), GO(AGAIN), OUT,
            PRINT("METRIC IS ",G)),
        DONE )$


G:MATRIX([-(1-M/X[1])^-1,0,0,0],[0,-X[1]^2,0,0],[0,0,-(X[1]*SIN(X[2]))^2,0],[0,0,0,(1-M/X[1])])$







AUG 5

ARRAY(%TET,4,4)$
ARRAY(X,4)$
ARRAY(%CHR1,4,4,4)$
ARRAY(%CHR2,4,4,4)$
ARRAY(%RIEMANN,4,4,4,4)$
ARRAY(%RICCI,4,4)$
ARRAY(%WEYL,4,4,4,4)$

CHR1(I,J,K):=(MODEDECLARE([I,J,K],INTEGER),
  IF %CHR1[I,J,K]#UNDEF THEN %CHR1[I,J,K] 
  ELSE %CHR1[I,J,K]:%CHR1[J,I,K]:
      RATSIMP((1/2)*(DIFF(G[I,K],X[J])+DIFF(G[J,K],X[I])-DIFF(G[I,J],X[K]))) )$

CHR2(I,J,L):=(MODEDECLARE([I,J,K,L],INTEGER),
  IF %CHR2[I,J,L]#UNDEF THEN %CHR2[I,J,L]
  ELSE %CHR2[I,J,L]:%CHR2[J,I,L]:BLOCK([ANS],ANS:0,
       IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
       FOR K:1 THRU 4 DO ANS:ANS+CHR1(I,J,K)*H[K,L],
       RATSIMP(ANS) ) )$

RIEMANN(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER),
  IF %RIEMANN[I,J,K,L]#UNDEF THEN %RIEMANN[I,J,K,L]
    ELSE IF (I=J) OR (L=K) THEN %RIEMANN[I,J,K,L]:0
    ELSE IF I<J THEN %RIEMANN[I,J,K,L]:-RIEMANN(J,I,K,L)
    ELSE IF K<L THEN %RIEMANN[I,J,K,L]:-RIEMANN(I,J,L,K)
    ELSE IF I+4*J<K+4*L THEN RIEMANN(K,L,I,J)
    ELSE %RIEMANN[I,J,K,L]:%RIEMANN[K,L,I,J]:RATSIMP(
        RIE1(J,L,I,K)-RIE1(J,K,I,L)+RIE2(I,L,J,K)-RIE2(I,K,J,L)))$

RIE2(I,J,K,L):=BLOCK([ANS],
    MODEDECLARE([I,J,K,L,R],INTEGER),
     ANS:0,
        FOR R:1 THRU 4 DO ANS:ANS+CHR1(I,J,R)*CHR2(K,L,R), ANS)$

RIE1(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER),
    DIFF(CHR1(I,J,K),X[L]))$

RICCI(I,J):=(
  MODEDECLARE([I,J,K,L],INTEGER,INVERTED,BOOLEAN),
  IF %RICCI[I,J]#UNDEF THEN %RICCI[I,J]
  ELSE %RICCI[I,J]:%RICCI[J,I]:BLOCK([ANS], ANS:0,
    IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
    FOR K:1 THRU 4 DO 
        FOR L:1 THRU 4 DO ANS:ANS+RIEMANN(I,K,J,L)*H[K,L],
     RATSIMP(ANS))
)$


CALSCAL():=(MODEDECLARE([RICCISCALEQ,INVERTED],BOOLEAN,[I,J],INTEGER),
    RICCISCALAR:0,
    IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
    RICCISCALEQ:TRUE,
     FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        RICCISCALAR:RICCISCALAR+RICCI(I,J)*H[I,J],
    RICCISCALAR:RATSIMP(RICCISCALAR))$

EINSTEIN(I,J):=(MODEDECLARE([I,J],INTEGER,RICCISCALEQ,BOOLEAN),
  IF %EINSTEIN[I,J]#UNDEF THEN %EINSTEIN[I,J]
  ELSE %EINSTEIN[I,J]:%EINSTEIN[J,I]:BLOCK( IF NOT RICCISCALEQ THEN CALSCAL(),
    RATSIMP(RICCI(I,J)-(1/2)*RICCISCALAR*G[I,J])) )$

WEYL(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER,RICCISCALEQ,BOOLEAN),
IF %WEYL[I,J,K,L]#UNDEF THEN %WEYL[I,J,K,L]
  ELSE %WEYL[I,J,K,L]:%WEYL[K,L,I,J]:IF (I=J) OR (K=L) THEN 0
    ELSE IF I<J THEN -WEYL(J,I,K,L)
    ELSE IF K<L THEN -WEYL(I,J,L,K)
    ELSE ( IF NOT RICCISCALEQ THEN CALSCAL(),
        RATSIMP(RIEMANN(I,J,K,L)+(1/2)*(G[I,L]*RICCI(J,K)-G[I,K]*RICCI(L,J)
                               +G[J,K]*RICCI(L,I)-G[J,L]*RICCI(K,I))
                        -(1/6)*RICCISCALAR*(G[I,L]*G[K,J]-G[I,K]*G[L,J]))
        ))$

CONTRACT(L1,L2,L3,L4):=BLOCK([ANS],
    MODEDECLARE([L1,L2,L3,L4,I,J,K,L],INTEGER),
    ANS:0,
    FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        FOR K:1 THRU 4 DO FOR L:1 THRU 4 DO
            ANS:ANS+WEYL(I,J,K,L)*%TET[L1,I]*%TET[L2,J]*%TET[L3,K]*%TET[L4,L],
    RATSIMP(ANS)
    )$

PSI(I):=(MODEDECLARE(I,INTEGER,TETRADCALEQ,BOOLEAN),
  IF %PSI[I]#UNDEF THEN %PSI[I]
  ELSE %PSI[I]:( IF NOT TETRADCALEQ THEN SETUPTETRAD(),
    IF NOT TETRADCALEQ THEN "ERROR--NO TETRAD"
    ELSE IF I=0 THEN -CONTRACT(1,3,1,3)
    ELSE IF I=1 THEN -CONTRACT(1,2,1,3)
    ELSE IF I=2 THEN -(1/2)*(CONTRACT(1,2,1,2)+
                             CONTRACT(1,2,3,4))
    ELSE IF I=3 THEN CONTRACT(1,2,2,4)
    ELSE IF I=4 THEN -CONTRACT(2,4,2,4)
    ELSE UNDEFINED))$

PETROV():=BLOCK([II,JJ,GG,HH],
    II:RATSIMP(PSI(0)*PSI(4)-4*PSI(1)*PSI(3)+3*PSI(2)^2),
    JJ:RATSIMP(DETERMINANT(MATRIX(
        [%PSI[0],%PSI[1],%PSI[2]],
        [%PSI[1],%PSI[2],%PSI[3]],
        [%PSI[2],%PSI[3],%PSI[4]]))),
    IF RATSIMP(II^3-27*JJ^2)#0 THEN "TYPE IS I"
    ELSE (GG:RATSIMP(%PSI[0]^2*%PSI[3]-3*%PSI[0]*%PSI[1]*%PSI[2]+2*%PSI[1]^3),
    IF (II=0)AND(JJ=0) THEN 
        IF GG=0 THEN ( HH:RATSIMP(%PSI[0]*%PSI[2]-%PSI[1]^2),
            IF HH=0 THEN
                IF (%PSI[0]=0)AND(%PSI[1]=0)AND(%PSI[2]=0)AND
                    (%PSI[3]=0)AND(%PSI[4]=0) THEN "TYPE IS FLAT(0)" ELSE
                 "TYPE IS N" ELSE "TYPE IS III")
            ELSE "TYPE IS III"
    ELSE (HH:RATSIMP(%PSI[0]*%PSI[2]-%PSI[1]^2),
    IF RATSIMP(GG-%PSI[0]^2*II-12*HH^2)#0 THEN "TYPE IS II" ELSE "TYPE IS D"
)))$
    


SETUPTETRAD():=BLOCK([DIAGQ],
    MODEDECLARE([TETRADCALEQ,INVERTED,DIAGQ],BOOLEAN,[I,J],INTEGER),
    ARRAY(%TET,COMPLETE,4,4),
    DIAGQ:TRUE,
    FOR I:1 THRU 4 DO FOR J:I+1 THRU 4 DO IF G[I,J]#0 THEN DIAGQ:FALSE,
    IF DIAGQ THEN ( TETRADCALEQ:TRUE,
        IF NOT INVERTED THEN (INVERTED:TRUE, H:G^^-1),
        %TET[1,1]:(-H[1,1])^(1/2)*2^(-1/2),  %TET[1,2]:0,
            %TET[1,3]:0,    %TET[1,4]:H[4,4]^(1/2)*2^(-1/2),
        %TET[2,1]:-(-H[1,1])^(1/2)*2^(-1/2),  %TET[2,2]:0,  %TET[2,3]:0,
            %TET[2,4]:H[4,4]^(1/2)*2^(-1/2),
        %TET[3,1]:0,  %TET[3,2]:%I*(-H[2,2])^(1/2)*2^(-1/2),
            %TET[3,3]:(-H[3,3])^(1/2)*2^(-1/2),    %TET[3,4]:0,
        %TET[4,1]:0,    %TET[4,2]:-%I*(-H[2,2])^(1/2)*2^(-1/2),
            %TET[4,3]:(-H[3,3])^(1/2)*2^(-1/2),    %TET[4,4]:0 )
    ELSE "CANNOT CALCULATE TETRAD????????")$

SETUP():=BLOCK([A], MODEDECLARE([INVERTED,RICCISCALEQ,TETRADCALEQ],BOOLEAN),
    MODEDECLARE([I,J,K,L],INTEGER),
    ARRAY(%PSI,COMPLETE,4), ARRAY(%RICCI,COMPLETE,4,4),
    ARRAY(%EINSTEIN,COMPLETE,4,4), ARRAY(%CHR1,COMPLETE,4,4,4),
    ARRAY(%CHR2,COMPLETE,4,4,4), ARRAY(%RIEMANN,COMPLETE,4,4,4,4),
    ARRAY(%WEYL,COMPLETE,4,4,4,4),
    INVERTED:RICCISCALEQ:TETRADCALEQ:FALSE,
    FOR I:0 THRU 4 DO %PSI[I]:UNDEF,
    FOR I THRU 4 DO FOR J THRU 4 DO (
        %RICCI[I,J]:%EINSTEIN[I,J]:UNDEF,
        FOR K THRU 4 DO (
            %CHR1[I,J,K]:%CHR2[I,J,K]:UNDEF,
           FOR L THRU 4 DO %RIEMANN[I,J,K,L]:%WEYL[I,J,K,L]:UNDEF)
        ),
    IF MATRIXP(G) THEN (PRINT("IS THIS THE CORRECT METRIC?",G),
        A:READ("0 FOR YES,1 FOR EDIT,2 FOR NEW:")) ELSE A:2,
        IF A=2 THEN (PRINT("DIAGIONAL?","0 FOR YES","1 FOR NO"),
            A:READ("?"),
            IF A=0 THEN (G:DIAGMATRIX(4,0),
                FOR I THRU 4 DO G[I,I]:READ("[",I,I,"]"))
            ELSE FOR I THRU 4 DO FOR J:I THRU 4 DO
                G[I,J]:G[J,I]:READ("[",I,J,"]"),
            PRINT("METRIC IS ",G))
        ELSE IF A=0 THEN DONE
        ELSE IF A=1 THEN BLOCK([VE],
            PRINT("GIVE VECTOR [I,J] (GIVE A ZERO I WHEN FINISHED)"),
  AGAIN,    VE:READ("?:-"),
            IF VE[1]=0 THEN GO(OUT),
            G[VE[1],VE[2]]:G[VE[2],VE[1]]:READ("G",VE,"?"), GO(AGAIN), OUT,
            PRINT("METRIC IS ",G)),
        PRINT("IS THIS THE CORRECT COORDINATE VECTOR?",X[1],X[2],X[3],X[4]),
        A:READ("0 for yes, OTHERWISE A VECTOR"),
        IF A#0 THEN FOR I THRU 4 DO X[I]:A[I],
        IF MATRIXP(H) THEN
            IF RATSIMP(H.G)=IDENT(4) THEN INVERTED:TRUE
            ELSE (PRINT("IS THIS REALLY THE CONTRAVARIANT METRIC",H),
                A:READ("0 FOR YES 1 FOR NO"),
                IF A=0 THEN INVERTED:TRUE),
        DONE )$


G:MATRIX([-(1-M/X[1])^-1,0,0,0],[0,-X[1]^2,0,0],[0,0,-(X[1]*SIN(X[2]))^2,0],[0,0,0,(1-M/X[1])])$








JPFF PET2

ARRAY(%TET,4,4)$
ARRAY(X,4)$
ARRAY(%CHR1,4,4,4)$
ARRAY(%CHR2,4,4,4)$
ARRAY(%RIEMANN,4,4,4,4)$
ARRAY(%RICCI,4,4)$
ARRAY(%WEYL,4,4,4,4)$

CHR1(I,J,K):=(MODEDECLARE([I,J,K],INTEGER),
  IF %CHR1[I,J,K]#UNDEF THEN %CHR1[I,J,K] 
  ELSE %CHR1[I,J,K]:%CHR1[J,I,K]:
      RATSIMP((1/2)*(DIFF(G[I,K],X[J])+DIFF(G[J,K],X[I])-DIFF(G[I,J],X[K]))) )$

CHR2(I,J,L):=(MODEDECLARE([I,J,K,L],INTEGER),
  IF %CHR2[I,J,L]#UNDEF THEN %CHR2[I,J,L]
  ELSE %CHR2[I,J,L]:%CHR2[J,I,L]:BLOCK([ANS],ANS:0,
       IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
       FOR K:1 THRU 4 DO ANS:ANS+CHR1(I,J,K)*H[K,L],
       RATSIMP(ANS) ) )$

RIEMANN(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER),
  IF %RIEMANN[I,J,K,L]#UNDEF THEN %RIEMANN[I,J,K,L]
    ELSE IF (I=J) OR (L=K) THEN %RIEMANN[I,J,K,L]:0
    ELSE IF I<J THEN %RIEMANN[I,J,K,L]:-RIEMANN(J,I,K,L)
    ELSE IF K<L THEN %RIEMANN[I,J,K,L]:-RIEMANN(I,J,L,K)
    ELSE IF I+4*J<K+4*L THEN RIEMANN(K,L,I,J)
    ELSE %RIEMANN[I,J,K,L]:%RIEMANN[K,L,I,J]:RATSIMP(
        RIE1(J,L,I,K)-RIE1(J,K,I,L)+RIE2(I,L,J,K)-RIE2(I,K,J,L)))$

RIE2(I,J,K,L):=BLOCK([ANS],
    MODEDECLARE([I,J,K,L,R],INTEGER),
     ANS:0,
        FOR R:1 THRU 4 DO ANS:ANS+CHR1(I,J,R)*CHR2(K,L,R), ANS)$

RIE1(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER),
    DIFF(CHR1(I,J,K),X[L]))$

RICCI(I,J):=(
  MODEDECLARE([I,J,K,L],INTEGER,INVERTED,BOOLEAN),
  IF %RICCI[I,J]#UNDEF THEN %RICCI[I,J]
  ELSE %RICCI[I,J]:%RICCI[J,I]:BLOCK([ANS], ANS:0,
    IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
    FOR K:1 THRU 4 DO 
        FOR L:1 THRU 4 DO ANS:ANS+RIEMANN(I,K,J,L)*H[K,L],
     RATSIMP(ANS))
)$


CALSCAL():=(MODEDECLARE([RICCISCALEQ,INVERTED],BOOLEAN,[I,J],INTEGER),
    RICCISCALAR:0,
    IF NOT INVERTED THEN (INVERTED:TRUE,H:G^^-1),
    RICCISCALEQ:TRUE,
     FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        RICCISCALAR:RICCISCALAR+RICCI(I,J)*H[I,J],
    RICCISCALAR:RATSIMP(RICCISCALAR))$

EINSTEIN(I,J):=(MODEDECLARE([I,J],INTEGER,RICCISCALEQ,BOOLEAN),
  IF %EINSTEIN[I,J]#UNDEF THEN %EINSTEIN[I,J]
  ELSE %EINSTEIN[I,J]:%EINSTEIN[J,I]:BLOCK( IF NOT RICCISCALEQ THEN CALSCAL(),
    RATSIMP(RICCI(I,J)-(1/2)*RICCISCALAR*G[I,J])) )$

WEYL(I,J,K,L):=(MODEDECLARE([I,J,K,L],INTEGER,RICCISCALEQ,BOOLEAN),
IF %WEYL[I,J,K,L]#UNDEF THEN %WEYL[I,J,K,L]
  ELSE %WEYL[I,J,K,L]:%WEYL[K,L,I,J]:IF (I=J) OR (K=L) THEN 0
    ELSE IF I<J THEN -WEYL(J,I,K,L)
    ELSE IF K<L THEN -WEYL(I,J,L,K)
    ELSE ( IF NOT RICCISCALEQ THEN CALSCAL(),
        RATSIMP(RIEMANN(I,J,K,L)+(1/2)*(G[I,L]*RICCI(J,K)-G[I,K]*RICCI(L,J)
                               +G[J,K]*RICCI(L,I)-G[J,L]*RICCI(K,I))
                        -(1/6)*RICCISCALAR*(G[I,L]*G[K,J]-G[I,K]*G[L,J]))
        ))$

CONTRACT(L1,L2,L3,L4):=BLOCK([ANS],
    MODEDECLARE([L1,L2,L3,L4,I,J,K,L],INTEGER),
    ANS:0,
    FOR I:1 THRU 4 DO FOR J:1 THRU 4 DO
        FOR K:1 THRU 4 DO FOR L:1 THRU 4 DO
            ANS:ANS+WEYL(I,J,K,L)*%TET[L1,I]*%TET[L2,J]*%TET[L3,K]*%TET[L4,L],
    RATSIMP(ANS)
    )$

PSI(I):=(MODEDECLARE(I,INTEGER,TETRADCALEQ,BOOLEAN),
  IF %PSI[I]#UNDEF THEN %PSI[I]
  ELSE %PSI[I]:( IF NOT TETRADCALEQ THEN SETUPTETRAD(),
    IF NOT TETRADCALEQ THEN "ERROR--NO TETRAD"
    ELSE IF I=0 THEN -CONTRACT(1,3,1,3)
    ELSE IF I=1 THEN -CONTRACT(1,2,1,3)
    ELSE IF I=2 THEN -(1/2)*(CONTRACT(1,2,1,2)+
                             CONTRACT(1,2,3,4))
    ELSE IF I=3 THEN CONTRACT(1,2,2,4)
    ELSE IF I=4 THEN -CONTRACT(2,4,2,4)
    ELSE UNDEFINED))$

PETROV():=BLOCK([II,JJ,GG,HH],
    II:RATSIMP(PSI(0)*PSI(4)-4*PSI(1)*PSI(3)+3*PSI(2)^2),
    JJ:RATSIMP(DETERMINANT(MATRIX(
        [%PSI[0],%PSI[1],%PSI[2]],
        [%PSI[1],%PSI[2],%PSI[3]],
        [%PSI[2],%PSI[3],%PSI[4]]))),
    IF RATSIMP(II^3-27*JJ^2)#0 THEN "TYPE IS I"
    ELSE (GG:RATSIMP(%PSI[0]^2*%PSI[3]-3*%PSI[0]*%PSI[1]*%PSI[2]+2*%PSI[1]^3),
    IF (II=0)AND(JJ=0) THEN 
        IF GG=0 THEN ( HH:RATSIMP(%PSI[0]*%PSI[2]-%PSI[1]^2),
            IF HH=0 THEN
                IF (%PSI[0]=0)AND(%PSI[1]=0)AND(%PSI[2]=0)AND
                    (%PSI[3]=0)AND(%PSI[4]=0) THEN "TYPE IS FLAT(0)" ELSE
                 "TYPE IS N" ELSE "TYPE IS III")
            ELSE "TYPE IS III"
    ELSE (HH:RATSIMP(%PSI[0]*%PSI[2]-%PSI[1]^2),
    IF RATSIMP(GG-%PSI[0]^2*II-12*HH^2)#0 THEN "TYPE IS II" ELSE "TYPE IS D"
)))$
    


SETUPTETRAD():=BLOCK([DIAGQ],
    MODEDECLARE([TETRADCALEQ,INVERTED,DIAGQ],BOOLEAN,[I,J],INTEGER),
    ARRAY(%TET,COMPLETE,4,4),
    DIAGQ:TRUE,
    FOR I:1 THRU 4 DO FOR J:I+1 THRU 4 DO IF G[I,J]#0 THEN DIAGQ:FALSE,
    IF DIAGQ THEN ( TETRADCALEQ:TRUE,
        IF NOT INVERTED THEN (INVERTED:TRUE, H:G^^-1),
        %TET[1,1]:(-H[1,1])^(1/2)*2^(-1/2),  %TET[1,2]:0,
            %TET[1,3]:0,    %TET[1,4]:H[4,4]^(1/2)*2^(-1/2),
        %TET[2,1]:-(-H[1,1])^(1/2)*2^(-1/2),  %TET[2,2]:0,  %TET[2,3]:0,
            %TET[2,4]:H[4,4]^(1/2)*2^(-1/2),
        %TET[3,1]:0,  %TET[3,2]:%I*(-H[2,2])^(1/2)*2^(-1/2),
            %TET[3,3]:(-H[3,3])^(1/2)*2^(-1/2),    %TET[3,4]:0,
        %TET[4,1]:0,    %TET[4,2]:-%I*(-H[2,2])^(1/2)*2^(-1/2),
            %TET[4,3]:(-H[3,3])^(1/2)*2^(-1/2),    %TET[4,4]:0 )
    ELSE "CANNOT CALCULATE TETRAD????????")$

SETUP():=BLOCK([A], MODEDECLARE([INVERTED,RICCISCALEQ,TETRADCALEQ],BOOLEAN),
    MODEDECLARE([I,J,K,L],INTEGER),
    ARRAY(%PSI,COMPLETE,4), ARRAY(%RICCI,COMPLETE,4,4),
    ARRAY(%EINSTEIN,COMPLETE,4,4), ARRAY(%CHR1,COMPLETE,4,4,4),
    ARRAY(%CHR2,COMPLETE,4,4,4), ARRAY(%RIEMANN,COMPLETE,4,4,4,4),
    ARRAY(%WEYL,COMPLETE,4,4,4,4),
    INVERTED:RICCISCALEQ:TETRADCALEQ:FALSE,
    FOR I:0 THRU 4 DO %PSI[I]:UNDEF,
    FOR I THRU 4 DO FOR J THRU 4 DO (
        %RICCI[I,J]:%EINSTEIN[I,J]:UNDEF,
        FOR K THRU 4 DO (
            %CHR1[I,J,K]:%CHR2[I,J,K]:UNDEF,
           FOR L THRU 4 DO %RIEMANN[I,J,K,L]:%WEYL[I,J,K,L]:UNDEF)
        ),
    IF MATRIXP(G) THEN (PRINT("IS THIS THE CORRECT METRIC?",G),
        A:READ("0 FOR YES,1 FOR EDIT,2 FOR NEW:")) ELSE A:2,
        IF A=2 THEN (PRINT("DIAGIONAL?","0 FOR YES","1 FOR NO"),
            A:READ("?"),
            IF A=0 THEN (G:DIAGMATRIX(4,0),
                FOR I THRU 4 DO G[I,I]:READ("[",I,I,"]"))
            ELSE FOR I THRU 4 DO FOR J:I THRU 4 DO
                G[I,J]:G[J,I]:READ("[",I,J,"]"),
            PRINT("METRIC IS ",G))
        ELSE IF A=0 THEN DONE
        ELSE IF A=1 THEN BLOCK([VE],
            PRINT("GIVE VECTOR [I,J] (GIVE A ZERO I WHEN FINISHED)"),
  AGAIN,    VE:READ("?:-"),
            IF VE[1]=0 THEN GO(OUT),
            G[VE[1],VE[2]]:G[VE[2],VE[1]]:READ("G",VE,"?"), GO(AGAIN), OUT,
            PRINT("METRIC IS ",G)),
        PRINT("IS THIS THE CORRECT COORDINATE VECTOR?",X[1],X[2],X[3],X[4]),
        A:READ("0 for yes, OTHERWISE A VECTOR"),
        IF A#0 THEN FOR I THRU 4 DO X[I]:A[I],
        IF MATRIXP(H) THEN
            IF RATSIMP(H.G)=IDENT(4) THEN INVERTED:TRUE
            ELSE (PRINT("IS THIS REALLY THE CONTRAVARIANT METRIC",H),
                A:READ("0 FOR YES 1 FOR NO"),
                IF A=0 THEN INVERTED:TRUE),
        DONE )$


G:MATRIX([-(1-M/X[1])^-1,0,0,0],[0,-X[1]^2,0,0],[0,0,-(X[1]*SIN(X[2]))^2,0],[0,0,0,(1-M/X[1])])$






