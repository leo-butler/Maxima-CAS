/* Be sure to test compiled, translated, and untranslated code.  
Translated code finds some errors that compiled code doesn't. */

/*
batchload("./specfun.mc");   
*/


/*compile_file("specfun.mc");  
load("./specfun.o");  
*/

/* For Macsyma 422, use 
translate_file("./specfun-110/specfun.mc");
load("./specfun-110/specfun.lsp");  
*/


translate_file("specfun.mc");
load("./specfun.LISP");  

showtime : all;

print("This test takes several minutes. While you wait, enjoy a caffeinated beverage.")$
print("Taylor might print funny messages similar to (Assumed to be zero in ");
print("TAYLOR ...).  Ignore them.");

/*  Rodrigue's formulae */

jacobi_p_rod(n,a,b,x) := block([ an, rho, g ],
    an : (-1)^n * 2^n * n!,
    rho : (1-t)^a * (1 + t)^b,
    g : 1-t^2,
    rat(subst(x,t, diff(rho * g^n,t,n) / (an * rho)))
);

gen_laguerre_rod(n, a, x) := block([an, rho, g],
   an : n!,
   rho : exp(-t) * t^a,
   g : t,
  rat(subst(x,t, diff(rho * g^n,t,n) / (an * rho)))
);

hermite_rod(n,x) := block([an, rho, g],
   an : (-1)^n,
   rho : exp(-t^2),
   g : 1,
  rat(subst(x,t, diff(rho * g^n,t,n) / (an * rho)))
);

/*See A&S 10.1.25 page 439. */

spherical_bessel_j_rod(n,x) := block([sofar,k],
  sofar : sin(x)/x,
  for k : 1 thru n do (
     sofar : -diff(sofar,x) / x
  ),
  x^n * sofar
);

spherical_bessel_y_rod(n,x) := block([sofar,k],
  sofar : cos(x) / x,
  for k : 1 thru n do (
     sofar : -diff(sofar,x) / x
  ),
  -x^n * sofar
);
     
all_functions :   [jacobi_p,
  ultraspherical,
  assoc_legendre_p,
  legendre_q,
  assoc_legendre_q,
  chebyshev_t,
  chebyshev_u,
  laguerre,
  gen_laguerre,
  legendre_p,
  hermite,
  spherical_hankel2,
  spherical_hankel1,
  spherical_bessel_j,
  spherical_bessel_y,
  assoc_leg_cos,
  spherical_harmonic];


errors_found : [ ];
tests_pass : [ ];

zerop(e) := is(0=e);
        
check_zero_list(e) := block([ k, okay,n],
   kill(labels), 
   okay : true,
   k : 0,
   n : length(e),
   while okay and k < n do (
      k : k + 1,
      if not zerop(e[ k ]) then (
          okay : false
      ) 
  ),
  if okay then (
      print("okay:  ", test_name),
      tests_pass : endcons(test_name, tests_pass)
  ) else (
         print("error: ", test_name),
         print("should vanish = ", e[ k ]),
         errors_found : endcons(test_name, errors_found)
  )   
)$

check_true_list(e) := block([ ],
   if member(false, e) then  (
       print("error:  ",  test_name),
       errors_found : endcons(test_name, errors_found)
   )  else (
      print("okay:  ", test_name),
      tests_pass : endcons(test_name, tests_pass)
   )   
)$

/* Jacobi Rodrigues test*/

test_name :  "Jacobi Rodrigues test";
foo : makelist(jacobi_p(k,a,b,x) - jacobi_p_rod(k,a,b,x), k,0,5)$
foo : rat(foo)$
check_zero_list(foo);
 
/*  gen_laguerre Rodrigues*/

test_name : "gen_laguerre Rodrigues";
foo : makelist(gen_laguerre(k,a,x) - gen_laguerre_rod(k,a,x), k,0,5)$
foo : rat(foo)$
check_zero_list(foo);

/*  hermite Rodrigues*/

test_name : "hermite Rodrigues";
foo : makelist(hermite(k,x) - hermite_rod(k,x), k,0,5)$
foo : rat(foo)$
check_zero_list(foo);

/*  spherical_bessel_j Rodrigues*/

test_name : "spherical_bessel_j Rodrigues";
foo : makelist(spherical_bessel_j(k,x) - spherical_bessel_j_rod(k,x), k,0,5)$
foo : rat(foo)$
check_zero_list(foo);

/*  spherical_bessel_y Rodrigues*/

test_name : "spherical_bessel_y Rodrigues";
foo : makelist(spherical_bessel_y(k,x) - spherical_bessel_y_rod(k,x), k,0,5)$
foo : rat(foo)$
check_zero_list(foo);

/*---------------*/

my_conjugate(e) := subst(-%i, %i,e);

test_name : "spherical harmonic orthogonality";

baz(n1,m1,n2,m2) := integrate(integrate(spherical_harmonic(n1,m1,th,ph) * 
    my_conjugate(spherical_harmonic(n2,m2,th,ph)) * sin(th),th,0,%pi),ph,0,2*%pi);

sofar : [ ];
for n1 : 0 thru 2 do (
   for m1 : -n1 thru n1 do (
        for n2 : 0 thru 2 do (
	    for  m2 : - n2 thru n2 do (
	         sofar : cons(baz(n1,m1,n2,m2) - kron_delta(n1,n2) * kron_delta(m1,m2), sofar)
	     )
	  )
      )
 );

check_zero_list(sofar);      	      	 
    
/*----------------*/

/* See A&S 22.3.14 page 776 and 22.5.4 page 777.
*/

test_name : "A&S 22.3.14";

foo : makelist(ultraspherical(n,a,cos(x))/a - 2*cos(n*x)/n,n,1, 3)$
foo : limit(foo,a,0)$
foo : ratsimp(trigreduce(foo))$
check_zero_list(foo)$ 

/* See A&S 22.3.14 page 776
*/

test_name : "A&S 22.3.14";

foo : makelist(chebyshev_t(n,cos(x)) - cos(n*x),n,0, 3);
foo : ratsimp(trigreduce(foo))$
check_zero_list(foo)$ 

/* See A&S 22.3.15 page 776
*/

test_name : "A&S 22.3.15";

foo : makelist(sin(x) * chebyshev_u(n,cos(x)) - sin((n+1)*x),n,0, 4)$
foo : ratsimp(trigreduce(foo))$
check_zero_list(foo)$ 
   
/* See A&S 22.7.15  page 782.
*/

test_name : "A&S 22.7.15";

jacobi_rec(n) := (n + a/2+b/2+1)*(1-x)*jacobi_p(n,a+1,b,x) 
      - (n+a+1)*jacobi_p(n,a,b,x) + (n+1)*jacobi_p(n+1,a,b,x);
      
check_zero_list(makelist(ratsimp(jacobi_rec(n)),n,0,  7));   

/* See  A&S 22.7.16 page 782
*/

test_name : "A&S 22.7.16";

jacobi_rec(n) := (n + a/2+b/2+1)*(1+x)*jacobi_p(n,a,b+1,x) 
      - (n+b+1)*jacobi_p(n,a,b,x) - (n+1)*jacobi_p(n+1,a,b,x);

check_zero_list(makelist(ratsimp(jacobi_rec(n)),n,0, 7));   

/* See A&S 22.7.17 page 782
*/

test_name : "A&S 22.7.17";

jacobi_rec(n) := (1-x)*jacobi_p(n,a+1,b,x) 
      + (1+x)*jacobi_p(n,a,b+1,x) - 2*jacobi_p(n,a,b,x);

check_zero_list(makelist(ratsimp(jacobi_rec(n)),n,0, 7));   

/* See A&S 22.7.18 page 782
*/

test_name : "A&S 22.7.18";

jacobi_rec(n) := (2*n+a+b)*jacobi_p(n,a-1,b,x) 
      - (n+a+b)*jacobi_p(n,a,b,x) +  (n+b)*jacobi_p(n-1,a,b,x);

check_zero_list(makelist(ratsimp(jacobi_rec(n)),n,1, 7));   

/* See A&S 22.7.19 page 782
*/

test_name : "A&S 22.7.19";

jacobi_rec(n) := (2*n+a+b)*jacobi_p(n,a,b-1,x) 
      - (n+a+b)*jacobi_p(n,a,b,x) -  (n+a)*jacobi_p(n-1,a,b,x);
     
check_zero_list(makelist(ratsimp(jacobi_rec(n)),n, 1, 7));   

/* See A&S 22.7.20 page 782
*/

test_name : "A&S 22.7.20";

jacobi_rec(n) := jacobi_p(n,a,b-1,x) 
      - jacobi_p(n,a-1,b,x) -  jacobi_p(n-1,a,b,x);

check_zero_list(makelist(ratsimp(jacobi_rec(n)),n,1, 2));   

/* See A&S 22.7.21 page 782
*/

test_name : "A&S 22.7.21";

ultraspherical_rec(n) := 2*a*(1-x^2)*ultraspherical(n-1,a+1,x)
- (2*a+n-1) * ultraspherical(n-1,a,x) + n*x*ultraspherical(n,a,x);

foo : makelist(ratsimp(ultraspherical_rec(n)),n,1, 7)$
foo : append(ev(foo,a=4/5), ev(foo, a= -2/3), ev(foo, a=8))$
check_zero_list(foo);   

   
/* See A&S 22.7.23 page 782;  funny 22.7.22 is missing a lhs.
    Maxima lacks simplification rules to  simplify  linear 
    combinations of gamma functions. 
*/

test_name : "A&S 22.7.23";

ultraspherical_rec(n) := (n+a)*ultraspherical(n+1,a-1,x)
- (a-1) * (ultraspherical(n+1,a,x) - ultraspherical(n-1,a,x));

foo : makelist(ratsimp(ultraspherical_rec(n)),n,1, 7)$
foo : append(ev(foo,a=4/5,rat), ev(foo, a=8,rat))$
check_zero_list(foo);   


/* See A&S 22.7.24 page 782
*/

test_name : "A&S 22.7.24";

cheb_rec(n,m) := 2 * chebyshev_t(m,x) * chebyshev_t(n,x)
- chebyshev_t(n+m,x) - chebyshev_t(n-m,x);

foo : makelist(makelist(cheb_rec(n, m), m,1,n),n,1, 9)$
foo : rat(foo)$
foo : apply(append,foo)$
check_zero_list(foo);   


/* See A&S 22.7.25 page 782
*/

test_name : "A&S 22.7.25";

cheb_rec(n,m) := 2*(x^2-1)*chebyshev_u(m-1,x) * chebyshev_u(n-1,x)
 - chebyshev_t(n+m,x) + chebyshev_t(n-m,x);

foo : makelist(makelist(cheb_rec(n, m), m,1,n),n,1, 9)$
foo : rat(foo)$
foo : apply(append,foo)$
check_zero_list(foo);   
 

/* See A&S 22.7.26 page 782
*/

test_name : "A&S 22.7.26";

cheb_rec(n,m) := 2*chebyshev_t(m,x) * chebyshev_u(n-1,x)
   -chebyshev_u(n+m-1,x) - chebyshev_u(n-m-1,x);

foo : makelist(makelist(cheb_rec(n, m), m, 0, n-1),n,1, 9)$
foo : rat(foo)$
foo : apply(append,foo)$
check_zero_list(foo);   
   
/* See A&S 22.7.27 page 782
*/

test_name : "A&S 22.7.27";

cheb_rec(n,m) := 2*chebyshev_t(n,x) * chebyshev_u(m-1,x)
   -chebyshev_u(n+m-1,x) + chebyshev_u(n-m-1,x);

foo : makelist(makelist(cheb_rec(n, m), m,1,n-1),n,  2,  10)$
foo : rat(foo)$
foo : apply(append,foo)$
check_zero_list(foo);   

/* See A&S 22.7.28 page 782
*/

test_name : "A&S 22.7.28";

cheb_rec(n) := 2*chebyshev_t(n,x) * chebyshev_u(n-1,x)
   -chebyshev_u(2*n-1,x);

foo : makelist(cheb_rec(n), n,2,10)$
foo : rat(foo)$
check_zero_list(foo);   

/* See A&S 22.7.29 page 783
*/

test_name : "A&S 22.7.29";

lag_rec(n) := gen_laguerre(n,1/3+1,x) -((x-n) * gen_laguerre(n,1/3,x) + (1/3+n) * gen_laguerre(n-1,1/3,x))/x;
check_zero_list(ratsimp(makelist(lag_rec(n),n,1, 10)));

lag_rec(n) := gen_laguerre(n,5+1,x) -((x-n) * gen_laguerre(n,5,x) + (5+n) * gen_laguerre(n-1,5,x))/x;
check_zero_list(ratsimp(makelist(lag_rec(n),n,1,10)));

lag_rec(n) := gen_laguerre(n,1,x) -((x-n) * gen_laguerre(n,0,x) + (n) * gen_laguerre(n-1,0,x))/x;
check_zero_list(ratsimp(makelist(lag_rec(n),n,1,10)));


/* See A&S 22.7.30 page 783
*/

test_name : "A&S 22.7.30";

declare(a,integer);

lag_rec(n) := gen_laguerre(n,a-1,x) -  gen_laguerre(n,a,x) +  gen_laguerre(n-1,a,x);

check_zero_list(ratsimp(makelist(lag_rec(n),n,1, 10)));
forget(a,integer);
 
 /* See A&S 22.7.31 page 783
 */

test_name : "A&S 22.7.31";

lag_rec(n) := gen_laguerre(n,a+1,x) -  (n+a+1)*gen_laguerre(n,a,x) / x +  (n+1)*gen_laguerre(n+1,a,x)/x;
check_zero_list(ratsimp(makelist(lag_rec(n),n,0, 7)));
 
 /* See A&S 22.7.32 page 783
 */

test_name : "A&S 22.7.32";

lag_rec(n) := gen_laguerre(n,a-1,x) -  (n+1)*gen_laguerre(n+1,a,x) / (n+a) +  (n+1-x)*gen_laguerre(n,a,x)/(n+a);
check_zero_list(ratsimp(makelist(lag_rec(n),n,0,7)));

/* See A&S 22.2.1 page 774
*/

test_name : "A&S 22.2.1";

assume(a > 0, b > 0);

baz(n,m) := integrate((1-x)^a*(1+x)^b * rat(jacobi_p(n,a,b,x)* jacobi_p(m,a,b,x)),x,-1,1);
foo : makelist(makelist(baz(n,m),n,0, m-1),m,1, 2)$
foo : rat(foo)$
foo : apply(append,foo)$
check_zero_list(foo);   
forget(a>0, b>0);

test_name : "jacobi normalization";

stand(n) := jacobi_p(n,a,b,1) - binomial(n+a,n);
check_zero_list(makelist(stand(n),n,0, 7));

test_name : "A&S 22.2.3";

assume(a > 1/2);
baz(n,m) := 'integrate((1-x^2)^(a-1/2) * ultraspherical(n,a,x)* ultraspherical(m,a,x),x,-1,1);
foo : makelist(makelist(ev(baz(n,m),integrate),n,0,m-1),m,1, 2);
foo : ev(foo, rat);
forget(a > 1/2);
foo : apply(append,foo)$
check_zero_list(foo);   

/* See A&S 22.2.3 page 774; Maxima doesn't know enough about 
the gamma functions to simplify these expressions to zero.
*/

test_name : "A&S 22.2.3";

stand(n) := ultraspherical(n,a,1) - binomial(n+2*a-1,n);
foo : makelist(stand(n),n,0, 7);
foo : append(ev(foo,a=2/3), ev(foo, a=7), ev(foo,a=1/3));
foo : rat(foo);
check_zero_list(foo);

/* See A&S 22.2.10 page 774
*/

test_name : "A&S 22.2.10";

baz(n,m) := integrate(rat(legendre_p(n,x)* legendre_p(m,x)),x,-1,1) - kron_delta(n,m) * 2 /(2*n+1);
foo : makelist(makelist(baz(n,m),n,0,3),m,0,3)$
foo : apply(append, foo)$
check_zero_list(foo)$

test_name : "legendre poly normalization";
stand(n) := legendre_p(n,1) -1;
foo : makelist(stand(n),n,0,35)$
check_zero_list(foo)$

/* See A&S 22.2.12 page 774
*/

test_name : "A&S 22.2.12";
baz(n,m) := 'integrate(gen_laguerre(n,a,x) * gen_laguerre(m,a,x) * exp(-x)*x^a,x,0,inf) - kron_delta(n,m) * gamma(a+n+1)/n!;
foo : makelist(makelist(baz(n,m),n,0,5),m,0,5)$
foo : apply(append, ev(foo,a=2/3, integrate))$
check_zero_list(foo)$


/* See A&S 22.2.13 page 775
*/

test_name : "A&S 22.2.13";
baz(n,m) := 'integrate(laguerre(n,x) * laguerre(m,x) * exp(-x),x,0,inf) - kron_delta(n,m);
foo : makelist(makelist(ev(baz(n,m), integrate), n,0,4),m,0,4);
foo : rat(foo);
foo : apply(append, foo)$
check_zero_list(foo)$

/* See A&S 22.2.14 page 775
*/

test_name : "A&S 22.2.14";
baz(n,m) := 'integrate(hermite(n,x) * hermite(m,x) * exp(-x^2),x,-inf,inf) - kron_delta(n,m) * sqrt(%pi) * 2^n * n!;
foo : makelist(makelist(ev(baz(n,m), integrate), n,0,4),m,0,4);
foo : apply(append, foo)$
check_zero_list(foo)$


/* Some Christoffel-Darboux sum formulae
*/

/* See A&S 22.12.2 page 785
*/

test_name : "A&S 22.12.2";
baz(n) := sum(chebyshev_t(2*k,x) ,k,0,n)  - (1 + chebyshev_u(2*n,x))/2;
foo : makelist(rat(baz(n)),n,0,7)$
check_zero_list(foo)$

/* See A&S 22.12.3 page 785
*/

test_name : "A&S 22.12.3";
baz(n) := sum(chebyshev_t(2*k+1,x) ,k,0,n-1)  - chebyshev_u(2*n-1,x)/2;
foo : makelist(rat(baz(n)),n,1, 7)$
check_zero_list(foo)$

/* See A&S 22.12.4 page 785
*/

test_name : "A&S 22.12.4";
baz(n) := sum(chebyshev_u(2*k,x) ,k,0,n)  - (1-chebyshev_t(2*n+2,x))/(2 * (1-x^2));
foo : makelist(rat(baz(n)),n,1, 11)$
check_zero_list(foo)$

/* See A&S 22.2.12.5 page 785
*/

test_name : "A&S 22.12.5";
baz(n) := sum(chebyshev_u(2*k+1,x) ,k,0,n-1)  - (x-chebyshev_t(2*n+1,x))/(2 * (1-x^2));
foo : makelist(rat(baz(n)),n,1,7)$
check_zero_list(foo)$

/* See A&S 22.12.6 page 785
*/

test_name : "A&S 22.12.6";
baz(n) := gen_laguerre(n,a+b+1,x+y) - sum(gen_laguerre(k,a,x) * gen_laguerre(n-k,b,y),k,0,n);
foo : makelist(rat(baz(n)),n,1, 7)$
check_zero_list(foo)$

/* See A&S 22.12.7 page 785
*/

test_name : "A&S 22.12.7";
baz(n) := gen_laguerre(n,a,x*y) - 
sum(binomial(n+a,m) * y^(n-m) * (1-y)^m * gen_laguerre(n-m,a,x),m,0,n);
foo : makelist(rat(baz(n)),n,1,3)$
check_zero_list(foo)$

/* See A&S 22.12.8 page 785
*/

test_name : "A&S 22.12.8";
baz(n) := hermite(n,x+y) - sum(binomial(n, k) * hermite(k,sqrt(2)*x) * hermite(n-k,sqrt(2)*y),k,0,n) / 2^(n/2);
foo : makelist(rat(baz(n)),n,0, 7)$
check_zero_list(foo)$

/* See A&S 22.5.17 page 778
*/

test_name : "A&S 22.5.17";
baz(n,m) := gen_laguerre(n,m,x) - (-1)^m * diff(laguerre(n+m,x),x,m);
foo : makelist(makelist(baz(i,j),j,0,i),i,0,7);
foo : rat(foo);
foo : apply(append,foo);
check_zero_list(foo)$

/* See A&S 22.7.29 page 783
*/

test_name : "A&S 22.7.29";
baz(n) := gen_laguerre(n,a+1,x) - ((x-n)*gen_laguerre(n,a,x) + (a+n)*gen_laguerre(n-1,a,x))/x;
foo : makelist(baz(i),i,1,8);
foo : rat(foo);
check_zero_list(foo)$





/* float tests
*/

/*--------------*/

test_name : "jacobi_p float";

foo : map(floatnump,  [ jacobi_p(5, 2.0, 6, 2),
                jacobi_p(5, 2, 6.0, 2),
                jacobi_p(5, 2, 6, 2.0)]);

foo : append(foo,  map(bfloatp,  [ jacobi_p(5, 2.0b0, 6, 2),
                jacobi_p(5, 2, 6.0b0, 2),
                jacobi_p(5, 2, 6, 2.0b0)]));

foo : append(foo,  map(floating_pointp,  [ jacobi_p(5, 2.01 + %i*3.1, 6, 2),
                jacobi_p(5, 2, 2.01 + %i*3.1, 2),
                jacobi_p(5, 2, 6, 2.01 + %i*3.1)]));

check_true_list(foo);

/*--------------*/
		
test_name : "ultraspherical float";
foo : map(floatnump,  [ ultraspherical(5, 2.0, 6),
                ultraspherical(5, 2, 6.0)]);
foo : append(foo,  map(bfloatp,  [ ultraspherical(5, 2, 6.0b0)]));
foo : append(foo,  map(floating_pointp,  [ultraspherical(5, 2, 6.0 + %i)]));

check_true_list(foo);

/*--------------*/
		
test_name : "assoc_legendre_p float";
foo : map(floatnump,  [   assoc_legendre_p(5, 2, 6.0)]);
foo : append(foo,  map(bfloatp,  [   assoc_legendre_p(5, 2, 6.0b0)]));
foo : append(foo,  
    map(floating_pointp,  [ assoc_legendre_p(5, 2, 6.0 + %i), 
                                          assoc_legendre_p(5, 2, 6 + 3.4*%i)]));
check_true_list(foo);

/*--------------*/
		
test_name : "assoc_legendre_q float";
foo : map(floatnump,  [   assoc_legendre_q(5, 2, 0.6)]);
foo : append(foo,  map(bfloatp,  [   assoc_legendre_q(5, 2, 6.0b-1)]));
check_true_list(foo);

/*--------------*/
		
test_name : "legendre_q float";
foo : map(floatnump,  [ legendre_q(5, 0.6)]);
foo : append(foo,  map(bfloatp,  [legendre_q(5, 6.0b-1)]));
check_true_list(foo);

/*--------------*/
		
test_name : "chebyshev_t float";
foo : map(floatnump,  [ chebyshev_t(5, 6.0)]);
foo : append(foo,  map(bfloatp,  [chebyshev_t(5, 6.0b0)]));
check_true_list(foo);

/*--------------*/
		
test_name : "chebyshev_u float";
foo : map(floatnump,  [ chebyshev_u(5, 6.0)]);
foo : append(foo,  map(bfloatp,  [chebyshev_u(5, 6.0b0)]));
check_true_list(foo);

/*--------------*/
		
test_name : "laguerre float";
foo : map(floatnump,  [ laguerre(5, 6.0)]);
foo : append(foo,  map(bfloatp,  [laguerre(5, 6.0b0)]));
check_true_list(foo);

gen_laguerre(n, a, x);

/*--------------*/

test_name : "gen_laguerre float";
foo : map(floatnump,  
      [gen_laguerre(5, 2.3,3.0e-1), gen_laguerre(5,2,3.8e-2)]);

foo : append(foo,  map(bfloatp,  
     [gen_laguerre(5, 2,3.0b0), gen_laguerre(5, 2, 3.8b0)]));
check_true_list(foo);


/* See G&R 8.813 page 1015
*/

test_name : "G&R 8.813 (1-6)";

foo : [assoc_legendre_p(1,1,x) + sqrt(1-x^2),
         assoc_legendre_p(2,1,x) + 3 * x * sqrt(1-x^2),
         assoc_legendre_p(2,2,x) - 3 *(1-x^2),
         assoc_legendre_p(3,1,x) + 3 * sqrt(1-x^2) *(5*x^2-1) / 2,
         assoc_legendre_p(3,2,x) - 15*x*(1-x^2),
         assoc_legendre_p(3,3,x) + 15 * (1-x^2)^(3/2)];

foo : radcan(rat(foo));	 

check_zero_list(foo);

/* See G&R 8.950 (1) page 1033
*/

test_name : "G&R 8.950 (1)";
foo : makelist(hermite(n,x) - (-1)^n * exp(x^2) * diff(exp(-x^2),x,n),n,0,9);
foo : rat(foo);
check_zero_list(foo);


/* See G&R 8.952 (1) page 1033
*/

test_name : "G&R 8.952 (1)";
foo : makelist(diff(hermite(n,x),x) - 2 * n * hermite(n-1,x),n,1,7);
foo : rat(foo);
check_zero_list(foo);

/* See G&R 8.952 (2) page 1033
*/
test_name : "G&R 8.952 (2)";
foo : makelist(hermite(n+1,x) - 2 * x * hermite(n,x) + 2 * n * hermite(n-1,x),n,1,7);
foo : rat(foo);
check_zero_list(foo);

/* See G&R 8.956 (1-3) page 1034
*/

test_name : "G&R 8.956 (1-5)";

foo : [hermite(0,x) - 1,
         hermite(1,x) - 2*x,
	 hermite(2,x) - (4*x^2 -2),
	 hermite(3,x) - (8*x^3-12*x),
	 hermite(4,x) - (16*x^4 - 48 * x^2 + 12)];
foo : rat(foo);
check_zero_list(foo);

/* See A&S 10.1.19 page 439 
*/

test_name : "A&S 10.1.19 spherical_hankel2";
baz(n) := spherical_hankel2(n-1,x) + spherical_hankel2(n+1,x) - (2*n+1) * spherical_hankel2(n,x) /x;
foo : makelist(baz(k),k,-7,7)$
foo : rat(expand(foo));
check_zero_list(foo);

test_name : "A&S 10.1.19 spherical_hankel1";
baz(n) := spherical_hankel1(n-1,x) + spherical_hankel1(n+1,x) - (2*n+1) * spherical_hankel1(n,x) /x;
foo : makelist(baz(k),k,-7,7)$
foo : rat(expand(foo));
check_zero_list(foo);

test_name : "A&S 10.1.19 spherical_bessel_j";
baz(n) := spherical_bessel_j(n-1,x) + spherical_bessel_j(n+1,x) - (2*n+1) * spherical_bessel_j(n,x) /x;
foo : makelist(baz(k),k,-7,7)$
foo : rat(foo);
check_zero_list(foo);

test_name : "A&S 10.1.19 spherical_bessel_y";
baz(n) := spherical_bessel_y(n-1,x) + spherical_bessel_y(n+1,x) - (2*n+1) * spherical_bessel_y(n,x) /x;
foo : makelist(baz(k),k,-7,7)$
foo : rat(foo);
check_zero_list(foo);

/*--------------*/

/* See A&S 10.1.20 page 439 
*/

test_name : "A&S 10.1.20 spherical_hankel1";
baz(n) := n * spherical_hankel1(n-1,q) - (n+1)*spherical_hankel1(n+1,q)
 -(2*n+1) * diff(spherical_hankel1(n,q),q);
foo : makelist(baz(k),k,-7,7)$
foo : ratsimp(foo);
check_zero_list(foo);

test_name : "A&S 10.1.20 spherical_hankel2";
baz(n) := n * spherical_hankel2(n-1,q) - (n+1)*spherical_hankel2(n+1,q)
 -(2*n+1) * diff(spherical_hankel2(n,q),q);
foo : makelist(baz(k),k,-7,7)$
foo : ratsimp(foo);
check_zero_list(foo);

test_name : "A&S 10.1.20 spherical_bessel_j";
baz(n) := n * spherical_bessel_j(n-1,q) - (n+1)*spherical_bessel_j(n+1,q)
 -(2*n+1) * diff(spherical_bessel_j(n,q),q);
foo : makelist(baz(k),k,-7,7)$
foo : ratsimp(foo);
check_zero_list(foo);

test_name : "A&S 10.1.20 spherical_bessel_y";
baz(n) := n * spherical_bessel_y(n-1,q) - (n+1)*spherical_bessel_y(n+1,q)
 -(2*n+1) * diff(spherical_bessel_y(n,q),q);
foo : makelist(baz(k),k,-7,7)$
foo : ratsimp(foo);
check_zero_list(foo);
 
/*--------------*/

test_name : "A&S 10.1.31";
baz(n) := spherical_bessel_j(n,t) *spherical_bessel_y(n-1,t) -
    spherical_bessel_j(n-1,t) *spherical_bessel_y(n,t) - 1/t^2;
foo : makelist(baz(k),k,-9, 9)$
foo : trigreduce(ratsimp(foo));
check_zero_list(foo);
    
/*--------------*/

remove(n,integer);
remove(k,integer);
test_name : "jacobi_p gradef test";
foo : diff(jacobi_p(k,a,b,x^2) - jacobi_p(7,a,b,x^2),x);
foo : ev(foo, k=7);
foo : rat(foo);
check_zero_list([foo]);
	
/*--------------*/

test_name : "ultraspherical gradef test";
foo : diff(ultraspherical(k,a,x^2) - ultraspherical(7,a,x^2),x);
foo : ev(foo, k=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "assoc_legendre_p gradef test";
foo : diff(assoc_legendre_p(n,m,x^2) - assoc_legendre_p(7,3,x^2),x);
foo : ev(foo, n=7,m=3);
foo : radcan(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "chebyshev_t gradef test";
foo : diff(chebyshev_t(n,x^2) - chebyshev_t(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "chebyshev_u gradef test";
foo : diff(chebyshev_u(n,x^2) - chebyshev_u(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "laguerre gradef test";
foo : diff(laguerre(n,x^2) - laguerre(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "gen laguerre gradef test";
foo : diff(gen_laguerre(n,a,x^2) - gen_laguerre(7,a,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "legendre_p gradef test";
foo : diff(legendre_p(n,x^2) - legendre_p(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "hermite gradef test";
foo : diff(hermite(n,x^2) - hermite(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "spherical_hankel2 gradef test";
foo : diff(spherical_hankel2(n,x^2) - spherical_hankel2(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "spherical_hankel1 gradef test";
foo : diff(spherical_hankel1(n,x^2) - spherical_hankel1(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "spherical_bessel_j gradef test";
foo : diff(spherical_bessel_j(n,x^2) - spherical_bessel_j(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);

/*--------------*/

test_name : "spherical_bessel_y gradef test";
foo : diff(spherical_bessel_y(n,x^2) - spherical_bessel_y(7,x^2),x);
foo : ev(foo, n=7);
foo : rat(foo);
check_zero_list([foo]);


/*--------------*/

test_name : "spherical_harmonic gradef test";
foo : [diff(spherical_harmonic(n, m, x, y) - spherical_harmonic(7, 2, x, y),x),
          diff(spherical_harmonic(n, m, x, y) - spherical_harmonic(7,2, x, y),y)];
foo : ev(foo, n=7, m=2);
foo : radcan(foo);
foo : trigreduce(rat(foo));
check_zero_list(foo);

/*--------------*/

test_name : "jacobi sum representation";
declare(n,integer);
foo : jacobi_p(n,p,q,x)$
foo : ev(foo, sum, n=7)$
foo : rat(foo - jacobi_p(7,p,q,x))$ 
check_zero_list([foo]);

/*--------------*/

test_name : "ultraspherical sum representation";
foo : ultraspherical(n,p,x)$
foo : ev(foo, sum, n=2)$
foo : rat(foo - ultraspherical(2,p,x))$ 
check_zero_list([foo]);

/*--------------*/
test_name : "legendre_p sum representation";
foo : legendre_p(n,x)$
foo : ev(foo, sum, n=8)$
foo : rat(foo - legendre_p(8,x))$ 
check_zero_list([foo]);

/*----------------*/

test_name : "chebyshev_t sum representation";
foo : chebyshev_t(n,x)$
foo : ev(foo, sum, n=5)$
foo : rat(foo - chebyshev_t(5,x))$ 
check_zero_list([foo]);

/*----------------*/

test_name : "chebyshev_u sum representation";
foo : chebyshev_u(n,x)$
foo : ev(foo, sum, n=15)$
foo : rat(foo - chebyshev_u(15,x))$ 
check_zero_list([foo]);

print("specfun version = ", get('specfun,'version));
print("errors found = ", errors_found);
print("number of tests passed =", length(tests_pass));

/* Generate A&S Figure 22.4 page 776 
*/

baz : makelist(ultraspherical(k, 0.5, x),k,2,5)$
plot2d(baz,[x,-1,1]);

/* Generate A&S Figure 22.5 page 777 
*/

baz : makelist(ultraspherical(5, 0.2*k, x),k,1,5)$
plot2d(baz, [x,-0.8,0.8]);
