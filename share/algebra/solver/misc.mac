/*
These functions implement misc functions needed by Solver
Copyright (C) 2000 Dan Stanger

This library is free software; you can redistribute it and/or modify it
under the terms of the GNU Library General Public License as published
by the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This library is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

Dan Stanger dan.stanger@ieee.org
please contact me for updates to this code
*/
/******************************************************************************/
/* Powers creates a list of low powers in a variable                          */
/******************************************************************************/
Powers(e,v):=maplist(
   lambda([p],lopow(p,v)), e)$
/******************************************************************************/
/* pop pops the first element off a list and returns it                       */
/******************************************************************************/
Pop( l) ::= buildq([l],block([t:first(l)],l:rest(l),t))$
/******************************************************************************/
/* Set_Element modifies lists or matrixes and returns the list or matrix      */
/******************************************************************************/
Set_Element(o,i,j, [l]):=if matrixp(o) then block(
   if l # [] then (o[i,j]:first(l),o) else (o[i]:j,o))
else (o[i]:j,o)$
